[
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1569, 
        "numberRunning": 1570, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/176912167", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.creators.Creator1476Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testConstructorChoice", 
          "testClass": "com.fasterxml.jackson.databind.creators.Creator1476Test", 
          "detail": "Could not find creator property with name 'intField' (in class com.fasterxml.jackson.databind.creators.Creator1476Test$SimplePojo)\n at [Source: { \"intField\": 1, \"stringField\": \"foo\" }; line: 1, column: 1]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190405643", 
        "date": "Jan 9, 2017 10:46:51 PM", 
        "id": 190405643
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/176912167", 
        "date": "Nov 18, 2016 4:09:26 AM", 
        "id": 176912167
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "sha": "d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "branchName": "2.7", 
        "date": "Jan 9, 2017 10:42:27 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/002a9a3e9b98ebebf53e43aed0536d3c50851c84", 
        "sha": "002a9a3e9b98ebebf53e43aed0536d3c50851c84", 
        "branchName": "2.7", 
        "date": "Nov 18, 2016 4:05:35 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-176912167-190405643", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 362, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 30, 
        "numberDeleted": 24
      }
    }, 
    "bugId": "Bears_1", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\nindex 8e38f5d..a530e4b 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n@@ -162,36 +162,39 @@ public class CreatorCollector\n             SettableBeanProperty[] injectables)\n     {\n         if (creator.getParameterType(0).isCollectionLikeType()) {\n-            verifyNonDup(creator, C_ARRAY_DELEGATE, explicit);\n-            _arrayDelegateArgs = injectables;\n+            if (verifyNonDup(creator, C_ARRAY_DELEGATE, explicit)) {\n+                _arrayDelegateArgs = injectables;\n+            }\n         } else {\n-            verifyNonDup(creator, C_DELEGATE, explicit);\n-            _delegateArgs = injectables;\n+            if (verifyNonDup(creator, C_DELEGATE, explicit)) {\n+                _delegateArgs = injectables;\n+            }\n         }\n     }\n     \n     public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit,\n             SettableBeanProperty[] properties)\n     {\n-        verifyNonDup(creator, C_PROPS, explicit);\n-        // Better ensure we have no duplicate names either...\n-        if (properties.length > 1) {\n-            HashMap<String,Integer> names = new HashMap<String,Integer>();\n-            for (int i = 0, len = properties.length; i < len; ++i) {\n-                String name = properties[i].getName();\n-                /* [Issue-13]: Need to consider Injectables, which may not have\n-                 *   a name at all, and need to be skipped\n-                 */\n-                if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n-                    continue;\n-                }\n-                Integer old = names.put(name, Integer.valueOf(i));\n-                if (old != null) {\n-                    throw new IllegalArgumentException(\"Duplicate creator property \\\"\"+name+\"\\\" (index \"+old+\" vs \"+i+\")\");\n+        if (verifyNonDup(creator, C_PROPS, explicit)) {\n+            // Better ensure we have no duplicate names either...\n+            if (properties.length > 1) {\n+                HashMap<String,Integer> names = new HashMap<String,Integer>();\n+                for (int i = 0, len = properties.length; i < len; ++i) {\n+                    String name = properties[i].getName();\n+                    /* [Issue-13]: Need to consider Injectables, which may not have\n+                     *   a name at all, and need to be skipped\n+                     */\n+                    if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+                        continue;\n+                    }\n+                    Integer old = names.put(name, Integer.valueOf(i));\n+                    if (old != null) {\n+                        throw new IllegalArgumentException(\"Duplicate creator property \\\"\"+name+\"\\\" (index \"+old+\" vs \"+i+\")\");\n+                    }\n                 }\n             }\n+            _propertyBasedArgs = properties;\n         }\n-        _propertyBasedArgs = properties;\n     }\n \n     public void addIncompeteParameter(AnnotatedParameter parameter) {\n@@ -293,7 +296,10 @@ public class CreatorCollector\n         return member;\n     }\n \n-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n+    /**\n+     * @return True if specified Creator is to be used\n+     */\n+    protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n     {\n         final int mask = (1 << typeIndex);\n         _hasNonDefaultCreator = true;\n@@ -301,11 +307,10 @@ public class CreatorCollector\n         // already had an explicitly marked one?\n         if (oldOne != null) {\n             boolean verify;\n-\n             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n                 // but skip, if new one not annotated\n                 if (!explicit) {\n-                    return;\n+                    return false;\n                 }\n                 // both explicit: verify\n                 verify = true;\n@@ -327,7 +332,7 @@ public class CreatorCollector\n                 // otherwise, which one to choose?\n                 if (newType.isAssignableFrom(oldType)) {\n                     // new type more generic, use old\n-                    return;\n+                    return false;\n                 }\n                 // new type more specific, use it\n             }\n@@ -336,6 +341,7 @@ public class CreatorCollector\n             _explicitCreators |= mask;\n         }\n         _creators[typeIndex] = _fixAccess(newOne);\n+        return true;\n     }\n \n     /*\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 172426376, 
        "hostName": "local", 
        "totalMemory": 396886016, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:44:09 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/176912167/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            51
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 51
        }, 
        "testing": {
          "stepDurations": [
            31
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 31
        }, 
        "cloning": {
          "stepDurations": [
            57
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 57
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:41:02 PM", 
      "totalDuration": 181
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1570, 
        "numberRunning": 1571, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/190405643", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "Can not find a (Map) Key deserializer for type [simple type, class java.lang.CharSequence]\n at [Source: {\"a\":\"b\"}; line: 1, column: 1]", 
          "isError": true, 
          "testMethod": "testcharSequenceKeyMap", 
          "testClass": "com.fasterxml.jackson.databind.deser.TestMapDeserialization"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 30, 
          "numberRunning": 31, 
          "testClass": "com.fasterxml.jackson.databind.deser.TestMapDeserialization", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195044059", 
        "date": "Jan 25, 2017 4:02:17 AM", 
        "id": 195044059
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190405643", 
        "date": "Jan 9, 2017 10:46:51 PM", 
        "id": 190405643
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/23a733207bc88a06ee486a5896b7b0c4ebbbfef4", 
        "sha": "23a733207bc88a06ee486a5896b7b0c4ebbbfef4", 
        "branchName": "2.7", 
        "date": "Jan 25, 2017 3:58:19 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "sha": "d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "branchName": "2.7", 
        "date": "Jan 9, 2017 10:42:27 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-190405643-195044059", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 1
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_2", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\nindex d95749a..8bddce4 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n@@ -72,7 +72,7 @@ public class StdKeyDeserializer extends KeyDeserializer\n         int kind;\n \n         // first common types:\n-        if (raw == String.class || raw == Object.class) {\n+        if (raw == String.class || raw == Object.class || raw == CharSequence.class) {\n             return StringKD.forType(raw);\n         } else if (raw == UUID.class) {\n             kind = TYPE_UUID;\n", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 362, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 201092024, 
        "hostName": "local", 
        "totalMemory": 363331584, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:36:31 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/190405643/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            49
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 49
        }, 
        "testing": {
          "stepDurations": [
            36
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 36
        }, 
        "cloning": {
          "stepDurations": [
            54
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 54
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:32:50 PM", 
      "totalDuration": 214
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1680, 
        "numberRunning": 1681, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.util.NoSuchElementException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/190406891", 
      "failingClasses": [
        {
          "numberPassing": 8, 
          "numberRunning": 9, 
          "testClass": "com.fasterxml.jackson.databind.struct.TestUnwrapped", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.util.NoSuchElementException", 
          "testMethod": "testCaseInsensitiveUnwrap", 
          "testClass": "com.fasterxml.jackson.databind.struct.TestUnwrapped", 
          "detail": "No entry 'businessAddress' found, can't remove", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190505536", 
        "date": "Jan 10, 2017 6:42:40 AM", 
        "id": 190505536
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190406891", 
        "date": "Jan 9, 2017 10:50:43 PM", 
        "id": 190406891
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d7155de6c37db3301b92b755bd0a02388f7dd07f", 
        "sha": "d7155de6c37db3301b92b755bd0a02388f7dd07f", 
        "branchName": "2.8", 
        "date": "Jan 10, 2017 6:38:36 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/7fe2d4f1aaab61e41f31f792f8a988157a34b34c", 
        "sha": "7fe2d4f1aaab61e41f31f792f8a988157a34b34c", 
        "branchName": "2.8", 
        "date": "Jan 9, 2017 10:45:35 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-190406891-190505536", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 382, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 6, 
        "numberDeleted": 3
      }
    }, 
    "bugId": "Bears_3", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\nindex fd30aaf..8031ee0 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n@@ -92,7 +92,7 @@ public class BeanPropertyMap\n     protected void init(Collection<SettableBeanProperty> props)\n     {\n         _size = props.size();\n-        \n+\n         // First: calculate size of primary hash area\n         final int hashSize = findSize(_size);\n         _hashMask = hashSize-1;\n@@ -423,7 +423,8 @@ System.err.println(\"And new propr #\"+slot+\" '\"+key+\"'\");\n      * Specialized method for removing specified existing entry.\n      * NOTE: entry MUST exist, otherwise an exception is thrown.\n      */\n-    public void remove(SettableBeanProperty propToRm) {\n+    public void remove(SettableBeanProperty propToRm)\n+    {\n         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n         String key = getPropertyName(propToRm);\n         boolean found = false;\n@@ -434,7 +435,9 @@ System.err.println(\"And new propr #\"+slot+\" '\"+key+\"'\");\n                 continue;\n             }\n             if (!found) {\n-                found = key.equals(prop.getName());\n+                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n+                //   as only former is lower-case in case-insensitive case\n+                found = key.equals(_hashArea[i-1]);\n                 if (found) {\n                     // need to leave a hole here\n                     _propsInOrder[_findFromOrdered(prop)] = null;\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 129327328, 
        "hostName": "local", 
        "totalMemory": 364380160, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:40:49 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/190406891/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            43
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 43
        }, 
        "testing": {
          "stepDurations": [
            29
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 29
        }, 
        "cloning": {
          "stepDurations": [
            48
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 48
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:37:52 PM", 
      "totalDuration": 172
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1571, 
        "numberRunning": 1572, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.IllegalStateException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195066764", 
      "failureDetails": [
        {
          "failureName": "java.lang.IllegalStateException", 
          "detail": "Internal error: no creator index for property 'a' (of type com.fasterxml.jackson.databind.deser.impl.InnerClassProperty)", 
          "isError": true, 
          "testMethod": "testIssue1501", 
          "testClass": "com.fasterxml.jackson.databind.creators.InnerClassCreatorTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.creators.InnerClassCreatorTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195069327", 
        "date": "Jan 25, 2017 6:45:52 AM", 
        "id": 195069327
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195066764", 
        "date": "Jan 25, 2017 6:27:41 AM", 
        "id": 195066764
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/63afa5297a0b8bcbf31b9c91e5d15537e0fdbdd5", 
        "sha": "63afa5297a0b8bcbf31b9c91e5d15537e0fdbdd5", 
        "branchName": "2.7", 
        "date": "Jan 25, 2017 6:41:59 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d3874ebf3c0585270f1fe33eb7030667bacb63b7", 
        "sha": "d3874ebf3c0585270f1fe33eb7030667bacb63b7", 
        "branchName": "2.7", 
        "date": "Jan 25, 2017 6:23:43 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195066764-195069327", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 9
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_4", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\nindex 311802e..4a9ca99 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n@@ -83,6 +83,15 @@ public final class InnerClassProperty\n     public InnerClassProperty withValueDeserializer(JsonDeserializer<?> deser) {\n         return new InnerClassProperty(this, deser);\n     }\n+\n+    @Override\n+    public void assignIndex(int index) { _delegate.assignIndex(index); }\n+\n+    @Override\n+    public int getPropertyIndex() { return _delegate.getPropertyIndex(); }\n+\n+    @Override\n+    public int getCreatorIndex() { return _delegate.getCreatorIndex(); }\n     \n     // // // BeanProperty impl\n     \n", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 363, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 146485848, 
        "hostName": "local", 
        "totalMemory": 358612992, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:31:33 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195066764/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            49
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 49
        }, 
        "testing": {
          "stepDurations": [
            39
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 39
        }, 
        "cloning": {
          "stepDurations": [
            49
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 49
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:28:02 PM", 
      "totalDuration": 205
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1571, 
        "numberRunning": 1572, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195430379", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testObjectIdWithCreator", 
          "testClass": "com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest", 
          "detail": "No _idValue when handleIdValue called, on instance of com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest$A\n at [Source: {\"id\":\"123\",\"name\":\"A\"}; line: 1, column: 23]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/198387397", 
        "date": "Feb 4, 2017 7:57:01 PM", 
        "id": 198387397
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195430379", 
        "date": "Jan 26, 2017 6:16:10 AM", 
        "id": 195430379
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/04cb1a27e0fe60fe9bab64dfe7f36b3f7649ba0c", 
        "sha": "04cb1a27e0fe60fe9bab64dfe7f36b3f7649ba0c", 
        "branchName": "2.7", 
        "date": "Feb 4, 2017 7:52:58 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/16d77253d2ba0ed293a12013e459d56420a7d056", 
        "sha": "16d77253d2ba0ed293a12013e459d56420a7d056", 
        "branchName": "2.7", 
        "date": "Jan 26, 2017 6:12:01 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195430379-198387397", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 364, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 4, 
        "numberDeleted": 4
      }
    }, 
    "bugId": "Bears_5", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\nindex 0e2b874..d0ebaba 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n@@ -373,6 +373,10 @@ public class BeanDeserializer\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n             p.nextToken(); // to point to value\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // creator property?\n             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n             if (creatorProp != null) {\n@@ -405,10 +409,6 @@ public class BeanDeserializer\n                 }\n                 continue;\n             }\n-            // Object Id property?\n-            if (buffer.readIdProperty(propName)) {\n-                continue;\n-            }\n             // regular property? needs buffering\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) {\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 230270312, 
        "hostName": "local", 
        "totalMemory": 353894400, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:37:09 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195430379/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            49
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 49
        }, 
        "testing": {
          "stepDurations": [
            41
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 41
        }, 
        "cloning": {
          "stepDurations": [
            51
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 51
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:33:23 AM", 
      "totalDuration": 219
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1686, 
        "numberRunning": 1688, 
        "numberFailing": 0, 
        "numberErroring": 2, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", 
            "isError": true, 
            "occurrences": 2
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195646489", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", 
          "detail": "Unrecognized field \"fullName\" (class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$Pojo935), not marked as ignorable (2 known properties: \"lastName\", \"firstName\"])\n at [Source: {\"firstName\":\"Foo\",\"lastName\":\"Bar\",\"fullName\":\"Foo Bar\"}; line: 1, column: 49] (through reference chain: com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$Pojo935[\"fullName\"])", 
          "isError": true, 
          "testMethod": "testReadOnly935", 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest"
        }, 
        {
          "failureName": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", 
          "detail": "Unrecognized field \"x\" (class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$ReadXWriteY), not marked as ignorable (one known property: \"y\"])\n at [Source: {\"x\":5, \"y\":6}; line: 1, column: 7] (through reference chain: com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$ReadXWriteY[\"x\"])", 
          "isError": true, 
          "testMethod": "testReadOnlyAndWriteOnly", 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 2, 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest", 
          "numberFailing": 0, 
          "numberErroring": 2, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195752461", 
        "date": "Jan 27, 2017 4:16:49 AM", 
        "id": 195752461
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195646489", 
        "date": "Jan 26, 2017 8:42:57 PM", 
        "id": 195646489
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "sha": "4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "branchName": "2.8", 
        "date": "Jan 27, 2017 4:12:29 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/2bb770bcd4cbc0c0c3ede86cedd4a602e328e2f6", 
        "sha": "2bb770bcd4cbc0c0c3ede86cedd4a602e328e2f6", 
        "branchName": "2.8", 
        "date": "Jan 26, 2017 8:38:42 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195646489-195752461", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 2, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 7, 
        "numberDeleted": 5
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_6", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\nindex f542d84..fd6a613 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n@@ -4,6 +4,7 @@ import java.lang.reflect.Modifier;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonProperty.Access;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n@@ -727,10 +728,14 @@ public class POJOPropertiesCollector\n \n         while (it.hasNext()) {\n             POJOPropertyBuilder prop = it.next();\n-            prop.removeNonVisible(inferMutators);\n+            // 26-Jan-2017, tatu: [databind#935]: need to denote removal of\n+            Access acc = prop.removeNonVisible(inferMutators);\n+            if (!_forSerialization && (acc == Access.READ_ONLY)) {\n+                _collectIgnorals(prop.getName());\n+            }\n         }\n     }\n-        \n+\n     /**\n      * Helper method called to add explicitly ignored properties to a list\n      * of known ignored properties; this helps in proper reporting of\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\nindex 954f5dd..b9a403c 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n@@ -641,7 +641,7 @@ public class POJOPropertyBuilder\n      * @param inferMutators Whether mutators can be \"pulled in\" by visible\n      *    accessors or not. \n      */\n-    public void removeNonVisible(boolean inferMutators)\n+    public JsonProperty.Access removeNonVisible(boolean inferMutators)\n     {\n         /* 07-Jun-2015, tatu: With 2.6, we will allow optional definition\n          *  of explicit access type for property; if not \"AUTO\", it will\n@@ -680,6 +680,7 @@ public class POJOPropertyBuilder\n                 _setters = _removeNonVisible(_setters);\n             }\n         }\n+        return acc;\n     }\n \n     /**\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 384, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 162681048, 
        "hostName": "local", 
        "totalMemory": 358088704, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:21:13 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195646489/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            54
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 54
        }, 
        "testing": {
          "stepDurations": [
            41
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 41
        }, 
        "cloning": {
          "stepDurations": [
            57
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 57
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:17:46 PM", 
      "totalDuration": 201
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1690, 
        "numberRunning": 1692, 
        "numberFailing": 1, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 1
          }, 
          {
            "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195752461", 
      "failingClasses": [
        {
          "numberPassing": 27, 
          "numberRunning": 28, 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDeserializationTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDefaultReadTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "testMethod": "testNumbersToEnums", 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDeserializationTest", 
          "detail": "Expected an exception with one of substrings ([value not one of declared Enum]): got one with message \"Can not deserialize value of type com.fasterxml.jackson.databind.deser.EnumDeserializationTest$TestEnum from number 1: not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\n at [Source: \"1\"; line: 1, column: 1]\"", 
          "isError": false
        }, 
        {
          "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
          "testMethod": "testWithFailOnNumbersAndReadUnknownAsDefault", 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDefaultReadTest", 
          "detail": "Can not deserialize value of type com.fasterxml.jackson.databind.deser.EnumDefaultReadTest$SimpleEnumWithDefault from number 0: not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\n at [Source: \"0\"; line: 1, column: 1]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195777970", 
        "date": "Jan 27, 2017 7:43:20 AM", 
        "id": 195777970
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195752461", 
        "date": "Jan 27, 2017 4:16:49 AM", 
        "id": 195752461
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/ff441e82825ea48d28baee6ae7f0f705ff421def", 
        "sha": "ff441e82825ea48d28baee6ae7f0f705ff421def", 
        "branchName": "2.8", 
        "date": "Jan 27, 2017 7:39:00 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "sha": "4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "branchName": "2.8", 
        "date": "Jan 27, 2017 4:12:29 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195752461-195777970", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 385, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 7, 
        "numberDeleted": 2
      }
    }, 
    "bugId": "Bears_7", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\nindex 679c417..3c65723 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n@@ -167,17 +167,12 @@ public class EnumDeserializer\n             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                 return null;\n             }\n-        } else {\n-            // [databind#149]: Allow use of 'String' indexes as well\n+        } else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n+            // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)\n             char c = name.charAt(0);\n             if (c >= '0' && c <= '9') {\n                 try {\n                     int index = Integer.parseInt(name);\n-                    if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n-                        return ctxt.handleWeirdNumberValue(_enumClass(), index,\n-                                \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\"\n-                                );\n-                    }\n                     if (index >= 0 && index < _enumsByIndex.length) {\n                         return _enumsByIndex[index];\n                     }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 146750432, 
        "hostName": "local", 
        "totalMemory": 337117184, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:20:25 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195752461/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            42
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 42
        }, 
        "testing": {
          "stepDurations": [
            30
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 30
        }, 
        "cloning": {
          "stepDurations": [
            59
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 59
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:16:48 PM", 
      "totalDuration": 210
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1693, 
        "numberRunning": 1694, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/203042777", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "[no message for java.lang.NullPointerException]", 
          "isError": true, 
          "testMethod": "testConcurrentMaps", 
          "testClass": "com.fasterxml.jackson.databind.ser.TestMapSerialization"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 13, 
          "numberRunning": 14, 
          "testClass": "com.fasterxml.jackson.databind.ser.TestMapSerialization", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/203306015", 
        "date": "Feb 20, 2017 3:55:22 AM", 
        "id": 203306015
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/203042777", 
        "date": "Feb 19, 2017 12:18:29 AM", 
        "id": 203042777
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/64967c410514ec8a94bb11bb26d6a37fafafc14b", 
        "sha": "64967c410514ec8a94bb11bb26d6a37fafafc14b", 
        "branchName": "2.8", 
        "date": "Feb 20, 2017 3:47:15 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/dc02ceac1c3d0939ddf8692f62be52da0e1a242b", 
        "sha": "dc02ceac1c3d0939ddf8692f62be52da0e1a242b", 
        "branchName": "2.8", 
        "date": "Feb 19, 2017 12:14:01 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-203042777-203306015", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 3, 
        "numberDeleted": 17
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_8", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\nindex dbba25d..a3af8cc 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n@@ -952,7 +952,9 @@ public class MapSerializer\n         }\n         // [databind#1411]: TreeMap does not like null key... (although note that\n         //   check above should prevent this code from being called in that case)\n-        if (input.containsKey(null)) {\n+        // [databind#153]: but, apparently, some custom Maps do manage hit this\n+        //   problem.\n+        if (_hasNullKey(input)) {\n             TreeMap<Object,Object> result = new TreeMap<Object,Object>();\n             for (Map.Entry<?,?> entry : input.entrySet()) {\n                 Object key = entry.getKey();\n@@ -967,6 +969,22 @@ public class MapSerializer\n         return new TreeMap<Object,Object>(input);\n     }\n \n+    /**\n+     * @since 2.8.7\n+     */\n+    protected boolean _hasNullKey(Map<?,?> input) {\n+        // 19-Feb-2017, tatu: As per [databind#1513] there are many cases where `null`\n+        //   keys are not allowed, and even attempt to check for presence can cause\n+        //   problems. Without resorting to external sorting (and internal API change),\n+        //   or custom sortable Map implementation (more code) we can try black- or\n+        //   white-listing (that is; either skip known problem cases; or only apply for\n+        //   known good cases).\n+        //   While my first instinct was to do black-listing (remove Hashtable and ConcurrentHashMap),\n+        //   all in all it is probably better to just white list `HashMap` (and its sub-classes).\n+        \n+        return (input instanceof HashMap) && input.containsKey(null);\n+    }\n+    \n     protected void _writeNullKeyedEntry(JsonGenerator gen, SerializerProvider provider,\n             Object suppressableValue, Object value) throws IOException\n     {\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 385, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 249634072, 
        "hostName": "local", 
        "totalMemory": 340787200, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:31:00 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/203042777/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            48
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 48
        }, 
        "testing": {
          "stepDurations": [
            41
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 41
        }, 
        "cloning": {
          "stepDurations": [
            45
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 45
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:27:44 AM", 
      "totalDuration": 190
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1695, 
        "numberRunning": 1696, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/203649003", 
      "failingClasses": [
        {
          "numberPassing": 12, 
          "numberRunning": 13, 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testWithEmptyStringAsNullObject1533", 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl", 
          "detail": "Unexpected token (VALUE_STRING), expected FIELD_NAME: missing property 'type' that is to contain type id  (for class com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl$AsProperty)\n at [Source: { \"value\": \"\" }; line: 1, column: 12] (through reference chain: com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl$AsPropertyWrapper[\"value\"])", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/204682356", 
        "date": "Feb 23, 2017 7:04:53 PM", 
        "id": 204682356
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/203649003", 
        "date": "Feb 21, 2017 2:22:54 AM", 
        "id": 203649003
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/10d5ab37f06f7925bf959312bfb6211f5bc4a1cb", 
        "sha": "10d5ab37f06f7925bf959312bfb6211f5bc4a1cb", 
        "branchName": "2.8", 
        "date": "Feb 23, 2017 7:00:47 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/ce37efcefbfab0fa91562a492f0f80af018a5313", 
        "sha": "ce37efcefbfab0fa91562a492f0f80af018a5313", 
        "branchName": "2.8", 
        "date": "Feb 21, 2017 2:06:13 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-203649003-204682356", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 385, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 7
      }
    }, 
    "bugId": "Bears_9", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\nindex d1d096a..7941e05 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n@@ -153,6 +153,13 @@ public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer\n         // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n         if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n             return super.deserializeTypedFromAny(p, ctxt);\n+        } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) {\n+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n+                String str = p.getText().trim();\n+                if (str.isEmpty()) {\n+                    return null;\n+                }\n+            }\n         }\n         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                 \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 266944648, 
        "hostName": "local", 
        "totalMemory": 354942976, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:27:40 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/203649003/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            52
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 52
        }, 
        "testing": {
          "stepDurations": [
            33
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 33
        }, 
        "cloning": {
          "stepDurations": [
            47
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 47
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:24:31 AM", 
      "totalDuration": 183
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1704, 
        "numberRunning": 1705, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/214497429", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "Can not deserialize instance of com.fasterxml.jackson.databind.BaseMapTest$ABC out of START_ARRAY token\n at [Source:   [\n]; line: 1, column: 3]", 
          "isError": true, 
          "testMethod": "testNullEnumFromEmptyArray", 
          "testClass": "com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 7, 
          "numberRunning": 8, 
          "testClass": "com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/214500046", 
        "date": "Mar 24, 2017 3:32:01 AM", 
        "id": 214500046
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/214497429", 
        "date": "Mar 24, 2017 3:16:36 AM", 
        "id": 214497429
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/b96a3b55d4c28171cb92bd2cafff853ea973d36f", 
        "sha": "b96a3b55d4c28171cb92bd2cafff853ea973d36f", 
        "branchName": "2.8", 
        "date": "Mar 24, 2017 3:27:28 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/23d49e359217fad7b6f316fb31a7196ee4aed1b3", 
        "sha": "23d49e359217fad7b6f316fb31a7196ee4aed1b3", 
        "branchName": "2.8", 
        "date": "Mar 24, 2017 3:12:17 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-214497429-214500046", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 10, 
        "numberDeleted": 3
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_10", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\nindex 3c65723..c3ad93e 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n@@ -165,7 +165,7 @@ public class EnumDeserializer\n         name = name.trim();\n         if (name.length() == 0) {\n             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n-                return null;\n+                return getEmptyValue(ctxt);\n             }\n         } else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n             // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)\n@@ -195,15 +195,8 @@ public class EnumDeserializer\n     protected Object _deserializeOther(JsonParser p, DeserializationContext ctxt) throws IOException\n     {\n         // [databind#381]\n-        if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)\n-                && p.isExpectedStartArrayToken()) {\n-            p.nextToken();\n-            final Object parsed = deserialize(p, ctxt);\n-            JsonToken curr = p.nextToken();\n-            if (curr != JsonToken.END_ARRAY) {\n-                handleMissingEndArrayForSingle(p, ctxt);\n-            }\n-            return parsed;\n+        if (p.hasToken(JsonToken.START_ARRAY)) {\n+            return _deserializeFromArray(p, ctxt);\n         }\n         return ctxt.handleUnexpectedToken(_enumClass(), p);\n     }\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 387, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 170433536, 
        "hostName": "local", 
        "totalMemory": 339214336, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:13:36 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/214497429/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            54
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 54
        }, 
        "testing": {
          "stepDurations": [
            39
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 39
        }, 
        "cloning": {
          "stepDurations": [
            52
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 52
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:09:40 AM", 
      "totalDuration": 229
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1705, 
        "numberRunning": 1706, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/215036598", 
      "failingClasses": [
        {
          "numberPassing": 22, 
          "numberRunning": 23, 
          "testClass": "com.fasterxml.jackson.databind.ser.TestEnumSerialization", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "testMethod": "testMapWithEnumKeys", 
          "testClass": "com.fasterxml.jackson.databind.ser.TestEnumSerialization", 
          "detail": "expected:<{\"map\":{\"[1]\":3}}> but was:<{\"map\":{\"[B]\":3}}>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215111320", 
        "date": "Mar 26, 2017 1:37:59 AM", 
        "id": 215111320
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215036598", 
        "date": "Mar 25, 2017 7:52:45 PM", 
        "id": 215036598
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "sha": "934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "branchName": "2.8", 
        "date": "Mar 26, 2017 1:33:25 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d892303fa5cdcfd5278f6c2a2b1b008d720f7b15", 
        "sha": "d892303fa5cdcfd5278f6c2a2b1b008d720f7b15", 
        "branchName": "2.8", 
        "date": "Mar 25, 2017 7:48:09 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-215036598-215111320", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 388, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 2, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 22, 
        "numberDeleted": 9
      }
    }, 
    "bugId": "Bears_11", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\nindex b708a02..fceba52 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n@@ -31,12 +31,15 @@ public class StdKeySerializer extends StdSerializer<Object>\n         } else if (cls.isEnum()) {\n             // 24-Sep-2015, tatu: Minor improvement over older (2.6.2 and before) code: at least\n             //     use name/toString() variation for as per configuration\n-            Enum<?> en = (Enum<?>) value;\n-\n             if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n-                str = en.toString();\n+                str = value.toString();\n             } else {\n-                str = en.name();\n+                Enum<?> en = (Enum<?>) value;\n+                if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n+                    str = String.valueOf(en.ordinal());\n+                } else {\n+                    str = en.name();\n+                }\n             }\n         } else if (value instanceof Date) {\n             provider.defaultSerializeDateKey((Date) value, g);\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\nindex fd6c99b..2462f2e 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n@@ -144,9 +144,19 @@ public class StdKeySerializers\n                 break;\n             case TYPE_ENUM:\n                 {\n-                    String str = provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)\n-                            ? value.toString() : ((Enum<?>) value).name();\n-                    g.writeFieldName(str);\n+                    String key;\n+\n+                    if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n+                        key = value.toString();\n+                    } else {\n+                        Enum<?> e = (Enum<?>) value;\n+                        if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n+                            key = String.valueOf(e.ordinal());\n+                        } else {\n+                            key = e.name();\n+                        }\n+                    }\n+                    g.writeFieldName(key);\n                 }\n                 break;\n             case TYPE_TO_STRING:\n@@ -250,6 +260,10 @@ public class StdKeySerializers\n                 return;\n             }\n             Enum<?> en = (Enum<?>) value;\n+            if (serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n+                g.writeFieldName(String.valueOf(en.ordinal()));\n+                return;\n+            }\n             g.writeFieldName(_values.serializedValueFor(en));\n         }\n     }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 183977032, 
        "hostName": "local", 
        "totalMemory": 338165760, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:09:27 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/215036598/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            46
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 46
        }, 
        "testing": {
          "stepDurations": [
            44
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 44
        }, 
        "cloning": {
          "stepDurations": [
            46
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 46
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:06:07 AM", 
      "totalDuration": 195
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1708, 
        "numberRunning": 1712, 
        "numberFailing": 4, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 2
          }, 
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 2
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/215111320", 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "detail": "expected:<30> but was:<0>", 
          "isError": false, 
          "testMethod": "testWithUnwrappedAndCreatorSingleParameterInMiddle", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest"
        }, 
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "detail": "expected:<John> but was:<null>", 
          "isError": false, 
          "testMethod": "testWithUnwrappedAndCreatorMultipleParametersAtBeginning", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest"
        }, 
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "detail": "expected:<30> but was:<0>", 
          "isError": false, 
          "testMethod": "testWithUnwrappedAndCreatorMultipleParametersInMiddle", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest"
        }, 
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "detail": "expected:<John> but was:<null>", 
          "isError": false, 
          "testMethod": "testWithUnwrappedAndCreatorSingleParameterAtBeginning", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 6, 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest", 
          "numberFailing": 4, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215799347", 
        "date": "Mar 28, 2017 7:09:55 AM", 
        "id": 215799347
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215111320", 
        "date": "Mar 26, 2017 1:37:59 AM", 
        "id": 215111320
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/e08dafef4faa7d71330160dafcbe77536d90e809", 
        "sha": "e08dafef4faa7d71330160dafcbe77536d90e809", 
        "branchName": "2.8", 
        "date": "Mar 28, 2017 7:05:43 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "sha": "934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "branchName": "2.8", 
        "date": "Mar 26, 2017 1:33:25 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-215111320-215799347", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 47, 
        "numberDeleted": 22
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_12", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\nindex 7b92423..817e29e 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n@@ -26,7 +26,7 @@ public class BuilderBasedDeserializer\n     private static final long serialVersionUID = 1L;\n \n     protected final AnnotatedMethod _buildMethod;\n-\t\n+\n     /*\n     /**********************************************************\n     /* Life-cycle, construction, initialization\n@@ -66,7 +66,7 @@ public class BuilderBasedDeserializer\n         super(src, ignoreAllUnknown);\n         _buildMethod = src._buildMethod;\n     }\n-    \n+\n     protected BuilderBasedDeserializer(BuilderBasedDeserializer src, NameTransformer unwrapper) {\n         super(src, unwrapper);\n         _buildMethod = src._buildMethod;\n@@ -86,7 +86,7 @@ public class BuilderBasedDeserializer\n         super(src, props);\n         _buildMethod = src._buildMethod;\n     }\n-    \n+\n     @Override\n     public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)\n     {\n@@ -117,13 +117,13 @@ public class BuilderBasedDeserializer\n         SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n         return new BeanAsArrayBuilderDeserializer(this, props, _buildMethod);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* JsonDeserializer implementation\n     /**********************************************************\n      */\n-    \n+\n     protected final Object finishBuild(DeserializationContext ctxt, Object builder)\n             throws IOException\n     {\n@@ -137,7 +137,7 @@ public class BuilderBasedDeserializer\n             return wrapInstantiationProblem(e, ctxt);\n         }\n     }\n-    \n+\n     /**\n      * Main deserialization method for bean-based objects (POJOs).\n      */\n@@ -146,7 +146,7 @@ public class BuilderBasedDeserializer\n         throws IOException\n     {\n         JsonToken t = p.getCurrentToken();\n-        \n+\n         // common case first:\n         if (t == JsonToken.START_OBJECT) {\n             t = p.nextToken();\n@@ -197,7 +197,7 @@ public class BuilderBasedDeserializer\n          */\n         return finishBuild(ctxt, _deserialize(p, ctxt, builder));\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Concrete deserialization methods\n@@ -207,7 +207,7 @@ public class BuilderBasedDeserializer\n     protected final Object _deserialize(JsonParser p,\n             DeserializationContext ctxt, Object builder)\n         throws IOException, JsonProcessingException\n-    {        \n+    {\n         if (_injectables != null) {\n             injectValues(ctxt, builder);\n         }\n@@ -233,7 +233,7 @@ public class BuilderBasedDeserializer\n             // Skip field name:\n             p.nextToken();\n             SettableBeanProperty prop = _beanProperties.find(propName);\n-            \n+\n             if (prop != null) { // normal case\n                 try {\n                     builder = prop.deserializeSetAndReturn(p, ctxt, builder);\n@@ -246,7 +246,7 @@ public class BuilderBasedDeserializer\n         }\n         return builder;\n     }\n-    \n+\n     /**\n      * Streamlined version that is only used when no \"special\"\n      * features are enabled.\n@@ -323,7 +323,7 @@ public class BuilderBasedDeserializer\n      * Method called to deserialize bean using \"property-based creator\":\n      * this means that a non-default constructor or factory method is\n      * called, and then possibly other setters. The trick is that\n-     * values for creator method need to be buffered, first; and \n+     * values for creator method need to be buffered, first; and\n      * due to non-guaranteed ordering possibly some other properties\n      * as well.\n      */\n@@ -332,7 +332,7 @@ public class BuilderBasedDeserializer\n     protected final Object _deserializeUsingPropertyBased(final JsonParser p,\n             final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n-    { \n+    {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n \n@@ -414,13 +414,13 @@ public class BuilderBasedDeserializer\n         }\n         return bean;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Deserializing when we have to consider an active View\n     /**********************************************************\n      */\n-    \n+\n     protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt,\n             Object bean, Class<?> activeView)\n         throws IOException, JsonProcessingException\n@@ -447,7 +447,7 @@ public class BuilderBasedDeserializer\n         }\n         return bean;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Handling for cases where we have \"unwrapped\" values\n@@ -477,7 +477,7 @@ public class BuilderBasedDeserializer\n         }\n \n         final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n-        \n+\n         for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n             String propName = p.getCurrentName();\n             p.nextToken();\n@@ -515,7 +515,7 @@ public class BuilderBasedDeserializer\n         tokens.writeEndObject();\n         _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n         return bean;\n-    }    \n+    }\n \n     @SuppressWarnings(\"resource\")\n     protected Object deserializeWithUnwrapped(JsonParser p,\n@@ -580,31 +580,7 @@ public class BuilderBasedDeserializer\n             // creator property?\n             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n             if (creatorProp != null) {\n-                // Last creator property to set?\n-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n-                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n-                    Object bean;\n-                    try {\n-                        bean = creator.build(ctxt, buffer);\n-                    } catch (Exception e) {\n-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n-                        continue; // never gets here\n-                    }\n-                    // if so, need to copy all remaining tokens into buffer\n-                    while (t == JsonToken.FIELD_NAME) {\n-                        p.nextToken(); // to skip name\n-                        tokens.copyCurrentStructure(p);\n-                        t = p.nextToken();\n-                    }\n-                    tokens.writeEndObject();\n-                    if (bean.getClass() != _beanType.getRawClass()) {\n-                        // !!! 08-Jul-2011, tatu: Could probably support; but for now\n-                        //   it's too complicated, so bail out\n-                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n-                        return null;\n-                    }\n-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n-                }\n+                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n                 continue;\n             }\n             // Object Id property?\n@@ -646,7 +622,7 @@ public class BuilderBasedDeserializer\n     /* external type id\n     /**********************************************************\n      */\n-    \n+\n     protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n@@ -699,15 +675,14 @@ public class BuilderBasedDeserializer\n                 } catch (Exception e) {\n                     wrapAndThrow(e, bean, propName, ctxt);\n                 }\n-                continue;\n             } else {\n                 // Unknown: let's call handler method\n-                handleUnknownProperty(p, ctxt, bean, propName);         \n+                handleUnknownProperty(p, ctxt, bean, propName);\n             }\n         }\n         // and when we get this far, let's try finalizing the deal:\n         return ext.complete(p, ctxt, bean);\n-    }        \n+    }\n \n     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p,\n     \t\tDeserializationContext ctxt)\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 389, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 91458944, 
        "hostName": "local", 
        "totalMemory": 319815680, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:05:55 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/215111320/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            46
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 46
        }, 
        "testing": {
          "stepDurations": [
            24
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 24
        }, 
        "cloning": {
          "stepDurations": [
            48
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 48
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:02:54 AM", 
      "totalDuration": 176
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1712, 
        "numberRunning": 1713, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/216970075", 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 3, 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testReadOnly1345", 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest", 
          "detail": "Could not find creator property with name 'name' (in class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$Foo1345)\n at [Source: {\"name\":\"test\"}; line: 1, column: 1]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/216985681", 
        "date": "Mar 31, 2017 2:02:41 AM", 
        "id": 216985681
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/216970075", 
        "date": "Mar 31, 2017 12:57:45 AM", 
        "id": 216970075
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/04c33a5e2abb2aeec6fb1a054ede951b3519d3b4", 
        "sha": "04c33a5e2abb2aeec6fb1a054ede951b3519d3b4", 
        "branchName": "2.8", 
        "date": "Mar 31, 2017 1:58:23 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/5f1039fd154df1337741fa1b3c1c5e61a63456d4", 
        "sha": "5f1039fd154df1337741fa1b3c1c5e61a63456d4", 
        "branchName": "2.8", 
        "date": "Mar 31, 2017 12:53:27 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-216970075-216985681", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 392, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 12, 
        "numberDeleted": 9
      }
    }, 
    "bugId": "Bears_13", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\nindex 4c61444..c69169f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n@@ -441,9 +441,11 @@ public class BeanDeserializerFactory\n             BeanDescription beanDesc, BeanDeserializerBuilder builder)\n         throws JsonMappingException\n     {\n-        final SettableBeanProperty[] creatorProps =\n-                builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n         final boolean isConcrete = !beanDesc.getType().isAbstract();\n+        final SettableBeanProperty[] creatorProps = isConcrete\n+                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n+                : null;\n+        final boolean hasCreatorProps = (creatorProps != null);\n         \n         // 01-May-2016, tatu: Which base type to use here gets tricky, since\n         //   it may often make most sense to use general type for overrides,\n@@ -490,8 +492,8 @@ public class BeanDeserializerFactory\n                 }\n             }\n         }\n-        final boolean useGettersAsSetters = (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n-                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n+        final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n+                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n \n         // Ok: let's then filter out property definitions\n         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n@@ -531,7 +533,7 @@ public class BeanDeserializerFactory\n             }\n             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n             //   (since they are never used anyway)\n-            if (isConcrete && propDef.hasConstructorParameter()) {\n+            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                 /* If property is passed via constructor parameter, we must\n                  * handle things in special way. Not sure what is the most optimal way...\n                  * for now, let's just call a (new) method in builder, which does nothing.\n@@ -548,8 +550,13 @@ public class BeanDeserializerFactory\n                     }\n                 }\n                 if (cprop == null) {\n-                    ctxt.reportMappingException(\"Could not find creator property with name '%s' (in class %s)\",\n-                            name, beanDesc.getBeanClass().getName());\n+                    List<String> n = new ArrayList<>();\n+                    for (SettableBeanProperty cp : creatorProps) {\n+                        n.add(cp.getName());\n+                    }\n+                    ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n+                            \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n+                            name, n);\n                     continue;\n                 }\n                 if (prop != null) {\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 260055472, 
        "hostName": "local", 
        "totalMemory": 345505792, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 5:59:43 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/216970075/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            55
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 55
        }, 
        "testing": {
          "stepDurations": [
            24
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 24
        }, 
        "cloning": {
          "stepDurations": [
            47
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 47
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 5:56:37 AM", 
      "totalDuration": 180
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1573, 
        "numberRunning": 1574, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/221825856", 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "detail": "Expected an exception with one of substrings ([Illegal type]): got one with message \"N/A\n at [Source: {\"id\": 124,\n \"obj\":[ \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\n  {\n    \"transletBytecodes\" : [ \"AAIAZQ==\" ],\n    \"transletName\" : \"a.b\",\n    \"outputProperties\" : { }\n  }\n ]\n}; line: 6, column: 26] (through reference chain: com.fasterxml.jackson.databind.interop.Bean1599[\"obj\"]->com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl[\"outputProperties\"])\"", 
          "isError": false, 
          "testMethod": "testIssue1599", 
          "testClass": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/221903238", 
        "date": "Apr 14, 2017 12:14:16 AM", 
        "id": 221903238
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/221825856", 
        "date": "Apr 13, 2017 8:05:15 PM", 
        "id": 221825856
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/6ce32ffd18facac6abdbbf559c817b47fcb622c1", 
        "sha": "6ce32ffd18facac6abdbbf559c817b47fcb622c1", 
        "branchName": "2.7", 
        "date": "Apr 14, 2017 12:08:10 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/28ec8a47d381311818f805ae76bf84da30f516f9", 
        "sha": "28ec8a47d381311818f805ae76bf84da30f516f9", 
        "branchName": "2.7", 
        "date": "Apr 13, 2017 8:00:31 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-221825856-221903238", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 23
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_14", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\nindex 9fcb68b..ad37dd1 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n@@ -139,6 +139,8 @@ public class BeanDeserializerFactory\n         if (!isPotentialBeanType(type.getRawClass())) {\n             return null;\n         }\n+        // For checks like [databind#1599]\n+        checkIllegalTypes(ctxt, type, beanDesc);\n         // Use generic bean introspection to build deserializer\n         return buildBeanDeserializer(ctxt, type, beanDesc);\n     }\n@@ -834,4 +836,25 @@ public class BeanDeserializerFactory\n         // We default to 'false', i.e. not ignorable\n         return (status == null) ? false : status.booleanValue(); \n     }\n+\n+    /**\n+     * @since 2.8.9\n+     */\n+    protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,\n+            BeanDescription beanDesc)\n+        throws JsonMappingException\n+    {\n+        // There are certain nasty classes that could cause problems, mostly\n+        // via default typing -- catch them here.\n+        Class<?> raw = type.getRawClass();\n+        String name = raw.getSimpleName();\n+\n+        if (\"TemplatesImpl\".equals(name)) { // [databind#1599] \n+            if (raw.getName().startsWith(\"com.sun.org.apache.xalan\")) {\n+                throw JsonMappingException.from(ctxt,\n+                        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\",\n+                                name));\n+            }\n+        }\n+    }\n }\n", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 365, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 121731360, 
        "hostName": "local", 
        "totalMemory": 381157376, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:35:04 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/221825856/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            52
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 52
        }, 
        "testing": {
          "stepDurations": [
            31
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 31
        }, 
        "cloning": {
          "stepDurations": [
            56
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 56
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:31:34 PM", 
      "totalDuration": 203
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1574, 
        "numberRunning": 1575, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/223024976", 
      "failingClasses": [
        {
          "numberPassing": 1, 
          "numberRunning": 2, 
          "testClass": "com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "testMethod": "testIssue1607", 
          "testClass": "com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest", 
          "detail": "expected:<{\"alwaysClass\":[1],\"alwaysProp\":2}> but was:<{\"alwaysClass\":[{\"id\":1,\"value\":13}],\"alwaysProp\":2}>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/223291136", 
        "date": "Apr 18, 2017 9:51:23 PM", 
        "id": 223291136
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/223024976", 
        "date": "Apr 18, 2017 7:15:44 AM", 
        "id": 223024976
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/ec859af181fa5b2da62077d00154e3c13c9d8f28", 
        "sha": "ec859af181fa5b2da62077d00154e3c13c9d8f28", 
        "branchName": "2.7", 
        "date": "Apr 18, 2017 9:46:33 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/8e98ed66bc262681a38052682ec5b6a42120f7f7", 
        "sha": "8e98ed66bc262681a38052682ec5b6a42120f7f7", 
        "branchName": "2.7", 
        "date": "Apr 18, 2017 7:11:02 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-223024976-223291136", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 365, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 14, 
        "numberDeleted": 17
      }
    }, 
    "bugId": "Bears_15", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\nindex d74a2e9..f2bc1ca 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n@@ -576,10 +576,13 @@ public class JacksonAnnotationIntrospector\n     @Override\n     public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n         JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n-        if (ref != null) {\n-            objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n+        if (ref == null) {\n+            return objectIdInfo;\n         }\n-        return objectIdInfo;\n+        if (objectIdInfo == null) {\n+            objectIdInfo = ObjectIdInfo.empty();\n+        }\n+        return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n     }\n \n     /*\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\nindex 0457ec0..049ab35 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n@@ -19,6 +19,11 @@ public class ObjectIdInfo\n     protected final Class<?> _scope;\n     protected final boolean _alwaysAsId;\n \n+    /**\n+     * @since 2.8.9\n+     */\n+    private final static ObjectIdInfo EMPTY = new ObjectIdInfo(PropertyName.NO_NAME, Object.class, null, false, null);\n+\n     public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n             Class<? extends ObjectIdResolver> resolver)\n     {\n@@ -56,6 +61,10 @@ public class ObjectIdInfo\n         _resolver = resolver;\n     }\n \n+    public static ObjectIdInfo empty() {\n+        return EMPTY;\n+    }\n+\n     public ObjectIdInfo withAlwaysAsId(boolean state) {\n         if (_alwaysAsId == state) {\n             return this;\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\nindex 658786d..3b838cc 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n@@ -429,15 +429,14 @@ public abstract class BeanSerializerBase\n             if (objectIdInfo == null) {\n                 // no ObjectId override, but maybe ObjectIdRef?\n                 if (oiw != null) {\n-                    objectIdInfo = intr.findObjectReferenceInfo(accessor,\n-                            new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n-                    oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n+                    objectIdInfo = intr.findObjectReferenceInfo(accessor, null);\n+                    if (objectIdInfo != null) {\n+                        oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n+                    }\n                 }\n             } else {\n-                /* Ugh: mostly copied from BeanSerializerBase: but can't easily\n-                 * change it to be able to move to SerializerProvider (where it\n-                 * really belongs)\n-                 */\n+                // Ugh: mostly copied from BeanDeserializerBase: but can't easily change it\n+                // to be able to move to SerializerProvider (where it really belongs)\n                 \n                 // 2.1: allow modifications by \"id ref\" annotations as well:\n                 objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 280575688, 
        "hostName": "local", 
        "totalMemory": 555745280, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:31:44 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/223024976/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            1, 
            0, 
            0, 
            60
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 62
        }, 
        "testing": {
          "stepDurations": [
            66
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 66
        }, 
        "cloning": {
          "stepDurations": [
            69
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 69
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:26:28 PM", 
      "totalDuration": 311
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1974, 
        "numberRunning": 1975, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/226276279", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "java.lang.Integer cannot be cast to java.lang.Double (through reference chain: com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test$Bean1612[\"b\"])", 
          "isError": true, 
          "testMethod": "testIssue1612", 
          "testClass": "com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226639126", 
        "date": "Apr 28, 2017 3:08:19 AM", 
        "id": 226639126
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226276279", 
        "date": "Apr 27, 2017 7:57:58 AM", 
        "id": 226276279
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/c9ab9b3ac1881cacbdbb1a32a1de0e58fc3f6e06", 
        "sha": "c9ab9b3ac1881cacbdbb1a32a1de0e58fc3f6e06", 
        "branchName": "master", 
        "date": "Apr 28, 2017 3:02:18 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/b8b25e51327101cdb0d5b333cd7740a9684fea2e", 
        "sha": "b8b25e51327101cdb0d5b333cd7740a9684fea2e", 
        "branchName": "master", 
        "date": "Apr 27, 2017 7:39:11 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-226276279-226639126", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 13, 
        "numberDeleted": 27
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_16", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\nindex 89f51b5..4307709 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n@@ -1155,7 +1155,7 @@ public abstract class SerializerProvider\n             String msg, Object... msgArgs) throws JsonMappingException {\n         String beanDesc = \"N/A\";\n         if (bean != null) {\n-            beanDesc = _desc(bean.getType().getGenericSignature());\n+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());\n         }\n         msg = String.format(\"Invalid type definition for type %s: %s\",\n                 beanDesc, _format(msg, msgArgs));\n@@ -1178,7 +1178,7 @@ public abstract class SerializerProvider\n         }\n         String beanDesc = \"N/A\";\n         if (bean != null) {\n-            beanDesc = _desc(bean.getType().getGenericSignature());\n+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());\n         }\n         message = String.format(\"Invalid definition for property %s (of type %s): %s\",\n                 propName, beanDesc, message);\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\nindex 95613e1..c89d380 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n@@ -37,7 +37,7 @@ public class BeanSerializerBuilder\n     /**\n      * Bean properties, in order of serialization\n      */\n-    protected List<BeanPropertyWriter> _properties;\n+    protected List<BeanPropertyWriter> _properties = Collections.emptyList();\n \n     /**\n      * Optional array of filtered property writers; if null, no\n@@ -66,13 +66,13 @@ public class BeanSerializerBuilder\n      * type, if any.\n      */\n     protected ObjectIdWriter _objectIdWriter;\n-    \n+\n     /*\n     /**********************************************************\n     /* Construction and setter methods\n     /**********************************************************\n      */\n-    \n+\n     public BeanSerializerBuilder(BeanDescription beanDesc) {\n         _beanDesc = beanDesc;\n     }\n@@ -105,10 +105,22 @@ public class BeanSerializerBuilder\n         _properties = properties;\n     }\n \n+    /**\n+     * @param properties Number and order of properties here MUST match that\n+     *    of \"regular\" properties set earlier using {@link #setProperties(List)}; if not,\n+     *    an {@link IllegalArgumentException} will be thrown\n+     */\n     public void setFilteredProperties(BeanPropertyWriter[] properties) {\n+        if (properties != null) {\n+            if (properties.length != _properties.size()) { // as per [databind#1612]\n+                throw new IllegalArgumentException(String.format(\n+                        \"Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)\",\n+                        properties.length, _properties.size()));\n+            }\n+        }\n         _filteredProperties = properties;\n     }\n-    \n+\n     public void setAnyGetter(AnyGetterWriter anyGetter) {\n         _anyGetter = anyGetter;\n     }\n@@ -185,6 +197,14 @@ public class BeanSerializerBuilder\n                 }\n             }\n         }\n+        // 27-Apr-2017, tatu: Verify that filtered-properties settings are compatible\n+        if (_filteredProperties != null) {\n+            if (_filteredProperties.length != _properties.size()) {\n+                throw new IllegalStateException(String.format(\n+\"Mismatch between `properties` size (%d), `filteredProperties` (%s): should have as many (or `null` for latter)\",\n+_properties.size(), _filteredProperties.length));\n+            }\n+        }\n         if (_anyGetter != null) {\n             _anyGetter.fixAccess(_config);\n         }\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\nindex f0fa9c5..50436bb 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n@@ -520,7 +520,13 @@ public class BeanSerializerFactory\n             }\n         }\n \n-        JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+        JsonSerializer<Object> ser = null;\n+        try {\n+            ser = (JsonSerializer<Object>) builder.build();\n+        } catch (RuntimeException e) {\n+            prov.reportBadTypeDefinition(beanDesc, \"Failed to construct BeanSerializer for %s: (%s) %s\",\n+                    beanDesc.getType(), e.getClass().getName(), e.getMessage());\n+        }\n         if (ser == null) {\n             // If we get this far, there were no properties found, so no regular BeanSerializer\n             // would be constructed. But, couple of exceptions.\n", 
    "projectMetrics": {
      "numberSourceFiles": 412, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 451, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 257290912, 
        "hostName": "local", 
        "totalMemory": 504889344, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:24:11 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/226276279/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            54
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 54
        }, 
        "testing": {
          "stepDurations": [
            56
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 56
        }, 
        "cloning": {
          "stepDurations": [
            53
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 53
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:19:31 PM", 
      "totalDuration": 272
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1975, 
        "numberRunning": 1976, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.NullPointerException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/226654766", 
      "failingClasses": [
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestTypeNames", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.NullPointerException", 
          "isError": true, 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestTypeNames", 
          "testMethod": "testBaseTypeId1616"
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226666085", 
        "date": "Apr 28, 2017 5:37:56 AM", 
        "id": 226666085
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226654766", 
        "date": "Apr 28, 2017 4:33:51 AM", 
        "id": 226654766
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "sha": "974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "branchName": "master", 
        "date": "Apr 28, 2017 5:32:14 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/8c20a7670f71958c9af6c8daffab227d2d7ba87a", 
        "sha": "8c20a7670f71958c9af6c8daffab227d2d7ba87a", 
        "branchName": "master", 
        "date": "Apr 28, 2017 4:28:09 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-226654766-226666085", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 412, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 452, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 29, 
        "numberDeleted": 30
      }
    }, 
    "bugId": "Bears_17", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\nindex 651b62d..9cb8bec 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n@@ -1,5 +1,6 @@\n package com.fasterxml.jackson.databind.jsontype.impl;\n \n+import java.lang.reflect.Modifier;\n import java.util.*;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n@@ -21,7 +22,7 @@ public class StdSubtypeResolver\n     protected LinkedHashSet<NamedType> _registeredSubtypes;\n \n     public StdSubtypeResolver() { }\n-    \n+\n     /*\n     /**********************************************************\n     /* Subtype registration\n@@ -75,15 +76,17 @@ public class StdSubtypeResolver\n         }\n         \n         // then annotated types for property itself\n-        Collection<NamedType> st = ai.findSubtypes(property);\n-        if (st != null) {\n-            for (NamedType nt : st) {\n-                AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n-                        nt.getType());\n-                _collectAndResolve(ac, nt, config, ai, collected);\n-            }            \n+        if (property != null) {\n+            Collection<NamedType> st = ai.findSubtypes(property);\n+            if (st != null) {\n+                for (NamedType nt : st) {\n+                    AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n+                            nt.getType());\n+                    _collectAndResolve(ac, nt, config, ai, collected);\n+                }            \n+            }\n         }\n-        \n+\n         NamedType rootType = new NamedType(rawBase, null);\n         AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n             \n@@ -128,7 +131,7 @@ public class StdSubtypeResolver\n             AnnotatedMember property, JavaType baseType)\n     {\n         final AnnotationIntrospector ai = config.getAnnotationIntrospector();\n-        Class<?> rawBase = (baseType == null) ? property.getRawType() : baseType.getRawClass();\n+        Class<?> rawBase = baseType.getRawClass();\n \n         // Need to keep track of classes that have been handled already \n         Set<Class<?>> typesHandled = new HashSet<Class<?>>();\n@@ -141,14 +144,15 @@ public class StdSubtypeResolver\n         _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\n         \n         // then with definitions from property\n-        Collection<NamedType> st = ai.findSubtypes(property);\n-        if (st != null) {\n-            for (NamedType nt : st) {\n-                ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n-                _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n-            }            \n+        if (property != null) {\n+            Collection<NamedType> st = ai.findSubtypes(property);\n+            if (st != null) {\n+                for (NamedType nt : st) {\n+                    ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n+                    _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n+                }            \n+            }\n         }\n-        \n         // and finally explicit type registrations (highest precedence)\n         if (_registeredSubtypes != null) {\n             for (NamedType subtype : _registeredSubtypes) {\n@@ -160,21 +164,21 @@ public class StdSubtypeResolver\n                 }\n             }\n         }\n-        return _combineNamedAndUnnamed(typesHandled, byName);\n+        return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n     }\n \n     @Override\n     public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config,\n-            AnnotatedClass type)\n+            AnnotatedClass baseType)\n     {\n+        final Class<?> rawBase = baseType.getRawType();\n         Set<Class<?>> typesHandled = new HashSet<Class<?>>();\n         Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();\n \n-        NamedType rootType = new NamedType(type.getRawType(), null);\n-        _collectAndResolveByTypeId(type, rootType, config, typesHandled, byName);\n+        NamedType rootType = new NamedType(rawBase, null);\n+        _collectAndResolveByTypeId(baseType, rootType, config, typesHandled, byName);\n         \n         if (_registeredSubtypes != null) {\n-            Class<?> rawBase = type.getRawType();\n             for (NamedType subtype : _registeredSubtypes) {\n                 // is it a subtype of root type?\n                 if (rawBase.isAssignableFrom(subtype.getType())) { // yes\n@@ -184,7 +188,7 @@ public class StdSubtypeResolver\n                 }\n             }\n         }\n-        return _combineNamedAndUnnamed(typesHandled, byName);\n+        return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n     }\n \n     /*\n@@ -267,8 +271,8 @@ public class StdSubtypeResolver\n      * Helper method used for merging explicitly named types and handled classes\n      * without explicit names.\n      */\n-    protected Collection<NamedType> _combineNamedAndUnnamed(Set<Class<?>> typesHandled,\n-            Map<String,NamedType> byName)\n+    protected Collection<NamedType> _combineNamedAndUnnamed(Class<?> rawBase,\n+            Set<Class<?>> typesHandled, Map<String,NamedType> byName)\n     {\n         ArrayList<NamedType> result = new ArrayList<NamedType>(byName.values());\n \n@@ -279,6 +283,11 @@ public class StdSubtypeResolver\n             typesHandled.remove(t.getType());\n         }\n         for (Class<?> cls : typesHandled) {\n+            // 27-Apr-2017, tatu: [databind#1616] Do not add base type itself unless\n+            //     it is concrete (or has explicit type name)\n+            if ((cls == rawBase) && Modifier.isAbstract(cls.getModifiers())) {\n+                continue;\n+            }\n             result.add(new NamedType(cls));\n         }\n         return result;\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 311049928, 
        "hostName": "local", 
        "totalMemory": 396886016, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:20:20 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/226654766/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            65
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 65
        }, 
        "testing": {
          "stepDurations": [
            79
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 79
        }, 
        "cloning": {
          "stepDurations": [
            69
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 69
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:15:23 PM", 
      "totalDuration": 290
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1976, 
        "numberRunning": 1977, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.exc.InvalidDefinitionException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/226666085", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.exc.InvalidDefinitionException", 
          "detail": "Invalid definition for property \"i\" (of type com.fasterxml.jackson.databind.introspect.TypeCoercion1592Test$Bean1592): Can not refine serialization type [simple type, class int] into java.lang.Integer; types not related", 
          "isError": true, 
          "testMethod": "testTypeCoercion1592", 
          "testClass": "com.fasterxml.jackson.databind.introspect.TypeCoercion1592Test"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.introspect.TypeCoercion1592Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226673064", 
        "date": "Apr 28, 2017 6:16:09 AM", 
        "id": 226673064
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226666085", 
        "date": "Apr 28, 2017 5:37:56 AM", 
        "id": 226666085
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/029413a6e381bb04b7b0a420730d3119e9cc0961", 
        "sha": "029413a6e381bb04b7b0a420730d3119e9cc0961", 
        "branchName": "master", 
        "date": "Apr 28, 2017 6:10:46 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "sha": "974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "branchName": "master", 
        "date": "Apr 28, 2017 5:32:14 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-226666085-226673064", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 27, 
        "numberDeleted": 17
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_18", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\nindex d4a624a..19f52c6 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n@@ -761,6 +761,9 @@ public class JacksonAnnotationIntrospector\n                         type = tf.constructGeneralizedType(type, serClass);\n                     } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well\n                         type = tf.constructSpecializedType(type, serClass);\n+                    } else if (_primitiveAndWrapper(currRaw, serClass)) {\n+                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n+                        type = type.withStaticTyping();\n                     } else {\n                         throw new JsonMappingException(null,\n                                 String.format(\"Can not refine serialization type %s into %s; types not related\",\n@@ -793,6 +796,9 @@ public class JacksonAnnotationIntrospector\n                             keyType = tf.constructGeneralizedType(keyType, keyClass);\n                         } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                             keyType = tf.constructSpecializedType(keyType, keyClass);\n+                        } else if (_primitiveAndWrapper(currRaw, keyClass)) {\n+                            // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n+                            keyType = keyType.withStaticTyping();\n                         } else {\n                             throw new JsonMappingException(null,\n                                     String.format(\"Can not refine serialization key type %s into %s; types not related\",\n@@ -826,6 +832,9 @@ public class JacksonAnnotationIntrospector\n                            contentType = tf.constructGeneralizedType(contentType, contentClass);\n                        } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                            contentType = tf.constructSpecializedType(contentType, contentClass);\n+                       } else if (_primitiveAndWrapper(currRaw, contentClass)) {\n+                           // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n+                           contentType = contentType.withStaticTyping();\n                        } else {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Can not refine serialization content type %s into %s; types not related\",\n@@ -1113,7 +1122,8 @@ public class JacksonAnnotationIntrospector\n         \n         // Ok: start by refining the main type itself; common to all types\n         final Class<?> valueClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.as());\n-        if ((valueClass != null) && !type.hasRawClass(valueClass)) {\n+        if ((valueClass != null) && !type.hasRawClass(valueClass)\n+                && !_primitiveAndWrapper(type, valueClass)) {\n             try {\n                 type = tf.constructSpecializedType(type, valueClass);\n             } catch (IllegalArgumentException iae) {\n@@ -1129,7 +1139,8 @@ public class JacksonAnnotationIntrospector\n         if (type.isMapLikeType()) {\n             JavaType keyType = type.getKeyType();\n             final Class<?> keyClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.keyAs());\n-            if (keyClass != null) {\n+            if ((keyClass != null)\n+                    && !_primitiveAndWrapper(keyType, keyClass)) {\n                 try {\n                     keyType = tf.constructSpecializedType(keyType, keyClass);\n                     type = ((MapLikeType) type).withKeyType(keyType);\n@@ -1145,7 +1156,8 @@ public class JacksonAnnotationIntrospector\n         if (contentType != null) { // collection[like], map[like], array, reference\n             // And then value types for all containers:\n             final Class<?> contentClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.contentAs());\n-            if (contentClass != null) {\n+            if ((contentClass != null)\n+                    && !_primitiveAndWrapper(contentType, contentClass)) {\n                 try {\n                     contentType = tf.constructSpecializedType(contentType, contentClass);\n                     type = type.withContentType(contentType);\n@@ -1451,9 +1463,25 @@ public class JacksonAnnotationIntrospector\n         return StdTypeResolverBuilder.noTypeInfoBuilder();\n     }\n \n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n+    private boolean _primitiveAndWrapper(Class<?> baseType, Class<?> refinement)\n+    {\n+        if (baseType.isPrimitive()) {\n+            return baseType == ClassUtil.primitiveType(refinement);\n+        }\n+        if (refinement.isPrimitive()) {\n+            return refinement == ClassUtil.primitiveType(baseType);\n+        }\n+        return false;\n+    }\n+\n+    private boolean _primitiveAndWrapper(JavaType baseType, Class<?> refinement)\n+    {\n+        if (baseType.isPrimitive()) {\n+            return baseType.hasRawClass(ClassUtil.primitiveType(refinement));\n+        }\n+        if (refinement.isPrimitive()) {\n+            return refinement == ClassUtil.primitiveType(baseType.getRawClass());\n+        }\n+        return false;\n+    }\n }\n", 
    "projectMetrics": {
      "numberSourceFiles": 412, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 453, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 204123192, 
        "hostName": "local", 
        "totalMemory": 350748672, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:19:46 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/226666085/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            62
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 62
        }, 
        "testing": {
          "stepDurations": [
            68
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 68
        }, 
        "cloning": {
          "stepDurations": [
            53
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 53
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:14:37 PM", 
      "totalDuration": 303
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1720, 
        "numberRunning": 1721, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/228025083", 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 3, 
          "testClass": "com.fasterxml.jackson.databind.filter.IgnorePropertyOnDeserTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "testMethod": "testIgnoreGetterNotSetter1595", 
          "testClass": "com.fasterxml.jackson.databind.filter.IgnorePropertyOnDeserTest", 
          "detail": "expected:<jack> but was:<null>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/228873360", 
        "date": "May 4, 2017 9:53:36 PM", 
        "id": 228873360
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/228025083", 
        "date": "May 2, 2017 6:47:20 PM", 
        "id": 228025083
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4a2b1ae08ded66b77e05bf8fa0ac8a2e8c60709d", 
        "sha": "4a2b1ae08ded66b77e05bf8fa0ac8a2e8c60709d", 
        "branchName": "2.8", 
        "date": "May 4, 2017 9:48:52 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/f13cfb1f671af15814e2aa34e9f12cf00ab93b58", 
        "sha": "f13cfb1f671af15814e2aa34e9f12cf00ab93b58", 
        "branchName": "2.8", 
        "date": "May 2, 2017 6:42:22 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-228025083-228873360", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 396, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 1
      }
    }, 
    "bugId": "Bears_19", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\nindex 4b0434e..1423f28 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n@@ -492,7 +492,7 @@ public class BeanDeserializerFactory\n             boolean ignoreAny = ignorals.getIgnoreUnknown();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n             // Or explicit/implicit definitions?\n-            ignored = ignorals.getIgnored();\n+            ignored = ignorals.findIgnoredForDeserialization();\n             for (String propName : ignored) {\n                 builder.addIgnorable(propName);\n             }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 238036008, 
        "hostName": "local", 
        "totalMemory": 346554368, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 3:24:48 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/228025083/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            44
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 44
        }, 
        "testing": {
          "stepDurations": [
            26
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 26
        }, 
        "cloning": {
          "stepDurations": [
            46
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 46
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 3:21:59 PM", 
      "totalDuration": 164
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1721, 
        "numberRunning": 1722, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/233857275", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
          "detail": "Can not deserialize value of type java.util.UUID from String \"not a uuid!\": not a valid textual representation\n at [Source: \"not a uuid!\"; line: 1, column: 1]", 
          "isError": true, 
          "testMethod": "testWeirdStringHandling", 
          "testClass": "com.fasterxml.jackson.databind.filter.ProblemHandlerTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 8, 
          "numberRunning": 9, 
          "testClass": "com.fasterxml.jackson.databind.filter.ProblemHandlerTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/234147085", 
        "date": "May 19, 2017 10:12:31 PM", 
        "id": 234147085
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/233857275", 
        "date": "May 19, 2017 3:39:30 AM", 
        "id": 233857275
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/9a083ad56b20711eab368a7818fb079a870feb93", 
        "sha": "9a083ad56b20711eab368a7818fb079a870feb93", 
        "branchName": "2.8", 
        "date": "May 19, 2017 10:07:44 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/edaa4ad8204dfda985d3c74ffe542c9eb67a201d", 
        "sha": "edaa4ad8204dfda985d3c74ffe542c9eb67a201d", 
        "branchName": "2.8", 
        "date": "May 19, 2017 3:34:35 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-233857275-234147085", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 6, 
        "numberDeleted": 6
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_20", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\nindex 102e0e3..0d01e78 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n@@ -13,6 +13,7 @@ import java.util.TimeZone;\n import java.util.regex.Pattern;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n@@ -112,10 +113,10 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>\n             }\n             Exception cause = null;\n             try {\n-                T result = _deserialize(text, ctxt);\n-                if (result != null) {\n-                    return result;\n-                }\n+                // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n+                //    indicated error; but that seems wrong. Should be able to return\n+                //    `null` as value.\n+                return _deserialize(text, ctxt);\n             } catch (IllegalArgumentException iae) {\n                 cause = iae;\n             } catch (MalformedURLException me) {\n@@ -277,7 +278,8 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>\n             case STD_STRING_BUILDER:\n                 return new StringBuilder(value);\n             }\n-            throw new IllegalArgumentException();\n+            VersionUtil.throwInternal();\n+            return null;\n         }\n \n         @Override\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 396, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 270497080, 
        "hostName": "local", 
        "totalMemory": 377487360, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 3:20:44 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/233857275/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            45
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 45
        }, 
        "testing": {
          "stepDurations": [
            37
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 37
        }, 
        "cloning": {
          "stepDurations": [
            49
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 49
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 3:17:16 PM", 
      "totalDuration": 201
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1722, 
        "numberRunning": 1723, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/241044631", 
      "failingClasses": [
        {
          "numberPassing": 13, 
          "numberRunning": 14, 
          "testClass": "com.fasterxml.jackson.databind.ser.DateSerializationTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "testMethod": "testFormatWithoutPattern", 
          "testClass": "com.fasterxml.jackson.databind.ser.DateSerializationTest", 
          "detail": "expected:<{\"date\":\"1970-01-01[X01:00:]00\"}> but was:<{\"date\":\"1970-01-01[T01:00:00.000+01]00\"}>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/241063530", 
        "date": "Jun 9, 2017 7:25:15 AM", 
        "id": 241063530
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/241044631", 
        "date": "Jun 9, 2017 5:11:11 AM", 
        "id": 241044631
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/93f7e14d096181a251aae3355464d24bcd7677a5", 
        "sha": "93f7e14d096181a251aae3355464d24bcd7677a5", 
        "branchName": "2.8", 
        "date": "Jun 9, 2017 7:20:50 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4b00ccc8ae9763c76e363621dc9ee4b8692d30dc", 
        "sha": "4b00ccc8ae9763c76e363621dc9ee4b8692d30dc", 
        "branchName": "2.8", 
        "date": "Jun 9, 2017 5:06:58 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-241044631-241063530", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 396, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 64, 
        "numberDeleted": 29
      }
    }, 
    "bugId": "Bears_21", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\nindex ea67b88..4b9312b 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n@@ -49,33 +49,76 @@ public abstract class DateTimeSerializerBase<T>\n     public JsonSerializer<?> createContextual(SerializerProvider serializers,\n             BeanProperty property) throws JsonMappingException\n     {\n-        if (property != null) {\n-            JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n-            if (format != null) {\n-            \t// Simple case first: serialize as numeric timestamp?\n-                JsonFormat.Shape shape = format.getShape();\n-                if (shape.isNumeric()) {\n-                    return withFormat(Boolean.TRUE, null);\n-                }\n-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n-                                || format.hasLocale() || format.hasTimeZone()) {\n-                    TimeZone tz = format.getTimeZone();\n-                    final String pattern = format.hasPattern()\n-                                    ? format.getPattern()\n-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                    final Locale loc = format.hasLocale()\n-                                    ? format.getLocale()\n-                                    : serializers.getLocale();\n-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n-                    if (tz == null) {\n-                        tz = serializers.getTimeZone();\n-                    }\n-                    df.setTimeZone(tz);\n-                    return withFormat(Boolean.FALSE, df);\n-                }\n+        if (property == null) {\n+            return this;\n+        }\n+        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n+        if (format == null) {\n+            return this;\n+        }\n+        // Simple case first: serialize as numeric timestamp?\n+        JsonFormat.Shape shape = format.getShape();\n+        if (shape.isNumeric()) {\n+            return withFormat(Boolean.TRUE, null);\n+        }\n+\n+        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n+        // First: custom pattern will override things\n+        if (format.hasPattern()) {\n+            final Locale loc = format.hasLocale()\n+                            ? format.getLocale()\n+                            : serializers.getLocale();\n+            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n+            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n+                    : serializers.getTimeZone();\n+            df.setTimeZone(tz);\n+            return withFormat(Boolean.FALSE, df);\n+        }\n+\n+        // Otherwise, need one of these changes:\n+        final boolean hasLocale = format.hasLocale();\n+        final boolean hasTZ = format.hasTimeZone();\n+        final boolean asString = (shape == JsonFormat.Shape.STRING);\n+\n+        if (!hasLocale && !hasTZ && !asString) {\n+            return this;\n+        }\n+\n+        DateFormat df0 = serializers.getConfig().getDateFormat();\n+        // Jackson's own `StdDateFormat` is quite easy to deal with...\n+        if (df0 instanceof StdDateFormat) {\n+            StdDateFormat std = (StdDateFormat) df0;\n+            if (format.hasLocale()) {\n+                std = std.withLocale(format.getLocale());\n+            }\n+            if (format.hasTimeZone()) {\n+                std = std.withTimeZone(format.getTimeZone());\n             }\n+            return withFormat(Boolean.FALSE, std);\n+        }\n+\n+        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n+        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n+        //    So: require it be `SimpleDateFormat`; can't config other types\n+        if (!(df0 instanceof SimpleDateFormat)) {\n+//            serializers.reportBadDefinition(handledType(), String.format(\n+            serializers.reportMappingProblem(\n+\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\",\n+df0.getClass().getName());\n+        }\n+        SimpleDateFormat df = (SimpleDateFormat) df0;\n+        if (hasLocale) {\n+            // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n+            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n+        } else {\n+            df = (SimpleDateFormat) df.clone();\n+        }\n+        TimeZone newTz = format.getTimeZone();\n+        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n+        if (changeTZ) {\n+            df.setTimeZone(newTz);\n         }\n-        return this;\n+        return withFormat(Boolean.FALSE, df);\n     }\n \n     /*\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 433435336, 
        "hostName": "spirals-bears", 
        "totalMemory": 634912768, 
        "numberCPU": 16
      }, 
      "reproductionDateEnd": "Dec 10, 2018 2:26:42 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/241044631/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            52
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 52
        }, 
        "testing": {
          "stepDurations": [
            40
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 40
        }, 
        "cloning": {
          "stepDurations": [
            29
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 29
        }
      }, 
      "reproductionDateBeginning": "Dec 10, 2018 2:23:14 AM", 
      "totalDuration": 202
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1723, 
        "numberRunning": 1725, 
        "numberFailing": 2, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }, 
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/241063530", 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "testMethod": "testSuperClassWithReferencedJavaType", 
          "isError": false, 
          "testClass": "com.fasterxml.jackson.databind.type.RecursiveTypeTest"
        }, 
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "detail": "expected:<{\"[base\":1,\"]sub\":2}> but was:<{\"[]sub\":2}>", 
          "isError": false, 
          "testMethod": "testBasePropertiesIncludedWhenSerializingSubWhenSubTypeLoadedAfterBaseType", 
          "testClass": "com.fasterxml.jackson.databind.type.TestTypeFactoryWithRecursiveTypes"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.type.TestTypeFactoryWithRecursiveTypes", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "com.fasterxml.jackson.databind.type.RecursiveTypeTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/241065840", 
        "date": "Jun 9, 2017 7:43:50 AM", 
        "id": 241065840
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/241063530", 
        "date": "Jun 9, 2017 7:25:15 AM", 
        "id": 241063530
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/3d743477e1531cd3c4c041941f047eee5b040924", 
        "sha": "3d743477e1531cd3c4c041941f047eee5b040924", 
        "branchName": "2.8", 
        "date": "Jun 9, 2017 7:36:00 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/93f7e14d096181a251aae3355464d24bcd7677a5", 
        "sha": "93f7e14d096181a251aae3355464d24bcd7677a5", 
        "branchName": "2.8", 
        "date": "Jun 9, 2017 7:20:50 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-241063530-241065840", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 397, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 8
      }
    }, 
    "bugId": "Bears_22", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java\nindex 21f37fe..12162c5 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java\n@@ -25,6 +25,14 @@ public class ResolvedRecursiveType extends TypeBase\n         }\n         _referencedType = ref;\n     }\n+   \n+    @Override\n+    public JavaType getSuperClass() {\n+    \tif (_referencedType != null) {\n+    \t\treturn _referencedType.getSuperClass();\n+    \t}\n+    \treturn super.getSuperClass();\n+    }\n \n     public JavaType getSelfReferencedType() { return _referencedType; }\n \n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 449016096, 
        "hostName": "spirals-bears", 
        "totalMemory": 576716800, 
        "numberCPU": 16
      }, 
      "reproductionDateEnd": "Dec 10, 2018 2:26:05 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/241063530/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            51
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 51
        }, 
        "testing": {
          "stepDurations": [
            37
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 37
        }, 
        "cloning": {
          "stepDurations": [
            29
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 29
        }
      }, 
      "reproductionDateBeginning": "Dec 10, 2018 2:22:36 AM", 
      "totalDuration": 202
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1725, 
        "numberRunning": 1726, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/242268513", 
      "failingClasses": [
        {
          "numberPassing": 21, 
          "numberRunning": 22, 
          "testClass": "com.fasterxml.jackson.databind.deser.TestDateDeserialization", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "testMethod": "testDateUtilISO8601NoTimezoneNonDefault", 
          "testClass": "com.fasterxml.jackson.databind.deser.TestDateDeserialization", 
          "detail": "expected:<Thu Jan 01 01:00:00 CET 1970> but was:<Thu Jan 01 03:00:00 CET 1970>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/242687710", 
        "date": "Jun 14, 2017 6:30:01 AM", 
        "id": 242687710
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/242268513", 
        "date": "Jun 13, 2017 5:52:52 AM", 
        "id": 242268513
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/5a0ce57b5d3a6d30420267b56b3d2282c76df581", 
        "sha": "5a0ce57b5d3a6d30420267b56b3d2282c76df581", 
        "branchName": "2.8", 
        "date": "Jun 14, 2017 6:25:31 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/fe80e86551be38fccb1a983854925a78db6e845f", 
        "sha": "fe80e86551be38fccb1a983854925a78db6e845f", 
        "branchName": "2.8", 
        "date": "Jun 13, 2017 5:45:17 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-242268513-242687710", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 397, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 10, 
        "numberDeleted": 23
      }
    }, 
    "bugId": "Bears_23", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java b/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\nindex 3faefb9..46346de 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java\n@@ -39,6 +39,13 @@ public class StdDateFormat\n      */\n     protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";\n \n+    /**\n+     * Same as 'regular' 8601 except misses timezone altogether\n+     *\n+     * @since 2.8.10\n+     */\n+    protected final static String DATE_FORMAT_STR_ISO8601_NO_TZ = \"yyyy-MM-dd'T'HH:mm:ss.SSS\";\n+\n     /**\n      * ISO-8601 with just the Date part, no time\n      */\n@@ -56,6 +63,7 @@ public class StdDateFormat\n     protected final static String[] ALL_FORMATS = new String[] {\n         DATE_FORMAT_STR_ISO8601,\n         DATE_FORMAT_STR_ISO8601_Z,\n+        DATE_FORMAT_STR_ISO8601_NO_TZ,\n         DATE_FORMAT_STR_RFC1123,\n         DATE_FORMAT_STR_PLAIN\n     };\n@@ -70,11 +78,12 @@ public class StdDateFormat\n     }\n \n     private final static Locale DEFAULT_LOCALE = Locale.US;\n-    \n+\n     protected final static DateFormat DATE_FORMAT_RFC1123;\n \n     protected final static DateFormat DATE_FORMAT_ISO8601;\n     protected final static DateFormat DATE_FORMAT_ISO8601_Z;\n+    protected final static DateFormat DATE_FORMAT_ISO8601_NO_TZ; // since 2.8.10\n \n     protected final static DateFormat DATE_FORMAT_PLAIN;\n \n@@ -93,6 +102,8 @@ public class StdDateFormat\n         DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);\n         DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE);\n         DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);\n+        DATE_FORMAT_ISO8601_NO_TZ = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_NO_TZ, DEFAULT_LOCALE);\n+        DATE_FORMAT_ISO8601_NO_TZ.setTimeZone(DEFAULT_TIMEZONE);\n         DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE);\n         DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);\n     }\n@@ -123,6 +134,7 @@ public class StdDateFormat\n     protected transient DateFormat _formatRFC1123;\n     protected transient DateFormat _formatISO8601;\n     protected transient DateFormat _formatISO8601_z;\n+    protected transient DateFormat _formatISO8601_noTz; // 2.8.10\n     protected transient DateFormat _formatPlain;\n \n     /*\n@@ -504,11 +516,11 @@ public class StdDateFormat\n                             _timezone, _locale, _lenient);\n                 }\n             } else {\n-                // If not, plain date. Easiest to just patch 'Z' in the end?\n-                StringBuilder sb = new StringBuilder(dateStr);\n-                // And possible also millisecond part if missing\n+                // If not, plain date, no timezone\n                 int timeLen = len - dateStr.lastIndexOf('T') - 1;\n+                // And possible also millisecond part if missing\n                 if (timeLen < 12) { // missing, or partial\n+                    StringBuilder sb = new StringBuilder(dateStr);\n                     switch (timeLen) {\n                     case 11: sb.append('0');\n                     case 10: sb.append('0');\n@@ -517,17 +529,16 @@ public class StdDateFormat\n                     default:\n                         sb.append(\".000\");\n                     }\n+                    dateStr = sb.toString();\n                 }\n-                sb.append('Z');\n-                dateStr = sb.toString();\n-                df = _formatISO8601_z;\n-                formatStr = DATE_FORMAT_STR_ISO8601_Z;\n+                df = _formatISO8601_noTz;\n+                formatStr = DATE_FORMAT_STR_ISO8601_NO_TZ;\n                 if (df == null) {\n                     // 10-Jun-2017, tatu: As per [databind#1651], when using this format,\n                     //    must use UTC, not whatever is configured as default timezone\n                     //    (because we know `Z` identifier is used)\n-                    df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n-                            DEFAULT_TIMEZONE, _locale, _lenient);\n+                    df = _formatISO8601_noTz = _cloneFormat(DATE_FORMAT_ISO8601_NO_TZ, formatStr,\n+                            _timezone, _locale, _lenient);\n                 }\n             }\n         }\n@@ -588,6 +599,8 @@ public class StdDateFormat\n         _formatRFC1123 = null;\n         _formatISO8601 = null;\n         _formatISO8601_z = null;\n+        _formatISO8601_noTz = null;\n+\n         _formatPlain = null;\n     }\n }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 423009520, 
        "hostName": "spirals-bears", 
        "totalMemory": 625475584, 
        "numberCPU": 16
      }, 
      "reproductionDateEnd": "Dec 10, 2018 2:24:13 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/242268513/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            51
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 51
        }, 
        "testing": {
          "stepDurations": [
            38
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 38
        }, 
        "cloning": {
          "stepDurations": [
            30
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 30
        }
      }, 
      "reproductionDateBeginning": "Dec 10, 2018 2:20:48 AM", 
      "totalDuration": 199
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1736, 
        "numberRunning": 1737, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.StackOverflowError", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/243509258", 
      "failureDetails": [
        {
          "failureName": "java.lang.StackOverflowError", 
          "testClass": "com.fasterxml.jackson.databind.type.RecursiveType1658Test", 
          "testMethod": "testRecursive1658", 
          "isError": true
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.type.RecursiveType1658Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/243861380", 
        "date": "Jun 17, 2017 1:19:34 AM", 
        "id": 243861380
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/243509258", 
        "date": "Jun 16, 2017 4:26:23 AM", 
        "id": 243509258
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/075319dbf91d6c091c78a3b7c686b579569678e1", 
        "sha": "075319dbf91d6c091c78a3b7c686b579569678e1", 
        "branchName": "2.8", 
        "date": "Jun 17, 2017 1:14:37 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/dc2c00358822901b943019a9dbc0c912285998af", 
        "sha": "dc2c00358822901b943019a9dbc0c912285998af", 
        "branchName": "2.8", 
        "date": "Jun 16, 2017 4:22:10 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-243509258-243861380", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 7, 
        "numberDeleted": 12
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_24", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java\nindex 12162c5..53e061c 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java\n@@ -111,11 +111,22 @@ public class ResolvedRecursiveType extends TypeBase\n     public boolean equals(Object o) {\n         if (o == this) return true;\n         if (o == null) return false;\n-        // Do NOT ever match unresolved references\n-        if (_referencedType == null) {\n+        if (o.getClass() == getClass()) {\n+            // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since\n+            //    there is likely to be a cycle...\n+\n+            // but... true or false?\n             return false;\n+            \n+            /*\n+            // Do NOT ever match unresolved references\n+            if (_referencedType == null) {\n+                return false;\n+            }\n+            return (o.getClass() == getClass()\n+                    && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));\n+                    */\n         }\n-        return (o.getClass() == getClass()\n-                && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));\n+        return false;\n     }\n }\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 399, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 453195184, 
        "hostName": "spirals-bears", 
        "totalMemory": 594018304, 
        "numberCPU": 16
      }, 
      "reproductionDateEnd": "Dec 10, 2018 2:22:58 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/243509258/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            50
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 51
        }, 
        "testing": {
          "stepDurations": [
            39
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 39
        }, 
        "cloning": {
          "stepDurations": [
            28
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 28
        }
      }, 
      "reproductionDateBeginning": "Dec 10, 2018 2:19:36 AM", 
      "totalDuration": 196
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1737, 
        "numberRunning": 1738, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.StackOverflowError", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/247621332", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.ser.KeySerializers1679Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.StackOverflowError", 
          "testMethod": "testRecursion1679", 
          "isError": true, 
          "testClass": "com.fasterxml.jackson.databind.ser.KeySerializers1679Test"
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/247674379", 
        "date": "Jun 27, 2017 10:05:11 PM", 
        "id": 247674379
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/247621332", 
        "date": "Jun 27, 2017 7:37:24 PM", 
        "id": 247621332
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/e20bcc877a8149a9c4ecd562209b3b3954b6dda2", 
        "sha": "e20bcc877a8149a9c4ecd562209b3b3954b6dda2", 
        "branchName": "2.8", 
        "date": "Jun 27, 2017 10:01:02 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4009fe3a05caaf45ec230fbedc29dbe5d9b7f412", 
        "sha": "4009fe3a05caaf45ec230fbedc29dbe5d9b7f412", 
        "branchName": "2.8", 
        "date": "Jun 27, 2017 7:33:01 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-247621332-247674379", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 400, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 7
      }
    }, 
    "bugId": "Bears_25", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\nindex 2462f2e..369e659 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n@@ -207,6 +207,13 @@ public class StdKeySerializers\n         protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map,\n                 Class<?> type, SerializerProvider provider) throws JsonMappingException\n         {\n+            // 27-Jun-2017, tatu: [databind#1679] Need to avoid StackOverflowError...\n+            if (type == Object.class) {\n+                // basically just need to call `toString()`, easiest way:\n+                JsonSerializer<Object> ser = new Default(Default.TYPE_TO_STRING, type);\n+                _dynamicSerializers = map.newWith(type, ser);\n+                return ser;\n+            }\n             PropertySerializerMap.SerializerAndMapResult result =\n                     // null -> for now we won't keep ref or pass BeanProperty; could change\n                     map.findAndAddKeySerializer(type, provider, null);\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 348421080, 
        "hostName": "spirals-bears", 
        "totalMemory": 602931200, 
        "numberCPU": 16
      }, 
      "reproductionDateEnd": "Dec 10, 2018 2:22:19 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/247621332/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            1, 
            0, 
            0, 
            49
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 50
        }, 
        "testing": {
          "stepDurations": [
            36
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 36
        }, 
        "cloning": {
          "stepDurations": [
            32
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 32
        }
      }, 
      "reproductionDateBeginning": "Dec 10, 2018 2:18:53 AM", 
      "totalDuration": 199
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1754, 
        "numberRunning": 1755, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/318458719", 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "detail": "Expected an exception with one of substrings ([Illegal type]): got one (of type com.fasterxml.jackson.databind.JsonMappingException) with message \"Can not construct instance of org.springframework.jacksontest.BogusPointcutAdvisor, problem: Wrong!\n at [Source: {\"v\":[\"org.springframework.jacksontest.BogusPointcutAdvisor\",\"/tmp/foobar.txt\"]}; line: 1, column: 62] (through reference chain: com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest$PolyWrapper[\"v\"])\"", 
          "isError": false, 
          "testMethod": "testJDKTypes1855", 
          "testClass": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 3, 
          "testClass": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/318715551", 
        "date": "Dec 19, 2017 5:36:21 PM", 
        "id": 318715551
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/318458719", 
        "date": "Dec 19, 2017 6:48:31 AM", 
        "id": 318458719
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/459107dccc9b3ea991af3e6ad0953e54b01ef7c1", 
        "sha": "459107dccc9b3ea991af3e6ad0953e54b01ef7c1", 
        "branchName": "2.8", 
        "date": "Dec 19, 2017 5:31:49 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/bade4792d12bcf7242ada53c197a924332840864", 
        "sha": "bade4792d12bcf7242ada53c197a924332840864", 
        "branchName": "2.8", 
        "date": "Dec 19, 2017 6:44:34 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-318458719-318715551", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 2, 
        "numberDeleted": 3
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_26", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java\nindex 8a273cc..45a7616 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java\n@@ -71,6 +71,7 @@ public class SubTypeValidator\n         final Class<?> raw = type.getRawClass();\n         String full = raw.getName();\n \n+        main_check:\n         do {\n             if (_cfgIllegalClassNames.contains(full)) {\n                 break;\n@@ -84,8 +85,8 @@ public class SubTypeValidator\n                     // looking for \"AbstractBeanFactoryPointcutAdvisor\" but no point to allow any is there?\n                     if (\"AbstractPointcutAdvisor\".equals(name)\n                             // ditto  for \"FileSystemXmlApplicationContext\": block all ApplicationContexts\n-                            || \"AbstractApplicationContext.equals\".equals(name)) {\n-                        break;\n+                            || \"AbstractApplicationContext\".equals(name)) {\n+                        break main_check;\n                     }\n                 }\n             }\n", 
    "projectMetrics": {
      "numberSourceFiles": 399, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 411, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 248725608, 
        "hostName": "spirals-bears", 
        "totalMemory": 585105408, 
        "numberCPU": 16
      }, 
      "reproductionDateEnd": "Dec 11, 2018 12:31:23 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/318458719/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            55
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 55
        }, 
        "testing": {
          "stepDurations": [
            42
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 42
        }, 
        "cloning": {
          "stepDurations": [
            30
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 30
        }
      }, 
      "reproductionDateBeginning": "Dec 11, 2018 12:27:45 AM", 
      "totalDuration": 210
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 967, 
        "numberRunning": 968, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/189186902", 
      "failingClasses": [
        {
          "numberPassing": 6, 
          "numberRunning": 7, 
          "testClass": "spoon.test.position.PositionTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "defaultConstructorPositionTest", 
          "testClass": "spoon.test.position.PositionTest", 
          "detail": "expected:<(unknown file)> but was:<(/root/workspace/INRIA/spoon/189186902/src/test/java/spoon/test/position/testclasses/Foo.java:3)>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/189233591", 
        "date": "Jan 5, 2017 5:20:38 PM", 
        "id": 189233591
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/189186902", 
        "date": "Jan 5, 2017 2:58:41 PM", 
        "id": 189186902
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/bf0652c5a3dddb0322ff2b471071ffecce7b7c70", 
        "sha": "bf0652c5a3dddb0322ff2b471071ffecce7b7c70", 
        "branchName": "master", 
        "date": "Jan 5, 2017 5:11:54 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/af9ecca3acc9eab0c78f75491f5218beaac17486", 
        "sha": "af9ecca3acc9eab0c78f75491f5218beaac17486", 
        "branchName": "master", 
        "date": "Jan 5, 2017 2:49:59 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-189186902-189233591", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 446, 
      "numberLibrariesFailingModule": 9, 
      "numberTestFiles": 459, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 1
      }
    }, 
    "bugId": "Bears_27", 
    "diff": "diff --git a/src/main/java/spoon/support/compiler/jdt/ContextBuilder.java b/src/main/java/spoon/support/compiler/jdt/ContextBuilder.java\nindex 3b481e3..93db295 100644\n--- a/src/main/java/spoon/support/compiler/jdt/ContextBuilder.java\n+++ b/src/main/java/spoon/support/compiler/jdt/ContextBuilder.java\n@@ -87,7 +87,7 @@ public class ContextBuilder {\n \tvoid enter(CtElement e, ASTNode node) {\n \t\tstack.push(new ASTPair(e, node));\n \t\tif (!(e instanceof CtPackage) || (compilationUnitSpoon.getFile() != null && compilationUnitSpoon.getFile().getName().equals(DefaultJavaPrettyPrinter.JAVA_PACKAGE_DECLARATION))) {\n-\t\t\tif (compilationunitdeclaration != null) {\n+\t\t\tif (compilationunitdeclaration != null && !e.isImplicit()) {\n \t\t\t\te.setPosition(this.jdtTreeBuilder.getPositionBuilder().buildPositionCtElement(e, node));\n \t\t\t}\n \t\t}\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 126159672, 
        "hostName": "local", 
        "totalMemory": 245366784, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:43:38 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/189186902/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            69
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 69
        }, 
        "testing": {
          "stepDurations": [
            257
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 257
        }, 
        "cloning": {
          "stepDurations": [
            17
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 17
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:32:30 PM", 
      "totalDuration": 662
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 967, 
        "numberRunning": 968, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/189233636", 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "detail": "// last comment at the end of array:new int[]{ // comment before array value\n1 , // comment after array value\n2 , 3 } is not printed", 
          "isError": false, 
          "testMethod": "testInLineComment", 
          "testClass": "spoon.test.comment.CommentTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 9, 
          "numberRunning": 10, 
          "testClass": "spoon.test.comment.CommentTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/189234660", 
        "date": "Jan 5, 2017 5:24:07 PM", 
        "id": 189234660
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/189233636", 
        "date": "Jan 5, 2017 5:22:05 PM", 
        "id": 189233636
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/ce55bc43a9751081097121a5745d516cad2c5200", 
        "sha": "ce55bc43a9751081097121a5745d516cad2c5200", 
        "branchName": "master", 
        "date": "Jan 5, 2017 5:15:25 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/ac4988af27def9422c7b95f88efa7263549ee56c", 
        "sha": "ac4988af27def9422c7b95f88efa7263549ee56c", 
        "branchName": "master", 
        "date": "Jan 5, 2017 5:12:15 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-189233636-189234660", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 8, 
        "numberDeleted": 7
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_28", 
    "diff": "diff --git a/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java b/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java\nindex 136ee74..b0a9f5d 100644\n--- a/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java\n+++ b/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java\n@@ -1188,7 +1188,7 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic <T> void visitCtNewArray(CtNewArray<T> newArray) {\n \t\tenterCtExpression(newArray);\n-\n+\t\telementPrinterHelper.writeComment(newArray, CommentOffset.BEFORE);\n \t\tboolean isNotInAnnotation;\n \t\ttry {\n \t\t\tisNotInAnnotation = (newArray.getParent(CtAnnotationType.class) == null) && (newArray.getParent(CtAnnotation.class) == null);\n@@ -1244,8 +1244,11 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t\t\t\t\telementPrinterHelper.writeComment(e, CommentOffset.AFTER);\n \t\t\t\t}\n \t\t\t}\n+\n+\t\t\telementPrinterHelper.writeComment(newArray, CommentOffset.INSIDE);\n \t\t\tprinter.write(\" }\");\n \t\t}\n+\t\telementPrinterHelper.writeComment(newArray, CommentOffset.AFTER);\n \t\texitCtExpression(newArray);\n \t}\n \ndiff --git a/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java b/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java\nindex 7b08fac..0fe008d 100644\n--- a/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java\n+++ b/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java\n@@ -336,7 +336,8 @@ public class ElementPrinterHelper {\n \t\t\t}\n \t\t\tfinal int line = element.getPosition().getLine();\n \t\t\tfinal int sourceEnd = element.getPosition().getSourceEnd();\n-\t\t\tif (offset == CommentOffset.BEFORE && (comment.getPosition().getLine() < line || sourceEnd >= comment.getPosition().getSourceEnd())) {\n+\t\t\tfinal int sourceStart = element.getPosition().getSourceStart();\n+\t\t\tif (offset == CommentOffset.BEFORE && (comment.getPosition().getLine() < line || (sourceStart <= comment.getPosition().getSourceStart() && sourceEnd >= comment.getPosition().getSourceEnd()))) {\n \t\t\t\tcommentsToPrint.add(comment);\n \t\t\t} else if (offset == CommentOffset.AFTER && comment.getPosition().getSourceStart() > sourceEnd) {\n \t\t\t\tcommentsToPrint.add(comment);\ndiff --git a/src/main/java/spoon/support/compiler/jdt/JDTCommentBuilder.java b/src/main/java/spoon/support/compiler/jdt/JDTCommentBuilder.java\nindex d5473f1..1b643a1 100644\n--- a/src/main/java/spoon/support/compiler/jdt/JDTCommentBuilder.java\n+++ b/src/main/java/spoon/support/compiler/jdt/JDTCommentBuilder.java\n@@ -142,6 +142,7 @@ class JDTCommentBuilder {\n \tprivate CtElement addCommentToNear(final CtComment comment, final Collection<CtElement> elements) {\n \t\tCtElement best = null;\n \t\tint smallDistance = Integer.MAX_VALUE;\n+\n \t\tfor (CtElement element : elements) {\n \t\t\tif (element.getPosition() == null) {\n \t\t\t\tcontinue;\n@@ -157,7 +158,11 @@ class JDTCommentBuilder {\n \t\t\tif (isAfter) {\n \t\t\t\tdistance = Math.abs(element.getPosition().getSourceEnd() - comment.getPosition().getSourceStart());\n \t\t\t}\n-\t\t\tif (distance < smallDistance && (!isAfter || element.getPosition().getEndLine() == comment.getPosition().getLine())) {\n+\n+\t\t\tint elementEndLine = element.getPosition().getEndLine();\n+\t\t\tint commentLine = comment.getPosition().getLine();\n+\n+\t\t\tif (distance < smallDistance && (!isAfter || elementEndLine == commentLine)) {\n \t\t\t\tbest = element;\n \t\t\t\tsmallDistance = distance;\n \t\t\t}\n", 
    "projectMetrics": {
      "numberSourceFiles": 446, 
      "numberLibrariesFailingModule": 9, 
      "numberTestFiles": 459, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 170732952, 
        "hostName": "local", 
        "totalMemory": 367525888, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:38:27 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/189233636/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            64
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 64
        }, 
        "testing": {
          "stepDurations": [
            243
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 243
        }, 
        "cloning": {
          "stepDurations": [
            17
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 17
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:27:27 PM", 
      "totalDuration": 654
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 968, 
        "numberRunning": 969, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/190241093", 
      "failingClasses": [
        {
          "numberPassing": 25, 
          "numberRunning": 26, 
          "testClass": "spoon.test.reference.TypeReferenceTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testEqualityTypeReference", 
          "testClass": "spoon.test.reference.TypeReferenceTest", 
          "detail": "expected:<spoon.test.reference.testclasses.ParamRefs> but was:<void>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/190241752", 
        "date": "Jan 9, 2017 2:13:49 PM", 
        "id": 190241752
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/190241093", 
        "date": "Jan 9, 2017 2:10:43 PM", 
        "id": 190241093
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/669bcc077b462157d1e14fb771e10ae86075f59d", 
        "sha": "669bcc077b462157d1e14fb771e10ae86075f59d", 
        "branchName": "master", 
        "date": "Jan 9, 2017 2:04:17 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/3810dc9ccc2ba26aac9bc6e8092eb163b0cc75b9", 
        "sha": "3810dc9ccc2ba26aac9bc6e8092eb163b0cc75b9", 
        "branchName": "master", 
        "date": "Jan 9, 2017 2:02:32 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-190241093-190241752", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 446, 
      "numberLibrariesFailingModule": 9, 
      "numberTestFiles": 460, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 11, 
        "numberDeleted": 5
      }
    }, 
    "bugId": "Bears_29", 
    "diff": "diff --git a/src/main/java/spoon/reflect/factory/ExecutableFactory.java b/src/main/java/spoon/reflect/factory/ExecutableFactory.java\nindex d06fe9a..e4ea1ff 100644\n--- a/src/main/java/spoon/reflect/factory/ExecutableFactory.java\n+++ b/src/main/java/spoon/reflect/factory/ExecutableFactory.java\n@@ -114,6 +114,7 @@ public class ExecutableFactory extends SubFactory {\n \t\t} else if (e instanceof CtAnonymousExecutable) {\n \t\t\treturn createReference(((CtAnonymousExecutable) e).getDeclaringType().getReference(), e.getType().clone(), executableName);\n \t\t}\n+\t\t// constructor\n \t\treturn createReference(((CtConstructor<T>) e).getDeclaringType().getReference(), ((CtConstructor<T>) e).getType().clone(), CtExecutableReference.CONSTRUCTOR_NAME, refs);\n \t}\n \ndiff --git a/src/main/java/spoon/support/compiler/jdt/ParentExiter.java b/src/main/java/spoon/support/compiler/jdt/ParentExiter.java\nindex 51bbfa3..f7fa778 100644\n--- a/src/main/java/spoon/support/compiler/jdt/ParentExiter.java\n+++ b/src/main/java/spoon/support/compiler/jdt/ParentExiter.java\n@@ -721,9 +721,7 @@ public class ParentExiter extends CtInheritanceScanner {\n \tprivate <T> boolean hasChildEqualsToType(CtConstructorCall<T> ctConstructorCall) {\n \t\tfinal AllocationExpression parent = (AllocationExpression) jdtTreeBuilder.getContextBuilder().stack.peek().node;\n \t\t// Type is equals to the jdt child.\n-\t\treturn parent.type != null && parent.type.equals(childJDT)\n-\t\t\t\t// Type not yet initialized.\n-\t\t\t\t&& !((CtTypeAccess) child).getAccessedType().equals(ctConstructorCall.getExecutable().getType());\n+\t\treturn parent.type != null && parent.type.equals(childJDT);\n \t}\n \n \t@Override\ndiff --git a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\nindex f873b1f..a8c8208 100644\n--- a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\n+++ b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\n@@ -338,11 +338,14 @@ public class ReferenceBuilder {\n \t\tif (exec == null) {\n \t\t\treturn null;\n \t\t}\n-\n \t\tfinal CtExecutableReference ref = this.jdtTreeBuilder.getFactory().Core().createExecutableReference();\n-\t\tref.setSimpleName(new String(exec.selector));\n-\t\tref.setType(getTypeReference(exec.returnType));\n-\n+\t\tif (exec.isConstructor()) {\n+\t\t\tref.setSimpleName(CtExecutableReference.CONSTRUCTOR_NAME);\n+\t\t\tref.setType(getTypeReference(exec.declaringClass));\n+\t\t} else {\n+\t\t\tref.setSimpleName(new String(exec.selector));\n+\t\t\tref.setType(getTypeReference(exec.returnType));\n+\t\t}\n \t\tif (exec instanceof ProblemMethodBinding) {\n \t\t\tif (exec.declaringClass != null && Arrays.asList(exec.declaringClass.methods()).contains(exec)) {\n \t\t\t\tref.setDeclaringType(getTypeReference(exec.declaringClass));\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 122242408, 
        "hostName": "local", 
        "totalMemory": 270532608, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:31:53 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/190241093/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            65
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 65
        }, 
        "testing": {
          "stepDurations": [
            238
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 238
        }, 
        "cloning": {
          "stepDurations": [
            17
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 17
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:21:00 PM", 
      "totalDuration": 647
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 969, 
        "numberRunning": 970, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.ClassCastException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/190241752", 
      "failureDetails": [
        {
          "failureName": "java.lang.ClassCastException", 
          "detail": "spoon.support.reflect.declaration.CtConstructorImpl cannot be cast to spoon.reflect.declaration.CtMethod", 
          "isError": true, 
          "testMethod": "testParameterReferenceInConstructorNoClasspath", 
          "testClass": "spoon.test.reference.VariableAccessTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 8, 
          "numberRunning": 9, 
          "testClass": "spoon.test.reference.VariableAccessTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/190558172", 
        "date": "Jan 10, 2017 11:21:52 AM", 
        "id": 190558172
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/190241752", 
        "date": "Jan 9, 2017 2:13:49 PM", 
        "id": 190241752
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/e60e3ab92d706a87e3475645f312675fc278c9f1", 
        "sha": "e60e3ab92d706a87e3475645f312675fc278c9f1", 
        "branchName": "master", 
        "date": "Jan 10, 2017 11:13:22 AM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/669bcc077b462157d1e14fb771e10ae86075f59d", 
        "sha": "669bcc077b462157d1e14fb771e10ae86075f59d", 
        "branchName": "master", 
        "date": "Jan 9, 2017 2:04:17 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-190241752-190558172", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 49, 
        "numberDeleted": 34
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_30", 
    "diff": "diff --git a/src/main/java/spoon/support/compiler/jdt/JDTTreeBuilderHelper.java b/src/main/java/spoon/support/compiler/jdt/JDTTreeBuilderHelper.java\nindex b927920..61e0dc4 100644\n--- a/src/main/java/spoon/support/compiler/jdt/JDTTreeBuilderHelper.java\n+++ b/src/main/java/spoon/support/compiler/jdt/JDTTreeBuilderHelper.java\n@@ -17,9 +17,9 @@\n package spoon.support.compiler.jdt;\n \n import org.eclipse.jdt.core.compiler.CharOperation;\n+import org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration;\n import org.eclipse.jdt.internal.compiler.ast.Argument;\n import org.eclipse.jdt.internal.compiler.ast.FieldReference;\n-import org.eclipse.jdt.internal.compiler.ast.MethodDeclaration;\n import org.eclipse.jdt.internal.compiler.ast.QualifiedNameReference;\n import org.eclipse.jdt.internal.compiler.ast.ReferenceExpression;\n import org.eclipse.jdt.internal.compiler.ast.SingleNameReference;\n@@ -42,14 +42,16 @@ import spoon.reflect.code.CtLambda;\n import spoon.reflect.code.CtTypeAccess;\n import spoon.reflect.code.CtVariableAccess;\n import spoon.reflect.declaration.CtClass;\n+import spoon.reflect.declaration.CtConstructor;\n+import spoon.reflect.declaration.CtExecutable;\n import spoon.reflect.declaration.CtField;\n-import spoon.reflect.declaration.CtMethod;\n import spoon.reflect.declaration.CtParameter;\n import spoon.reflect.declaration.CtType;\n import spoon.reflect.declaration.CtVariable;\n import spoon.reflect.declaration.ModifierKind;\n import spoon.reflect.factory.CoreFactory;\n import spoon.reflect.factory.ExecutableFactory;\n+import spoon.reflect.factory.TypeFactory;\n import spoon.reflect.reference.CtArrayTypeReference;\n import spoon.reflect.reference.CtExecutableReference;\n import spoon.reflect.reference.CtFieldReference;\n@@ -161,6 +163,7 @@ class JDTTreeBuilderHelper {\n \t * \t\t   visible in current scope, {@code null} otherwise.\n \t */\n \t<T> CtVariableAccess<T> createVariableAccessNoClasspath(SingleNameReference singleNameReference) {\n+\t\tfinal TypeFactory typeFactory = jdtTreeBuilder.getFactory().Type();\n \t\tfinal CoreFactory coreFactory = jdtTreeBuilder.getFactory().Core();\n \t\tfinal ExecutableFactory executableFactory = jdtTreeBuilder.getFactory().Executable();\n \t\tfinal ContextBuilder contextBuilder = jdtTreeBuilder.getContextBuilder();\n@@ -186,50 +189,64 @@ class JDTTreeBuilderHelper {\n \t\t\t\t// references (in terms of Java objects) have not been set up yet. Thus, we need to\n \t\t\t\t// create the required parameter reference by our own.\n \n-\t\t\t\t// since the given parameter has not been declared in a lambda expression it must\n-\t\t\t\t// have been declared by a method!\n-\t\t\t\tfinal CtMethod method = (CtMethod) variable.getParent();\n+\t\t\t\t// Since the given parameter has not been declared in a lambda expression it must\n+\t\t\t\t// have been declared by a method/constructor.\n+\t\t\t\tfinal CtExecutable executable = (CtExecutable) variable.getParent();\n \n-\t\t\t\t// create list of method's parameter types\n-\t\t\t\tfinal List<CtTypeReference<?>> parameterTypesOfMethod = new ArrayList<>();\n-\t\t\t\tfinal List<CtParameter<?>> parametersOfMethod = method.getParameters();\n-\t\t\t\tfor (CtParameter<?> parameter : parametersOfMethod) {\n+\t\t\t\t// create list of executable's parameter types\n+\t\t\t\tfinal List<CtTypeReference<?>> parameterTypesOfExecutable = new ArrayList<>();\n+\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\tfinal List<CtParameter<?>> parametersOfExecutable = executable.getParameters();\n+\t\t\t\tfor (CtParameter<?> parameter : parametersOfExecutable) {\n \t\t\t\t\tif (parameter.getType() != null) {\n-\t\t\t\t\t\tparameterTypesOfMethod.add(parameter.getType().clone());\n+\t\t\t\t\t\tparameterTypesOfExecutable.add(parameter.getType().clone());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t// it's the best match :(\n+\t\t\t\t\t\tparameterTypesOfExecutable.add(typeFactory.OBJECT);\n \t\t\t\t\t}\n \t\t\t\t}\n \n-\t\t\t\t// find method's corresponding jdt element\n-\t\t\t\tMethodDeclaration methodJDT = null;\n+\t\t\t\t// find executable's corresponding jdt element\n+\t\t\t\tAbstractMethodDeclaration executableJDT = null;\n \t\t\t\tfor (final ASTPair astPair : contextBuilder.stack) {\n-\t\t\t\t\tif (astPair.element == method) {\n-\t\t\t\t\t\tmethodJDT = (MethodDeclaration) astPair.node;\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\tif (astPair.element == executable) {\n+\t\t\t\t\t\texecutableJDT = (AbstractMethodDeclaration) astPair.node;\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tassert methodJDT != null;\n+\t\t\t\tassert executableJDT != null;\n \n-\t\t\t\t// create a reference to method's declaring class\n-\t\t\t\tfinal CtTypeReference declaringReferenceOfMethod =\n+\t\t\t\t// create a reference to executable's declaring class\n+\t\t\t\tfinal CtTypeReference declaringReferenceOfExecutable =\n \t\t\t\t\t\t// `binding` may be null for anonymous classes which means we have to\n \t\t\t\t\t\t// create an 'empty' type reference since we have no further information\n-\t\t\t\t\t\tmethodJDT.binding == null ? coreFactory.createTypeReference()\n-\t\t\t\t\t\t\t\t: referenceBuilder.getTypeReference(methodJDT.binding.declaringClass);\n-\n-\t\t\t\t// create a reference to the method of the currently processed parameter reference\n-\t\t\t\tfinal CtExecutableReference methodReference =\n-\t\t\t\t\t\texecutableFactory.createReference(declaringReferenceOfMethod,\n-\t\t\t\t\t\t\t\t// we need to clone method's return type (rt) before passing to\n-\t\t\t\t\t\t\t\t// `createReference` since this method (indirectly) sets the parent\n-\t\t\t\t\t\t\t\t// of the rt and, therefore, may break the AST\n-\t\t\t\t\t\t\t\tmethod.getType().clone(),\n-\t\t\t\t\t\t\t\t// no need to clone/copy as Strings are immutable\n-\t\t\t\t\t\t\t\tmethod.getSimpleName(),\n-\t\t\t\t\t\t\t\t// no need to clone/copy as we just created this object\n-\t\t\t\t\t\t\t\tparameterTypesOfMethod);\n-\n-\t\t\t\t// finally, we can set the method reference...\n-\t\t\t\tparameterReference.setDeclaringExecutable(methodReference);\n+\t\t\t\t\t\t// available\n+\t\t\t\t\t\texecutableJDT.binding == null ? coreFactory.createTypeReference()\n+\t\t\t\t\t\t\t\t: referenceBuilder.getTypeReference(\n+\t\t\t\t\t\t\t\t\t\texecutableJDT.binding.declaringClass);\n+\n+\t\t\t\t// If executable is a constructor, `executable.getType()` returns null since the\n+\t\t\t\t// parent is not available yet. Fortunately, however, the return type of a\n+\t\t\t\t// constructor is its declaring class which, in our case, is already available with\n+\t\t\t\t// declaringReferenceOfExecutable.\n+\t\t\t\tCtTypeReference executableTypeReference = executable instanceof CtConstructor\n+\t\t\t\t\t\t// IMPORTANT: Create a clone of the type reference (rt) if retrieved by\n+\t\t\t\t\t\t// other AST elements as `executableFactory.createReference` (see below)\n+\t\t\t\t\t\t// indirectly sets the parent of `rt` and, thus, may break the AST!\n+\t\t\t\t\t\t? declaringReferenceOfExecutable.clone()\n+\t\t\t\t\t\t: executable.getType().clone();\n+\n+\t\t\t\t// create a reference to the executable of the currently processed parameter\n+\t\t\t\t// reference\n+\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\tfinal CtExecutableReference executableReference =\n+\t\t\t\t\t\texecutableFactory.createReference(\n+\t\t\t\t\t\t\t\tdeclaringReferenceOfExecutable,\n+\t\t\t\t\t\t\t\texecutableTypeReference,\n+\t\t\t\t\t\t\t\texecutable.getSimpleName(),\n+\t\t\t\t\t\t\t\tparameterTypesOfExecutable);\n+\n+\t\t\t\t// finally, we can set the executable reference...\n+\t\t\t\tparameterReference.setDeclaringExecutable(executableReference);\n \t\t\t}\n \t\t\tvariableReference = parameterReference;\n \t\t\tvariableAccess = isLhsAssignment(contextBuilder, singleNameReference)\n", 
    "projectMetrics": {
      "numberSourceFiles": 446, 
      "numberLibrariesFailingModule": 9, 
      "numberTestFiles": 460, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 196854312, 
        "hostName": "local", 
        "totalMemory": 255328256, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:25:08 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/190241752/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            59
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 59
        }, 
        "testing": {
          "stepDurations": [
            201
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 201
        }, 
        "cloning": {
          "stepDurations": [
            16
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 16
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:15:11 PM", 
      "totalDuration": 591
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 981, 
        "numberRunning": 985, 
        "numberFailing": 2, 
        "numberErroring": 2, 
        "failures": [
          {
            "failureName": "spoon.SpoonException", 
            "isError": true, 
            "occurrences": 2
          }, 
          {
            "failureName": "org.junit.ComparisonFailure", 
            "isError": false, 
            "occurrences": 2
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/191511078", 
      "failingClasses": [
        {
          "numberPassing": 21, 
          "numberRunning": 24, 
          "testClass": "spoon.test.imports.ImportTest", 
          "numberFailing": 2, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 5, 
          "numberRunning": 6, 
          "testClass": "spoon.test.main.MainTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "org.junit.ComparisonFailure", 
          "testMethod": "testNestedAccessPathWithTypedParameter", 
          "testClass": "spoon.test.imports.ImportTest", 
          "detail": "expected:<...ltimap<K, V>.Wrapped[Collection].WrappedIterator {}> but was:<...ltimap<K, V>.Wrapped[List].WrappedIterator {}>", 
          "isError": false
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "testMethod": "testTest", 
          "testClass": "spoon.test.main.MainTest", 
          "detail": "java.lang.NullPointerException", 
          "isError": true
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "testMethod": "testAccessPath", 
          "testClass": "spoon.test.imports.ImportTest", 
          "detail": "java.lang.NullPointerException", 
          "isError": true
        }, 
        {
          "failureName": "org.junit.ComparisonFailure", 
          "testMethod": "testNestedAccessPathWithTypedParameterWithImports", 
          "testClass": "spoon.test.imports.ImportTest", 
          "detail": "expected:<...ltimap<K, V>.Wrapped[Collection].WrappedIterator {}> but was:<...ltimap<K, V>.Wrapped[List].WrappedIterator {}>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/191595944", 
        "date": "Jan 13, 2017 12:10:04 PM", 
        "id": 191595944
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/191511078", 
        "date": "Jan 13, 2017 3:15:56 AM", 
        "id": 191511078
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/551f0fb28c49f4b1eeab93f7748c04ef82cfde39", 
        "sha": "551f0fb28c49f4b1eeab93f7748c04ef82cfde39", 
        "branchName": "master", 
        "date": "Jan 13, 2017 11:58:00 AM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/7beb903ee2fbbea5b48ad316944ef831b69074f4", 
        "sha": "7beb903ee2fbbea5b48ad316944ef831b69074f4", 
        "branchName": "master", 
        "date": "Jan 13, 2017 3:06:56 AM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-191511078-191595944", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 450, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 461, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 4
      }
    }, 
    "bugId": "Bears_31", 
    "diff": "diff --git a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\nindex 6a600a6..82a30e6 100644\n--- a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\n+++ b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\n@@ -619,7 +619,7 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \t\t\t}\n \t\t\tif (modifiers.contains(ModifierKind.PRIVATE)) {\n \t\t\t\t//it is visible in scope of the same class only\n-\t\t\t\treturn type.getTopLevelType().getQualifiedName().equals(this.getQualifiedName());\n+\t\t\t\treturn type.getTopLevelType().getQualifiedName().equals(this.getTopLevelType().getQualifiedName());\n \t\t\t}\n \t\t\t//package protected\n \t\t\tif (type.getTopLevelType().getPackage().getSimpleName().equals(this.getTopLevelType().getPackage().getSimpleName())) {\n@@ -674,6 +674,9 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \t\t\t}\n \t\t\tdeclType = visibleDeclType;\n \t\t}\n+\t\tif (declType == null) {\n+\t\t\tthrow new SpoonException(\"Cannot compute access path to type: \" + this.getQualifiedName() + \" in context of type: \" + contextType.getQualifiedName());\n+\t\t}\n \t\treturn declType;\n \t}\n \n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 165605712, 
        "hostName": "local", 
        "totalMemory": 276299776, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:52:38 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/191511078/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            67
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 68
        }, 
        "testing": {
          "stepDurations": [
            243
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 243
        }, 
        "cloning": {
          "stepDurations": [
            17
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 17
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:42:43 PM", 
      "totalDuration": 589
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 985, 
        "numberRunning": 986, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.NullPointerException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/192604168", 
      "failureDetails": [
        {
          "failureName": "java.lang.NullPointerException", 
          "isError": true, 
          "testClass": "spoon.test.filters.FilterTest", 
          "testMethod": "testClassCastExceptionOnForEach"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 33, 
          "numberRunning": 34, 
          "testClass": "spoon.test.filters.FilterTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/192969999", 
        "date": "Jan 18, 2017 10:33:42 AM", 
        "id": 192969999
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/192604168", 
        "date": "Jan 17, 2017 9:27:11 AM", 
        "id": 192604168
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/b0b3d09fe50fa25f8d204e44816ff0c62f0b30ac", 
        "sha": "b0b3d09fe50fa25f8d204e44816ff0c62f0b30ac", 
        "branchName": "master", 
        "date": "Jan 18, 2017 9:51:49 AM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/8ea4bc43f39abe12a75e57ab7f50267dbed827fe", 
        "sha": "8ea4bc43f39abe12a75e57ab7f50267dbed827fe", 
        "branchName": "master", 
        "date": "Jan 17, 2017 9:18:37 AM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-192604168-192969999", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 6, 
        "numberDeleted": 1
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_32", 
    "diff": "diff --git a/src/main/java/spoon/reflect/visitor/chain/CtQueryImpl.java b/src/main/java/spoon/reflect/visitor/chain/CtQueryImpl.java\nindex cd3923e..54b3e66 100644\n--- a/src/main/java/spoon/reflect/visitor/chain/CtQueryImpl.java\n+++ b/src/main/java/spoon/reflect/visitor/chain/CtQueryImpl.java\n@@ -279,7 +279,12 @@ public class CtQueryImpl implements CtQuery {\n \t\t}\r\n \r\n \t\tprivate boolean isFailOnCCE() {\r\n-\t\t\treturn getStep().isFailOnCCE();\r\n+\t\t\tAbstractStep step = getStep();\r\n+\t\t\tif (step == null) {\r\n+\t\t\t\t//it is final consumer. Never throw CCE on final forEach consumer\r\n+\t\t\t\treturn false;\r\n+\t\t\t}\r\n+\t\t\treturn step.isFailOnCCE();\r\n \t\t}\r\n \r\n \t\tprivate AbstractStep getStep() {\r\n", 
    "projectMetrics": {
      "numberSourceFiles": 450, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 461, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 144518448, 
        "hostName": "local", 
        "totalMemory": 282591232, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:47:46 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/192604168/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            73
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 74
        }, 
        "testing": {
          "stepDurations": [
            260
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 260
        }, 
        "cloning": {
          "stepDurations": [
            18
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 18
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:36:22 PM", 
      "totalDuration": 678
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 986, 
        "numberRunning": 987, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "spoon.support.SpoonClassNotFoundException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/192969999", 
      "failingClasses": [
        {
          "numberPassing": 9, 
          "numberRunning": 10, 
          "testClass": "spoon.test.methodreference.MethodReferenceTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "spoon.support.SpoonClassNotFoundException", 
          "testMethod": "testNoClasspathSuperExecutable", 
          "testClass": "spoon.test.methodreference.MethodReferenceTest", 
          "detail": "cannot load class: NotInClasspath", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/193004144", 
        "date": "Jan 18, 2017 12:18:44 PM", 
        "id": 193004144
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/192969999", 
        "date": "Jan 18, 2017 10:33:42 AM", 
        "id": 192969999
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/5b21903b4f51c530d58c33e1a8db419287469747", 
        "sha": "5b21903b4f51c530d58c33e1a8db419287469747", 
        "branchName": "master", 
        "date": "Jan 18, 2017 12:10:23 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/b0b3d09fe50fa25f8d204e44816ff0c62f0b30ac", 
        "sha": "b0b3d09fe50fa25f8d204e44816ff0c62f0b30ac", 
        "branchName": "master", 
        "date": "Jan 18, 2017 9:51:49 AM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-192969999-193004144", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 450, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 461, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 21, 
        "numberDeleted": 5
      }
    }, 
    "bugId": "Bears_33", 
    "diff": "diff --git a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\nindex 82a30e6..e6ceb9e 100644\n--- a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\n+++ b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\n@@ -465,7 +465,14 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \tpublic Collection<CtExecutableReference<?>> getDeclaredExecutables() {\n \t\tCtType<T> t = getDeclaration();\n \t\tif (t == null) {\n-\t\t\treturn RtHelper.getAllExecutables(getActualClass(), getFactory());\n+\t\t\ttry {\n+\t\t\t\treturn RtHelper.getAllExecutables(getActualClass(), getFactory());\n+\t\t\t} catch (final SpoonClassNotFoundException e) {\n+\t\t\t\tif (getFactory().getEnvironment().getNoClasspath()) {\n+\t\t\t\t\treturn Collections.emptyList();\n+\t\t\t\t}\n+\t\t\t\tthrow e;\n+\t\t\t}\n \t\t} else {\n \t\t\treturn t.getDeclaredExecutables();\n \t\t}\n@@ -508,12 +515,19 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \t\tif (t != null) {\n \t\t\treturn t.getSuperclass();\n \t\t} else {\n-\t\t\tClass<T> c = getActualClass();\n-\t\t\tClass<?> sc = c.getSuperclass();\n-\t\t\tif (sc == null) {\n-\t\t\t\treturn null;\n+\t\t\ttry {\n+\t\t\t\tClass<T> c = getActualClass();\n+\t\t\t\tClass<?> sc = c.getSuperclass();\n+\t\t\t\tif (sc == null) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\treturn getFactory().Type().createReference(sc);\n+\t\t\t} catch (final SpoonClassNotFoundException e) {\n+\t\t\t\tif (getFactory().getEnvironment().getNoClasspath()) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\tthrow e;\n \t\t\t}\n-\t\t\treturn getFactory().Type().createReference(sc);\n \t\t}\n \t}\n \n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 198377320, 
        "hostName": "local", 
        "totalMemory": 252182528, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:42:08 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/192969999/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            61
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 61
        }, 
        "testing": {
          "stepDurations": [
            211
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 211
        }, 
        "cloning": {
          "stepDurations": [
            16
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 16
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:31:32 PM", 
      "totalDuration": 629
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 986, 
        "numberRunning": 987, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/193004144", 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "detail": "expected:<64> but was:<63>", 
          "isError": false, 
          "testMethod": "testInLineComment", 
          "testClass": "spoon.test.comment.CommentTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 10, 
          "numberRunning": 11, 
          "testClass": "spoon.test.comment.CommentTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/193023299", 
        "date": "Jan 18, 2017 1:37:43 PM", 
        "id": 193023299
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/193004144", 
        "date": "Jan 18, 2017 12:18:44 PM", 
        "id": 193004144
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/dd5ff12d4c3ad1859224d0dd69b5a798af592d09", 
        "sha": "dd5ff12d4c3ad1859224d0dd69b5a798af592d09", 
        "branchName": "master", 
        "date": "Jan 18, 2017 1:29:18 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/5b21903b4f51c530d58c33e1a8db419287469747", 
        "sha": "5b21903b4f51c530d58c33e1a8db419287469747", 
        "branchName": "master", 
        "date": "Jan 18, 2017 12:10:23 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-193004144-193023299", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 2, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 39, 
        "numberDeleted": 14
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_34", 
    "diff": "diff --git a/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java b/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java\nindex 9ed9258..e1921c0 100644\n--- a/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java\n+++ b/src/main/java/spoon/reflect/visitor/DefaultJavaPrettyPrinter.java\n@@ -185,6 +185,9 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t * Enters an expression.\n \t */\n \tprotected void enterCtExpression(CtExpression<?> e) {\n+\t\tif (!(e instanceof CtStatement)) {\n+\t\t\telementPrinterHelper.writeComment(e, CommentOffset.BEFORE);\n+\t\t}\n \t\tprinter.mapLine(e, sourceCompilationUnit);\n \t\tif (shouldSetBracket(e)) {\n \t\t\tcontext.parenthesedExpression.push(e);\n@@ -221,6 +224,9 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t\t\tcontext.parenthesedExpression.pop();\n \t\t\tprinter.write(\")\");\n \t\t}\n+\t\tif (!(e instanceof CtStatement)) {\n+\t\t\telementPrinterHelper.writeComment(e, CommentOffset.AFTER);\n+\t\t}\n \t}\n \n \t/**\n@@ -507,9 +513,6 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \tpublic <T> void visitCtConditional(CtConditional<T> conditional) {\n \t\tenterCtExpression(conditional);\n \t\tCtExpression<Boolean> condition = conditional.getCondition();\n-\t\tif (!(condition instanceof CtStatement)) {\n-\t\t\telementPrinterHelper.writeComment(condition, CommentOffset.BEFORE);\n-\t\t}\n \t\tboolean parent;\n \t\ttry {\n \t\t\tparent = conditional.getParent() instanceof CtAssignment || conditional.getParent() instanceof CtVariable;\n@@ -524,18 +527,9 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t\tif (parent) {\n \t\t\tprinter.write(\")\");\n \t\t}\n-\t\tif (!(condition instanceof CtStatement)) {\n-\t\t\telementPrinterHelper.writeComment(condition, CommentOffset.AFTER);\n-\t\t}\n \t\tprinter.write(\" ? \");\n \t\tCtExpression<T> thenExpression = conditional.getThenExpression();\n-\t\tif (!(thenExpression instanceof CtStatement)) {\n-\t\t\telementPrinterHelper.writeComment(thenExpression, CommentOffset.BEFORE);\n-\t\t}\n \t\tscan(thenExpression);\n-\t\tif (!(thenExpression instanceof CtStatement)) {\n-\t\t\telementPrinterHelper.writeComment(thenExpression, CommentOffset.AFTER);\n-\t\t}\n \t\tprinter.write(\" : \");\n \n \t\tCtExpression<T> elseExpression = conditional.getElseExpression();\n@@ -543,13 +537,7 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t\tif ((isAssign = elseExpression instanceof CtAssignment)) {\n \t\t\tprinter.write(\"(\");\n \t\t}\n-\t\tif (!(elseExpression instanceof CtStatement)) {\n-\t\t\telementPrinterHelper.writeComment(elseExpression, CommentOffset.BEFORE);\n-\t\t}\n \t\tscan(elseExpression);\n-\t\tif (!(elseExpression instanceof CtStatement)) {\n-\t\t\telementPrinterHelper.writeComment(elseExpression, CommentOffset.AFTER);\n-\t\t}\n \t\tif (isAssign) {\n \t\t\tprinter.write(\")\");\n \t\t}\n@@ -1188,7 +1176,6 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic <T> void visitCtNewArray(CtNewArray<T> newArray) {\n \t\tenterCtExpression(newArray);\n-\t\telementPrinterHelper.writeComment(newArray, CommentOffset.BEFORE);\n \t\tboolean isNotInAnnotation;\n \t\ttry {\n \t\t\tisNotInAnnotation = (newArray.getParent(CtAnnotationType.class) == null) && (newArray.getParent(CtAnnotation.class) == null);\n@@ -1210,13 +1197,7 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t\t\t\tprinter.write(\"[\");\n \t\t\t\tif (newArray.getDimensionExpressions().size() > i) {\n \t\t\t\t\tCtExpression<Integer> e = newArray.getDimensionExpressions().get(i);\n-\t\t\t\t\tif (!(e instanceof CtStatement)) {\n-\t\t\t\t\t\telementPrinterHelper.writeComment(e, CommentOffset.BEFORE);\n-\t\t\t\t\t}\n \t\t\t\t\tscan(e);\n-\t\t\t\t\tif (!(e instanceof CtStatement)) {\n-\t\t\t\t\t\telementPrinterHelper.writeComment(e, CommentOffset.AFTER);\n-\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tprinter.write(\"]\");\n \t\t\t\tref = ((CtArrayTypeReference) ref).getComponentType();\n@@ -1227,21 +1208,16 @@ public class DefaultJavaPrettyPrinter implements CtVisitor, PrettyPrinter {\n \t\t\tList<CtExpression<?>> l_elements = newArray.getElements();\n \t\t\tfor (int i = 0; i < l_elements.size(); i++) {\n \t\t\t\tCtExpression e = l_elements.get(i);\n-\t\t\t\tif (!(e instanceof CtStatement)) {\n-\t\t\t\t\telementPrinterHelper.writeComment(e, CommentOffset.BEFORE);\n-\t\t\t\t}\n \t\t\t\tscan(e);\n \t\t\t\tprinter.write(\" , \");\n \t\t\t\tif (i + 1 == l_elements.size()) {\n-\t\t\t\t\t/*\n-\t\t\t\t\t * we have to remove last char before we writeComment.\n-\t\t\t\t\t * We cannot simply skip adding of \" , \",\n-\t\t\t\t\t * because it influences formatting and EOL too\n-\t\t\t\t\t */\n \t\t\t\t\tprinter.removeLastChar();\n-\t\t\t\t}\n-\t\t\t\tif (!(e instanceof CtStatement)) {\n-\t\t\t\t\telementPrinterHelper.writeComment(e, CommentOffset.AFTER);\n+\t\t\t\t\t// if the last element c\n+\t\t\t\t\tList<CtComment> comments = elementPrinterHelper.getComments(e, CommentOffset.AFTER);\n+\t\t\t\t\t// if the last element contains an inline comment, print a new line before closing the array\n+\t\t\t\t\tif (!comments.isEmpty() && comments.get(comments.size() - 1).getCommentType() == CtComment.CommentType.INLINE) {\n+\t\t\t\t\t\tprinter.insertLine();\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \ndiff --git a/src/main/java/spoon/support/compiler/jdt/ParentExiter.java b/src/main/java/spoon/support/compiler/jdt/ParentExiter.java\nindex f7fa778..23f33cd 100644\n--- a/src/main/java/spoon/support/compiler/jdt/ParentExiter.java\n+++ b/src/main/java/spoon/support/compiler/jdt/ParentExiter.java\n@@ -75,6 +75,7 @@ import spoon.reflect.code.CtUnaryOperator;\n import spoon.reflect.code.BinaryOperatorKind;\n import spoon.reflect.code.CtThisAccess;\n import spoon.reflect.code.CtLocalVariable;\n+import spoon.reflect.cu.SourcePosition;\n import spoon.reflect.declaration.CtAnnotation;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtExecutable;\n@@ -397,6 +398,10 @@ public class ParentExiter extends CtInheritanceScanner {\n \t\t\t\top.setLeftHandOperand(operator.getRightHandOperand());\n \t\t\t\top.setRightHandOperand((CtExpression<?>) child);\n \t\t\t\toperator.setRightHandOperand(op);\n+\t\t\t\tint[] lineSeparatorPositions = this.jdtTreeBuilder.getContextBuilder().compilationunitdeclaration.compilationResult.lineSeparatorPositions;\n+\t\t\t\tSourcePosition leftPosition = op.getLeftHandOperand().getPosition();\n+\t\t\t\tSourcePosition rightPosition = op.getRightHandOperand().getPosition();\n+\t\t\t\top.setPosition(op.getFactory().createSourcePosition(leftPosition.getCompilationUnit(), leftPosition.getSourceStart(), rightPosition.getSourceEnd(), lineSeparatorPositions));\n \t\t\t\treturn;\n \t\t\t}\n \t\t}\n", 
    "projectMetrics": {
      "numberSourceFiles": 450, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 461, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 179444400, 
        "hostName": "local", 
        "totalMemory": 253755392, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:27:03 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/193004144/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            64
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 64
        }, 
        "testing": {
          "stepDurations": [
            230
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 230
        }, 
        "cloning": {
          "stepDurations": [
            17
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 17
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:17:18 PM", 
      "totalDuration": 577
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 995, 
        "numberRunning": 996, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/196963859", 
      "failingClasses": [
        {
          "numberPassing": 5, 
          "numberRunning": 6, 
          "testClass": "spoon.test.prettyprinter.PrinterTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testAutoimportModeDontImportUselessStatic", 
          "testClass": "spoon.test.prettyprinter.PrinterTest", 
          "detail": "The result should not contain import static: ", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/196966996", 
        "date": "Jan 31, 2017 3:50:13 PM", 
        "id": 196966996
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/196963859", 
        "date": "Jan 31, 2017 3:41:53 PM", 
        "id": 196963859
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/23ba99df0825643a841941d7d764ed01ce7d952c", 
        "sha": "23ba99df0825643a841941d7d764ed01ce7d952c", 
        "branchName": "master", 
        "date": "Jan 31, 2017 3:41:49 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/6bef9fd815d506f5ab48efdc1c902a0df2a26824", 
        "sha": "6bef9fd815d506f5ab48efdc1c902a0df2a26824", 
        "branchName": "master", 
        "date": "Jan 31, 2017 3:32:28 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-196963859-196966996", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 458, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 468, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 152, 
        "numberDeleted": 166
      }
    }, 
    "bugId": "Bears_35", 
    "diff": "diff --git a/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java b/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java\nindex 14baa95..f3dc890 100644\n--- a/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java\n+++ b/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java\n@@ -16,6 +16,7 @@\n  */\n package spoon.reflect.visitor;\n \n+import spoon.reflect.code.CtBlock;\n import spoon.reflect.code.CtCatchVariable;\n import spoon.reflect.code.CtFieldAccess;\n import spoon.reflect.code.CtFieldRead;\n@@ -26,9 +27,13 @@ import spoon.reflect.declaration.CtClass;\n import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtEnum;\n import spoon.reflect.declaration.CtExecutable;\n+import spoon.reflect.declaration.CtField;\n import spoon.reflect.declaration.CtInterface;\n+import spoon.reflect.declaration.CtMethod;\n+import spoon.reflect.declaration.CtPackage;\n import spoon.reflect.declaration.CtType;\n import spoon.reflect.declaration.CtTypeMember;\n+import spoon.reflect.declaration.CtVariable;\n import spoon.reflect.declaration.ParentNotInitializedException;\n import spoon.reflect.reference.CtArrayTypeReference;\n import spoon.reflect.reference.CtExecutableReference;\n@@ -44,7 +49,11 @@ import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.TreeMap;\n \n /**\n@@ -63,6 +72,7 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {\n \t//top declaring type of that import\n \tprotected CtTypeReference<?> targetType;\n \tprivate Map<String, Boolean> namesPresentInJavaLang = new HashMap<>();\n+\tprivate Set<String> fieldAndMethodsNames = new HashSet<String>();\n \n \t@Override\n \tpublic <T> void visitCtFieldRead(CtFieldRead<T> fieldRead) {\n@@ -377,7 +387,11 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {\n \t */\n \tprivate boolean declaringTypeIsLocalOrImported(CtTypeReference declaringType) {\n \t\tif (declaringType != null) {\n-\t\t\tif (isImportedInClassImports(declaringType)) {\n+\t\t\tif (isImportedInClassImports(declaringType) || classNamePresentInJavaLang(declaringType)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\tif (!isTypeInCollision(declaringType, false) && addClassImport(declaringType)) {\n \t\t\t\treturn true;\n \t\t\t}\n \n@@ -479,4 +493,146 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {\n \t\t}\n \t\treturn presentInJavaLang;\n \t}\n+\n+\tprotected Set<String> lookForLocalVariables(CtElement parent) {\n+\t\tSet<String> result = new HashSet<>();\n+\n+\t\t// try to get the block container\n+\t\t// if the first container is the class, then we are not in a block and we can quit now.\n+\t\twhile (parent != null && !(parent instanceof CtBlock)) {\n+\t\t\tif (parent instanceof CtClass) {\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t\tparent = parent.getParent();\n+\t\t}\n+\n+\t\tif (parent != null) {\n+\t\t\tCtBlock block = (CtBlock) parent;\n+\t\t\tboolean innerClass = false;\n+\n+\t\t\t// now we have the first container block, we want to check if we're not in an inner class\n+\t\t\twhile (parent != null && !(parent instanceof CtClass)) {\n+\t\t\t\tparent = parent.getParent();\n+\t\t\t}\n+\n+\t\t\tif (parent != null) {\n+\t\t\t\t// uhoh it's not a package as a parent, we must in an inner block:\n+\t\t\t\t// let's find the last block BEFORE the class call: some collision could occur because of variables defined in that block\n+\t\t\t\tif (!(parent.getParent() instanceof CtPackage)) {\n+\t\t\t\t\twhile (parent != null && !(parent instanceof CtBlock)) {\n+\t\t\t\t\t\tparent = parent.getParent();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (parent != null) {\n+\t\t\t\t\t\tblock = (CtBlock) parent;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tAccessibleVariablesFinder avf = new AccessibleVariablesFinder(block);\n+\t\t\tList<CtVariable> variables = avf.find();\n+\n+\t\t\tfor (CtVariable variable : variables) {\n+\t\t\t\tresult.add(variable.getSimpleName());\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn result;\n+\t}\n+\n+\t/**\n+\t * Test if the reference can be imported, i.e. test if the importation could lead to a collision.\n+\t * In FQN mode, it only tests the first package name: if a collision occurs with this first one, it should be imported.\n+\t * @param ref\n+\t * @return true if the ref should be imported.\n+\t */\n+\tprotected boolean isTypeInCollision(CtReference ref, boolean fqnMode) {\n+\t\tif (targetType.getSimpleName().equals(ref.getSimpleName()) && !targetType.equals(ref)) {\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tCtElement parent;\n+\t\t\tif (ref instanceof CtTypeReference) {\n+\t\t\t\tparent = ref.getParent();\n+\t\t\t} else {\n+\t\t\t\tparent = ref;\n+\t\t\t}\n+\n+\t\t\tSet<String> localVariablesOfBlock = new HashSet<>();\n+\n+\t\t\tif (parent instanceof CtField) {\n+\t\t\t\tthis.fieldAndMethodsNames.add(((CtField) parent).getSimpleName());\n+\t\t\t} else if (parent instanceof CtMethod) {\n+\t\t\t\tthis.fieldAndMethodsNames.add(((CtMethod) parent).getSimpleName());\n+\t\t\t} else {\n+\t\t\t\tlocalVariablesOfBlock = this.lookForLocalVariables(parent);\n+\t\t\t}\n+\n+\t\t\twhile (!(parent instanceof CtPackage)) {\n+\t\t\t\tif ((parent instanceof CtFieldReference) || (parent instanceof CtExecutableReference)) {\n+\t\t\t\t\tCtReference parentType = (CtReference) parent;\n+\t\t\t\t\tLinkedList<String> qualifiedNameTokens = new LinkedList<>();\n+\n+\t\t\t\t\t// we don't want to test the current ref name, as we risk to create field import and make autoreference\n+\t\t\t\t\tif (parentType != parent) {\n+\t\t\t\t\t\tqualifiedNameTokens.add(parentType.getSimpleName());\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tCtTypeReference typeReference;\n+\t\t\t\t\tif (parent instanceof CtFieldReference) {\n+\t\t\t\t\t\ttypeReference = ((CtFieldReference) parent).getDeclaringType();\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\ttypeReference = ((CtExecutableReference) parent).getDeclaringType();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (typeReference != null) {\n+\t\t\t\t\t\tqualifiedNameTokens.add(typeReference.getSimpleName());\n+\n+\t\t\t\t\t\tif (typeReference.getPackage() != null) {\n+\t\t\t\t\t\t\tCtPackage ctPackage = typeReference.getPackage().getDeclaration();\n+\n+\t\t\t\t\t\t\twhile (ctPackage != null) {\n+\t\t\t\t\t\t\t\tqualifiedNameTokens.add(ctPackage.getSimpleName());\n+\n+\t\t\t\t\t\t\t\tCtElement packParent = ctPackage.getParent();\n+\t\t\t\t\t\t\t\tif (packParent.getParent() != null && !((CtPackage) packParent).getSimpleName().equals(CtPackage.TOP_LEVEL_PACKAGE_NAME)) {\n+\t\t\t\t\t\t\t\t\tctPackage = (CtPackage) packParent;\n+\t\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t\tctPackage = null;\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\tif (!qualifiedNameTokens.isEmpty()) {\n+\t\t\t\t\t\t// qualified name token are ordered in the reverse order\n+\t\t\t\t\t\t// if the first package name is a variable name somewhere, it could lead to a collision\n+\t\t\t\t\t\tif (fieldAndMethodsNames.contains(qualifiedNameTokens.getLast()) || localVariablesOfBlock.contains(qualifiedNameTokens.getLast())) {\n+\t\t\t\t\t\t\tqualifiedNameTokens.removeLast();\n+\n+\t\t\t\t\t\t\tif (fqnMode) {\n+\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t\t// but if the other package names are not a variable name, it's ok to import\n+\t\t\t\t\t\t\t\tfor (int i = qualifiedNameTokens.size() - 1; i > 0; i--) {\n+\t\t\t\t\t\t\t\t\tString testedToken = qualifiedNameTokens.get(i);\n+\t\t\t\t\t\t\t\t\tif (!fieldAndMethodsNames.contains(testedToken) && !localVariablesOfBlock.contains(testedToken)) {\n+\t\t\t\t\t\t\t\t\t\treturn false;\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\treturn true;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\n+\t\t\t\t}\n+\t\t\t\tparent = parent.getParent();\n+\t\t\t}\n+\t\t} catch (ParentNotInitializedException e) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\treturn false;\n+\t}\n }\ndiff --git a/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java b/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java\nindex 65c9939..912692f 100644\n--- a/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java\n+++ b/src/main/java/spoon/reflect/visitor/MinimalImportScanner.java\n@@ -16,94 +16,19 @@\n  */\n package spoon.reflect.visitor;\n \n-import spoon.reflect.code.CtBlock;\n-import spoon.reflect.declaration.CtClass;\n-import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtField;\n-import spoon.reflect.declaration.CtMethod;\n-import spoon.reflect.declaration.CtPackage;\n-import spoon.reflect.declaration.CtVariable;\n-import spoon.reflect.declaration.ParentNotInitializedException;\n import spoon.reflect.reference.CtExecutableReference;\n import spoon.reflect.reference.CtFieldReference;\n import spoon.reflect.reference.CtReference;\n import spoon.reflect.reference.CtTypeReference;\n \n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Set;\n-\n /**\n  * A scanner dedicated to import only the necessary packages, @see spoon.test.variable.AccessFullyQualifiedTest\n  *\n  */\n public class MinimalImportScanner extends ImportScannerImpl implements ImportScanner {\n \n-\tprivate Set<String> fieldAndMethodsNames = new HashSet<String>();\n-\n-\tprivate CtClass getParentClass(CtReference ref) {\n-\t\tCtElement parent = ref.getParent();\n-\n-\t\twhile (parent != null && !(parent instanceof CtClass)) {\n-\t\t\tparent = parent.getParent();\n-\t\t}\n-\n-\t\tif (parent == null) {\n-\t\t\treturn null;\n-\t\t} else {\n-\t\t\treturn (CtClass) parent;\n-\t\t}\n-\t}\n-\n-\tprivate Set<String> lookForLocalVariables(CtElement parent) {\n-\t\tSet<String> result = new HashSet<>();\n-\n-\t\t// try to get the block container\n-\t\t// if the first container is the class, then we are not in a block and we can quit now.\n-\t\twhile (parent != null && !(parent instanceof CtBlock)) {\n-\t\t\tif (parent instanceof CtClass) {\n-\t\t\t\treturn result;\n-\t\t\t}\n-\t\t\tparent = parent.getParent();\n-\t\t}\n-\n-\t\tif (parent != null) {\n-\t\t\tCtBlock block = (CtBlock) parent;\n-\t\t\tboolean innerClass = false;\n-\n-\t\t\t// now we have the first container block, we want to check if we're not in an inner class\n-\t\t\twhile (parent != null && !(parent instanceof CtClass)) {\n-\t\t\t\tparent = parent.getParent();\n-\t\t\t}\n-\n-\t\t\tif (parent != null) {\n-\t\t\t\t// uhoh it's not a package as a parent, we must in an inner block:\n-\t\t\t\t// let's find the last block BEFORE the class call: some collision could occur because of variables defined in that block\n-\t\t\t\tif (!(parent.getParent() instanceof CtPackage)) {\n-\t\t\t\t\twhile (parent != null && !(parent instanceof CtBlock)) {\n-\t\t\t\t\t\tparent = parent.getParent();\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (parent != null) {\n-\t\t\t\t\t\tblock = (CtBlock) parent;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tAccessibleVariablesFinder avf = new AccessibleVariablesFinder(block);\n-\t\t\tList<CtVariable> variables = avf.find();\n-\n-\t\t\tfor (CtVariable variable : variables) {\n-\t\t\t\tresult.add(variable.getSimpleName());\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn result;\n-\t}\n-\n \t/**\n-\t * Test if the reference should be imported by looking if there is a name conflict\n+\t * This method use @link{ImportScannerImpl#isTypeInCollision} to import a ref only if there is a collision\n \t * @param ref\n \t * @return true if the ref should be imported.\n \t */\n@@ -113,74 +38,7 @@ public class MinimalImportScanner extends ImportScannerImpl implements ImportSca\n \t\t\treturn true;\n \t\t}\n \n-\t\ttry {\n-\t\t\tCtElement parent;\n-\t\t\tif (ref instanceof CtTypeReference) {\n-\t\t\t\tparent = ref.getParent();\n-\t\t\t} else {\n-\t\t\t\tparent = ref;\n-\t\t\t}\n-\n-\t\t\tSet<String> localVariablesOfBlock = new HashSet<>();\n-\n-\t\t\tif (parent instanceof CtField) {\n-\t\t\t\tthis.fieldAndMethodsNames.add(((CtField) parent).getSimpleName());\n-\t\t\t} else if (parent instanceof CtMethod) {\n-\t\t\t\tthis.fieldAndMethodsNames.add(((CtMethod) parent).getSimpleName());\n-\t\t\t} else {\n-\t\t\t\tlocalVariablesOfBlock = this.lookForLocalVariables(parent);\n-\t\t\t}\n-\n-\t\t\twhile (!(parent instanceof CtPackage)) {\n-\t\t\t\tif ((parent instanceof CtFieldReference) || (parent instanceof CtExecutableReference)) {\n-\t\t\t\t\tCtReference parentType = (CtReference) parent;\n-\t\t\t\t\tLinkedList<String> qualifiedNameTokens = new LinkedList<>();\n-\n-\t\t\t\t\t// we don't want to test the current ref name, as we risk to create field import and make autoreference\n-\t\t\t\t\tif (parentType != parent) {\n-\t\t\t\t\t\tqualifiedNameTokens.add(parentType.getSimpleName());\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tCtTypeReference typeReference;\n-\t\t\t\t\tif (parent instanceof CtFieldReference) {\n-\t\t\t\t\t\ttypeReference = ((CtFieldReference) parent).getDeclaringType();\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\ttypeReference = ((CtExecutableReference) parent).getDeclaringType();\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tif (typeReference != null) {\n-\t\t\t\t\t\tqualifiedNameTokens.add(typeReference.getSimpleName());\n-\n-\t\t\t\t\t\tif (typeReference.getPackage() != null) {\n-\t\t\t\t\t\t\tCtPackage ctPackage = typeReference.getPackage().getDeclaration();\n-\n-\t\t\t\t\t\t\twhile (ctPackage != null) {\n-\t\t\t\t\t\t\t\tqualifiedNameTokens.add(ctPackage.getSimpleName());\n-\n-\t\t\t\t\t\t\t\tCtElement packParent = ctPackage.getParent();\n-\t\t\t\t\t\t\t\tif (packParent.getParent() != null && !((CtPackage) packParent).getSimpleName().equals(CtPackage.TOP_LEVEL_PACKAGE_NAME)) {\n-\t\t\t\t\t\t\t\t\tctPackage = (CtPackage) packParent;\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tctPackage = null;\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tif (!qualifiedNameTokens.isEmpty()) {\n-\t\t\t\t\t\tif (fieldAndMethodsNames.contains(qualifiedNameTokens.getLast()) || localVariablesOfBlock.contains(qualifiedNameTokens.getLast())) {\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\n-\n-\t\t\t\t}\n-\t\t\t\tparent = parent.getParent();\n-\t\t\t}\n-\t\t} catch (ParentNotInitializedException e) {\n-\t\t\treturn false;\n-\t\t}\n-\n-\t\treturn false;\n+\t\treturn isTypeInCollision(ref, true);\n \t}\n \n \t@Override\ndiff --git a/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java b/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java\nindex 63f58e0..2133fe5 100644\n--- a/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java\n+++ b/src/main/java/spoon/reflect/visitor/printer/ElementPrinterHelper.java\n@@ -265,19 +265,27 @@ public class ElementPrinterHelper {\n \t\t\t}\n \t\t\tprinter.writeln().writeln().writeTabs();\n \t\t\tfor (CtReference ref : imports) {\n+\t\t\t\tString importStr = \"import\";\n+\t\t\t\tString importTypeStr = \"\";\n+\n \t\t\t\tif (ref instanceof CtTypeReference) {\n \t\t\t\t\tCtTypeReference typeRef = (CtTypeReference) ref;\n-\t\t\t\t\tprinter.write(\"import \" + typeRef.getQualifiedName() + \";\").writeln().writeTabs();\n+\t\t\t\t\timportTypeStr = typeRef.getQualifiedName();\n \t\t\t\t} else if (ref instanceof CtExecutableReference) {\n+\t\t\t\t\timportStr += \" static\";\n \t\t\t\t\tCtExecutableReference execRef = (CtExecutableReference) ref;\n \t\t\t\t\tif (execRef.getDeclaringType() != null) {\n-\t\t\t\t\t\tprinter.write(\"import static \" + this.removeInnerTypeSeparator(execRef.getDeclaringType().getQualifiedName()) + \".\" + execRef.getSimpleName() + \";\").writeln().writeTabs();\n+\t\t\t\t\t\timportTypeStr = this.removeInnerTypeSeparator(execRef.getDeclaringType().getQualifiedName()) + \".\" + execRef.getSimpleName();\n \t\t\t\t\t}\n \t\t\t\t} else if (ref instanceof CtFieldReference) {\n+\t\t\t\t\timportStr += \" static\";\n \t\t\t\t\tCtFieldReference fieldRef = (CtFieldReference) ref;\n-\t\t\t\t\tprinter.write(\"import static \" + this.removeInnerTypeSeparator(fieldRef.getDeclaringType().getQualifiedName()) + \".\" + fieldRef.getSimpleName() + \";\").writeln().writeTabs();\n+\t\t\t\t\timportTypeStr = this.removeInnerTypeSeparator(fieldRef.getDeclaringType().getQualifiedName()) + \".\" + fieldRef.getSimpleName();\n \t\t\t\t}\n \n+\t\t\t\tif (!importTypeStr.equals(\"\")) {\n+\t\t\t\t\tprinter.write(importStr + \" \" + importTypeStr + \";\").writeln().writeTabs();\n+\t\t\t\t}\n \t\t\t}\n \t\t\tprinter.writeln().writeTabs();\n \t\t}\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 97585392, 
        "hostName": "local", 
        "totalMemory": 272629760, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:20:05 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/196963859/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            65
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 65
        }, 
        "testing": {
          "stepDurations": [
            270
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 270
        }, 
        "cloning": {
          "stepDurations": [
            17
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 17
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:08:12 PM", 
      "totalDuration": 706
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1000, 
        "numberRunning": 1001, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/197673696", 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "detail": "expected:<0> but was:<1>", 
          "isError": false, 
          "testMethod": "testComputeImportsInClassWithSameName", 
          "testClass": "spoon.test.imports.ImportScannerTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "spoon.test.imports.ImportScannerTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/197674087", 
        "date": "Feb 2, 2017 4:27:43 PM", 
        "id": 197674087
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/197673696", 
        "date": "Feb 2, 2017 4:26:39 PM", 
        "id": 197673696
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/a727953e00ea1f8fa64b11cb2d237a709fd15e38", 
        "sha": "a727953e00ea1f8fa64b11cb2d237a709fd15e38", 
        "branchName": "master", 
        "date": "Feb 2, 2017 4:18:40 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/3c03c32553a2eb0e5fea8e953a87c0bf5d57eb20", 
        "sha": "3c03c32553a2eb0e5fea8e953a87c0bf5d57eb20", 
        "branchName": "master", 
        "date": "Feb 2, 2017 4:17:45 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-197673696-197674087", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 8
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_36", 
    "diff": "diff --git a/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java b/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java\nindex f3dc890..f5591cf 100644\n--- a/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java\n+++ b/src/main/java/spoon/reflect/visitor/ImportScannerImpl.java\n@@ -255,6 +255,13 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {\n \t * Adds a type to the classImports.\n \t */\n \tprotected boolean addClassImport(CtTypeReference<?> ref) {\n+\t\tif (ref == null) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tif (targetType != null && targetType.getSimpleName().equals(ref.getSimpleName()) && !targetType.equals(ref)) {\n+\t\t\treturn false;\n+\t\t}\n \t\tif (classImports.containsKey(ref.getSimpleName())) {\n \t\t\treturn isImportedInClassImports(ref);\n \t\t}\n@@ -277,6 +284,7 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {\n \n \t\t// we want to be sure that we are not importing a class because a static field or method we already imported\n \t\t// moreover we make exception for same package classes to avoid problems in FQN mode\n+\n \t\tif (targetType != null) {\n \t\t\ttry {\n \t\t\t\tCtElement parent = ref.getParent();\n@@ -341,7 +349,6 @@ public class ImportScannerImpl extends CtScanner implements ImportScanner {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\n \t\t//note: we must add the type refs from the same package too, to assure that isImported(typeRef) returns true for them\n \t\t//these type refs are removed in #getClassImports()\n \t\tclassImports.put(ref.getSimpleName(), ref);\n", 
    "projectMetrics": {
      "numberSourceFiles": 461, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 470, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 142754360, 
        "hostName": "local", 
        "totalMemory": 288358400, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:33:38 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/197673696/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            95
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 96
        }, 
        "testing": {
          "stepDurations": [
            294
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 294
        }, 
        "cloning": {
          "stepDurations": [
            22
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 22
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:21:03 AM", 
      "totalDuration": 748
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1001, 
        "numberRunning": 1002, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/197674087", 
      "failingClasses": [
        {
          "numberPassing": 5, 
          "numberRunning": 6, 
          "testClass": "spoon.test.interfaces.InterfaceTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testDefaultMethodInConsumer", 
          "testClass": "spoon.test.interfaces.InterfaceTest", 
          "detail": "The method in the interface must to be default", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/198523383", 
        "date": "Feb 5, 2017 11:23:59 AM", 
        "id": 198523383
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/197674087", 
        "date": "Feb 2, 2017 4:27:43 PM", 
        "id": 197674087
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/870a297e6b21673c5c62890cf4b57807dfaf3480", 
        "sha": "870a297e6b21673c5c62890cf4b57807dfaf3480", 
        "branchName": "master", 
        "date": "Feb 5, 2017 11:15:35 AM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/a727953e00ea1f8fa64b11cb2d237a709fd15e38", 
        "sha": "a727953e00ea1f8fa64b11cb2d237a709fd15e38", 
        "branchName": "master", 
        "date": "Feb 2, 2017 4:18:40 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-197674087-198523383", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 461, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 470, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 2, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 29, 
        "numberDeleted": 12
      }
    }, 
    "bugId": "Bears_37", 
    "diff": "diff --git a/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java b/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java\nindex 6ce5723..fe82d93 100644\n--- a/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java\n+++ b/src/main/java/spoon/support/visitor/java/JavaReflectionTreeBuilder.java\n@@ -245,6 +245,7 @@ public class JavaReflectionTreeBuilder extends JavaReflectionVisitorImpl {\n \t\tctMethod.setSimpleName(method.getName());\n \t\tctMethod.setBody(factory.Core().createBlock());\n \t\tsetModifier(ctMethod, method.getModifiers());\n+\t\tctMethod.setDefaultMethod(method.isDefault());\n \n \t\tenter(new ExecutableRuntimeBuilderContext(ctMethod));\n \t\tsuper.visitMethod(method);\ndiff --git a/src/main/java/spoon/support/visitor/java/reflect/RtMethod.java b/src/main/java/spoon/support/visitor/java/reflect/RtMethod.java\nindex 727969e..d33761f 100644\n--- a/src/main/java/spoon/support/visitor/java/reflect/RtMethod.java\n+++ b/src/main/java/spoon/support/visitor/java/reflect/RtMethod.java\n@@ -17,12 +17,15 @@\n package spoon.support.visitor.java.reflect;\n \n import java.lang.annotation.Annotation;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.lang.reflect.TypeVariable;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n+import spoon.SpoonException;\n+\n public class RtMethod {\n \tprivate Class<?> clazz;\n \tprivate String name;\n@@ -34,9 +37,10 @@ public class RtMethod {\n \tprivate Annotation[] annotations;\n \tprivate Annotation[][] parameterAnnotations;\n \tprivate boolean isVarArgs;\n+\tprivate boolean isDefault;\n \n \tpublic RtMethod(Class<?> clazz, String name, Class<?> returnType, TypeVariable<Method>[] typeParameters, Class<?>[] parameterTypes, Class<?>[] exceptionTypes, int modifiers, Annotation[] annotations,\n-\t\t\tAnnotation[][] parameterAnnotations, boolean isVarArgs) {\n+\t\t\tAnnotation[][] parameterAnnotations, boolean isVarArgs, boolean isDefault) {\n \t\tthis.clazz = clazz;\n \t\tthis.name = name;\n \t\tthis.returnType = returnType;\n@@ -47,6 +51,7 @@ public class RtMethod {\n \t\tthis.annotations = annotations;\n \t\tthis.parameterAnnotations = parameterAnnotations;\n \t\tthis.isVarArgs = isVarArgs;\n+\t\tthis.isDefault = isDefault;\n \t}\n \n \tpublic Class<?> getDeclaringClass() {\n@@ -89,6 +94,10 @@ public class RtMethod {\n \t\treturn isVarArgs;\n \t}\n \n+\tpublic boolean isDefault() {\n+\t\treturn isDefault;\n+\t}\n+\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\tif (this == o) {\n@@ -120,7 +129,34 @@ public class RtMethod {\n \tpublic static RtMethod create(Method method) {\n \t\treturn new RtMethod(method.getDeclaringClass(), method.getName(), method.getReturnType(),\n \t\t\t\tmethod.getTypeParameters(), method.getParameterTypes(), method.getExceptionTypes(), method.getModifiers(),\n-\t\t\t\tmethod.getDeclaredAnnotations(), method.getParameterAnnotations(), method.isVarArgs());\n+\t\t\t\tmethod.getDeclaredAnnotations(), method.getParameterAnnotations(), method.isVarArgs(),\n+\t\t\t\t//spoon is compatible with Java 7, so compilation fails here\n+\t\t\t\t//method.isDefault());\n+\t\t\t\t_java8_isDefault(method));\n+\t}\n+\n+\tprivate static Method _method_isDefault;\n+\tstatic {\n+\t\ttry {\n+\t\t\t_method_isDefault = Method.class.getMethod(\"isDefault\");\n+\t\t} catch (NoSuchMethodException | SecurityException e) {\n+\t\t\t//spoon is running with java 7 JDK\n+\t\t\t_method_isDefault = null;\n+\t\t}\n+\t}\n+\n+\tprivate static boolean _java8_isDefault(Method method) {\n+\t\tif (_method_isDefault == null) {\n+\t\t\t//spoon is running with java 7 JDK, all methods are not default, because java 7 does not have default methods\n+\t\t\treturn false;\n+\t\t}\n+\t\ttry {\n+\t\t\treturn (Boolean) _method_isDefault.invoke(method);\n+\t\t} catch (IllegalAccessException | IllegalArgumentException e) {\n+\t\t\tthrow new SpoonException(\"Calling of Java8 Method#isDefault() failed\", e);\n+\t\t} catch (InvocationTargetException e) {\n+\t\t\tthrow new SpoonException(\"Calling of Java8 Method#isDefault() failed\", e.getTargetException());\n+\t\t}\n \t}\n \n \tpublic static <T> RtMethod[] methodsOf(Class<T> clazz) {\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 97150032, 
        "hostName": "local", 
        "totalMemory": 279445504, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:32:42 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/197674087/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            103
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 103
        }, 
        "testing": {
          "stepDurations": [
            283
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 283
        }, 
        "cloning": {
          "stepDurations": [
            20
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 20
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:19:47 AM", 
      "totalDuration": 768
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1002, 
        "numberRunning": 1005, 
        "numberFailing": 0, 
        "numberErroring": 3, 
        "failures": [
          {
            "failureName": "spoon.SpoonException", 
            "isError": true, 
            "occurrences": 3
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/199972949", 
      "failureDetails": [
        {
          "failureName": "spoon.SpoonException", 
          "detail": "The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.LambdaRxJava$NbpOperator has at least two: <T extends java.lang.Object> java.util.function.Function identity() and java.lang.Object apply(java.lang.Object)", 
          "isError": true, 
          "testMethod": "testCompileLambdaGeneratedBySpoon", 
          "testClass": "spoon.test.lambda.LambdaTest"
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "detail": "The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.LambdaRxJava$NbpOperator has at least two: <T extends java.lang.Object> java.util.function.Function identity() and java.lang.Object apply(java.lang.Object)", 
          "isError": true, 
          "testMethod": "testGetOverriddenMethodWithFunction", 
          "testClass": "spoon.test.lambda.LambdaTest"
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "detail": "spoon.SpoonException: The lambda can be based on interface, which has only one method. But spoon.test.lambda.testclasses.LambdaRxJava$NbpOperator has at least two: <T extends java.lang.Object> java.util.function.Function identity() and java.lang.Object apply(java.lang.Object)", 
          "isError": true, 
          "testMethod": "testTest", 
          "testClass": "spoon.test.main.MainTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 18, 
          "numberRunning": 20, 
          "testClass": "spoon.test.lambda.LambdaTest", 
          "numberFailing": 0, 
          "numberErroring": 2, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 5, 
          "numberRunning": 6, 
          "testClass": "spoon.test.main.MainTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/199993301", 
        "date": "Feb 9, 2017 3:35:45 PM", 
        "id": 199993301
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/199972949", 
        "date": "Feb 9, 2017 2:32:36 PM", 
        "id": 199972949
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/b63ac185bb5c83b60f1c1bdbc10aa9b4004ae3a6", 
        "sha": "b63ac185bb5c83b60f1c1bdbc10aa9b4004ae3a6", 
        "branchName": "master", 
        "date": "Feb 9, 2017 3:27:05 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/fb9016f48e167c188c604492befa23560173be7e", 
        "sha": "fb9016f48e167c188c604492befa23560173be7e", 
        "branchName": "master", 
        "date": "Feb 9, 2017 2:23:49 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-199972949-199993301", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 1
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_38", 
    "diff": "diff --git a/src/main/java/spoon/support/reflect/code/CtLambdaImpl.java b/src/main/java/spoon/support/reflect/code/CtLambdaImpl.java\nindex cc74f8c..b52bf81 100644\n--- a/src/main/java/spoon/support/reflect/code/CtLambdaImpl.java\n+++ b/src/main/java/spoon/support/reflect/code/CtLambdaImpl.java\n@@ -109,7 +109,7 @@ public class CtLambdaImpl<T> extends CtExpressionImpl<T> implements CtLambda<T>\n \t\t\tlambdaExecutableMethod = lambdaTypeMethods.iterator().next();\n \t\t} else {\n \t\t\tfor (CtMethod<?> method : lambdaTypeMethods) {\n-\t\t\t\tif (method.isDefaultMethod() || method.hasModifier(ModifierKind.PRIVATE)) {\n+\t\t\t\tif (method.isDefaultMethod() || method.hasModifier(ModifierKind.PRIVATE) || method.hasModifier(ModifierKind.STATIC)) {\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n \t\t\t\tif (lambdaExecutableMethod != null) {\n", 
    "projectMetrics": {
      "numberSourceFiles": 461, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 471, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 188174168, 
        "hostName": "local", 
        "totalMemory": 247988224, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:18:36 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/199972949/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            85
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 85
        }, 
        "testing": {
          "stepDurations": [
            273
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 273
        }, 
        "cloning": {
          "stepDurations": [
            17
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 17
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:06:02 AM", 
      "totalDuration": 746
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1023, 
        "numberRunning": 1028, 
        "numberFailing": 4, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "spoon.SpoonException", 
            "isError": true, 
            "occurrences": 1
          }, 
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 4
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/199993301", 
      "failingClasses": [
        {
          "numberPassing": 3, 
          "numberRunning": 7, 
          "testClass": "spoon.test.query_function.VariableReferencesTest", 
          "numberFailing": 3, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 9, 
          "numberRunning": 10, 
          "testClass": "spoon.test.reference.VariableAccessTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testVariableReferenceFunction", 
          "testClass": "spoon.test.query_function.VariableReferencesTest", 
          "detail": "Test failed on VariableReferencesModelTest#localVarsInFor", 
          "isError": false
        }, 
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testReferencesInInitExpression", 
          "testClass": "spoon.test.reference.VariableAccessTest", 
          "detail": "expected:<1> but was:<0>", 
          "isError": false
        }, 
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testLocalVariableReferenceDeclarationFunction", 
          "testClass": "spoon.test.query_function.VariableReferencesTest", 
          "detail": "CtLocalVariableReference#getDeclaration returned wrong declaration in VariableReferencesModelTest#localVarInNestedClass expected:<23> but was:<25>", 
          "isError": false
        }, 
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testLocalVariableReferenceFunction", 
          "testClass": "spoon.test.query_function.VariableReferencesTest", 
          "detail": "Test failed on VariableReferencesModelTest#localVarsInFor", 
          "isError": false
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "testMethod": "testVariableScopeFunction", 
          "testClass": "spoon.test.query_function.VariableReferencesTest", 
          "detail": "Cannot found index of local variable declaration int field = 10 in statement list {\n    for (int field = 10; field == 10;) {\n        org.junit.Assert.assertTrue((field == 10));\n        break;\n    }\n    int field = 11;\n    org.junit.Assert.assertTrue((field == 11));\n}", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/200108848", 
        "date": "Feb 9, 2017 9:06:23 PM", 
        "id": 200108848
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/199993301", 
        "date": "Feb 9, 2017 3:35:45 PM", 
        "id": 199993301
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/05592e51945eb22dd570955c33c83a01d757bac8", 
        "sha": "05592e51945eb22dd570955c33c83a01d757bac8", 
        "branchName": "master", 
        "date": "Feb 9, 2017 8:53:14 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/b63ac185bb5c83b60f1c1bdbc10aa9b4004ae3a6", 
        "sha": "b63ac185bb5c83b60f1c1bdbc10aa9b4004ae3a6", 
        "branchName": "master", 
        "date": "Feb 9, 2017 3:27:05 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-199993301-200108848", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 463, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 473, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 2
      }, 
      "lines": {
        "numberAdded": 106, 
        "numberDeleted": 224
      }
    }, 
    "bugId": "Bears_39", 
    "diff": "diff --git a/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java b/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java\nindex d11477e..2c64708 100644\n--- a/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java\n+++ b/src/main/java/spoon/reflect/visitor/filter/LocalVariableReferenceFunction.java\n@@ -17,7 +17,10 @@\n package spoon.reflect.visitor.filter;\r\n \r\n import spoon.reflect.code.CtLocalVariable;\r\n+import spoon.reflect.declaration.CtElement;\r\n+import spoon.reflect.declaration.CtType;\r\n import spoon.reflect.reference.CtLocalVariableReference;\r\n+import spoon.reflect.visitor.Filter;\r\n import spoon.reflect.visitor.chain.CtConsumableFunction;\r\n import spoon.reflect.visitor.chain.CtConsumer;\r\n \r\n@@ -40,10 +43,35 @@ public class LocalVariableReferenceFunction implements CtConsumableFunction<CtLo\n \t}\r\n \r\n \t@Override\r\n-\tpublic void apply(CtLocalVariable<?> localVariable, CtConsumer<Object> outputConsumer) {\r\n+\tpublic void apply(final CtLocalVariable<?> localVariable, CtConsumer<Object> outputConsumer) {\r\n+\t\tfinal String simpleName = localVariable.getSimpleName();\r\n+\t\tclass Context {\r\n+\t\t\tboolean hasLocalType = false;\r\n+\t\t}\r\n+\t\tfinal Context context = new Context();\r\n \t\tlocalVariable\r\n \t\t\t.map(new LocalVariableScopeFunction())\r\n-\t\t\t.select(new DirectReferenceFilter<CtLocalVariableReference<?>>(localVariable.getReference()))\r\n+\t\t\t.select(new Filter<CtElement>() {\r\n+\t\t\t\t@Override\r\n+\t\t\t\tpublic boolean matches(CtElement element) {\r\n+\t\t\t\t\tif (element instanceof CtType) {\r\n+\t\t\t\t\t\tcontext.hasLocalType = true;\r\n+\t\t\t\t\t} else if (element instanceof CtLocalVariableReference<?>) {\r\n+\t\t\t\t\t\tCtLocalVariableReference<?> localVarRef = (CtLocalVariableReference<?>) element;\r\n+\t\t\t\t\t\tif (simpleName.equals(localVarRef.getSimpleName())) {\r\n+\t\t\t\t\t\t\t//we have found a variable reference in visibility scope of localVariable\r\n+\t\t\t\t\t\t\tif (context.hasLocalType) {\r\n+\t\t\t\t\t\t\t\t//there exists a local type in visibility scope of this variable declaration\r\n+\t\t\t\t\t\t\t\t//the variable declarations in scope of this local class may shadow input localVariable\r\n+\t\t\t\t\t\t\t\t//so finally check that there is no other localVariable, which shadows the input localVariable\r\n+\t\t\t\t\t\t\t\treturn localVariable == localVarRef.getDeclaration();\r\n+\t\t\t\t\t\t\t}\r\n+\t\t\t\t\t\t\treturn true;\r\n+\t\t\t\t\t\t}\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\treturn false;\r\n+\t\t\t\t}\r\n+\t\t\t})\r\n \t\t\t.forEach(outputConsumer);\r\n \t}\r\n }\r\ndiff --git a/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java b/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java\nindex f72fab4..1c2cfc8 100644\n--- a/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java\n+++ b/src/main/java/spoon/reflect/visitor/filter/LocalVariableScopeFunction.java\n@@ -16,15 +16,9 @@\n  */\r\n package spoon.reflect.visitor.filter;\r\n \r\n-import java.util.List;\r\n-\r\n-import spoon.SpoonException;\r\n import spoon.reflect.code.CtLocalVariable;\r\n-import spoon.reflect.code.CtStatement;\r\n-import spoon.reflect.code.CtStatementList;\r\n import spoon.reflect.visitor.chain.CtConsumableFunction;\r\n import spoon.reflect.visitor.chain.CtConsumer;\r\n-import spoon.reflect.visitor.chain.CtQuery;\r\n \r\n /**\r\n  * This Query expects a {@link CtLocalVariable} as input\r\n@@ -50,22 +44,6 @@ public class LocalVariableScopeFunction implements CtConsumableFunction<CtLocalV\n \r\n \t@Override\r\n \tpublic void apply(CtLocalVariable<?> localVariable, CtConsumer<Object> outputConsumer) {\r\n-\t\tCtStatementList statements = localVariable.getParent(CtStatementList.class);\r\n-\t\tif (statements == null) {\r\n-\t\t\t//cannot search for variable references of variable which has no parent statement list/block\r\n-\t\t\treturn;\r\n-\t\t}\r\n-\t\t//create query which will be evaluated on each statement after local variable declaration\r\n-\t\tCtQuery query = localVariable.getFactory().createQuery().filterChildren(null);\r\n-\t\tList<CtStatement> stats = statements.getStatements();\r\n-\t\t//search for variable declaration in statements of current block\r\n-\t\tint idxOfVar = stats.indexOf(localVariable);\r\n-\t\tif (idxOfVar < 0) {\r\n-\t\t\tthrow new SpoonException(\"Cannot found index of local variable declaration \" + localVariable + \" in statement list \" + statements);\r\n-\t\t}\r\n-\t\t//scan only all elements AFTER this variable declaration\r\n-\t\tfor (int i = idxOfVar + 1; i < stats.size(); i++) {\r\n-\t\t\tquery.setInput(stats.get(i)).forEach(outputConsumer);\r\n-\t\t}\r\n+\t\tlocalVariable.map(new SiblingsFunction().mode(SiblingsFunction.Mode.NEXT).includingSelf(true)).filterChildren(null).forEach(outputConsumer);\r\n \t}\r\n }\r\ndiff --git a/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java b/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java\nnew file mode 100644\nindex 0000000..12d93e4\n--- /dev/null\n+++ b/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java\n@@ -0,0 +1,112 @@\n+/**\r\n+ * Copyright (C) 2006-2017 INRIA and contributors\r\n+ * Spoon - http://spoon.gforge.inria.fr/\r\n+ *\r\n+ * This software is governed by the CeCILL-C License under French law and\r\n+ * abiding by the rules of distribution of free software. You can use, modify\r\n+ * and/or redistribute the software under the terms of the CeCILL-C license as\r\n+ * circulated by CEA, CNRS and INRIA at http://www.cecill.info.\r\n+ *\r\n+ * This program is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.\r\n+ *\r\n+ * The fact that you are presently reading this means that you have had\r\n+ * knowledge of the CeCILL-C license and that you accept its terms.\r\n+ */\r\n+package spoon.reflect.visitor.filter;\r\n+\r\n+import java.util.Collection;\r\n+\r\n+import spoon.reflect.code.CtBodyHolder;\r\n+import spoon.reflect.code.CtCatch;\r\n+import spoon.reflect.code.CtStatementList;\r\n+import spoon.reflect.declaration.CtElement;\r\n+import spoon.reflect.declaration.CtExecutable;\r\n+import spoon.reflect.declaration.CtField;\r\n+import spoon.reflect.declaration.CtPackage;\r\n+import spoon.reflect.declaration.CtParameter;\r\n+import spoon.reflect.declaration.CtType;\r\n+import spoon.reflect.reference.CtFieldReference;\r\n+import spoon.reflect.reference.CtVariableReference;\r\n+import spoon.reflect.visitor.chain.CtConsumableFunction;\r\n+import spoon.reflect.visitor.chain.CtConsumer;\r\n+import spoon.reflect.visitor.chain.CtQuery;\r\n+\r\n+/**\r\n+ * This Query expects a {@link CtVariableReference}, which represents reference to an variable, as input\r\n+ * and returns all {@link CtElement} instances, which might be a declaration of that variable reference\r\n+ * <br>\r\n+ * In other words, it returns all elements,\r\n+ * which might be declaration of input variable reference.\r\n+ * <br>\r\n+ * It returns {@link CtParameter} instances from methods, lambdas and catch blocks.\r\n+ * It returns {@link CtField} instances from wrapping classes and their super classes too.\r\n+ * <br>\r\n+ * The elements are visited in defined order. First are elements from nearest parent blocks,\r\n+ * then fields of wrapping classes, then fields of super classes, etc.\r\n+ * <br>\r\n+ * It can be used to search for variable declarations of\r\n+ * variable references and for detection of variable name conflicts\r\n+ * <br>\r\n+ * Usage:<br>\r\n+ * <pre> {@code\r\n+ * CtVariableReference varRef = ...;\r\n+ * varRef.map(new PotentialVariableDeclarationFunction()).forEach(...process result...);\r\n+ * }\r\n+ * </pre>\r\n+ */\r\n+public class PotentialVariableDeclarationFunction implements CtConsumableFunction<CtElement> {\r\n+\r\n+\tprivate boolean includingFields = true;\r\n+\r\n+\tpublic PotentialVariableDeclarationFunction() {\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void apply(CtElement input, CtConsumer<Object> outputConsumer) {\r\n+\t\t//Search previous siblings for element which may represents the declaration of this local variable\r\n+\t\tCtQuery siblingsQuery = input.getFactory().createQuery().map(new SiblingsFunction().mode(SiblingsFunction.Mode.PREVIOUS));\r\n+\r\n+\t\tCtElement scopeElement = input;\r\n+\t\t//Search input and then all parents until first CtPackage for element which may represents the declaration of this local variable\r\n+\t\twhile (scopeElement != null && !(scopeElement instanceof CtPackage)) {\r\n+\t\t\tCtElement parent = scopeElement.getParent();\r\n+\t\t\tif (parent instanceof CtType<?>) {\r\n+\t\t\t\tif (includingFields) {\r\n+\t\t\t\t\t//TODO replace getAllFields() followed by getFieldDeclaration, by direct visiting of fields of types in super classes.\r\n+\t\t\t\t\tCollection<CtFieldReference<?>> allFields = ((CtType<?>) parent).getAllFields();\r\n+\t\t\t\t\tfor (CtFieldReference<?> fieldReference : allFields) {\r\n+\t\t\t\t\t\toutputConsumer.accept(fieldReference.getFieldDeclaration());\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t} else if (parent instanceof CtBodyHolder || parent instanceof CtStatementList) {\r\n+\t\t\t\t//visit all previous siblings of scopeElement element in parent BodyHolder or Statement list\r\n+\t\t\t\tsiblingsQuery.setInput(scopeElement).forEach(outputConsumer);\r\n+\t\t\t\t//visit parameters of CtCatch and CtExecutable (method, lambda)\r\n+\t\t\t\tif (parent instanceof CtCatch) {\r\n+\t\t\t\t\tCtCatch ctCatch = (CtCatch) parent;\r\n+\t\t\t\t\toutputConsumer.accept(ctCatch.getParameter());\r\n+\t\t\t\t} else if (parent instanceof CtExecutable) {\r\n+\t\t\t\t\tCtExecutable<?> exec = (CtExecutable<?>) parent;\r\n+\t\t\t\t\tfor (CtParameter<?> param : exec.getParameters()) {\r\n+\t\t\t\t\t\toutputConsumer.accept(param);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t\tscopeElement = parent;\r\n+\t\t}\r\n+\t}\r\n+\r\n+\tpublic boolean isIncludingFields() {\r\n+\t\treturn includingFields;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @param includingFields if true then CtFields of wrapping class and all super classes are returned too\r\n+\t */\r\n+\tpublic PotentialVariableDeclarationFunction includingFields(boolean includingFields) {\r\n+\t\tthis.includingFields = includingFields;\r\n+\t\treturn this;\r\n+\t}\r\n+}\r\ndiff --git a/src/main/java/spoon/reflect/visitor/filter/SiblingsFunction.java b/src/main/java/spoon/reflect/visitor/filter/SiblingsFunction.java\nnew file mode 100644\nindex 0000000..5075246\n--- /dev/null\n+++ b/src/main/java/spoon/reflect/visitor/filter/SiblingsFunction.java\n@@ -0,0 +1,90 @@\n+/**\r\n+ * Copyright (C) 2006-2017 INRIA and contributors\r\n+ * Spoon - http://spoon.gforge.inria.fr/\r\n+ *\r\n+ * This software is governed by the CeCILL-C License under French law and\r\n+ * abiding by the rules of distribution of free software. You can use, modify\r\n+ * and/or redistribute the software under the terms of the CeCILL-C license as\r\n+ * circulated by CEA, CNRS and INRIA at http://www.cecill.info.\r\n+ *\r\n+ * This program is distributed in the hope that it will be useful, but WITHOUT\r\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\r\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the CeCILL-C License for more details.\r\n+ *\r\n+ * The fact that you are presently reading this means that you have had\r\n+ * knowledge of the CeCILL-C license and that you accept its terms.\r\n+ */\r\n+package spoon.reflect.visitor.filter;\r\n+\r\n+import spoon.reflect.declaration.CtElement;\r\n+import spoon.reflect.visitor.CtScanner;\r\n+import spoon.reflect.visitor.chain.CtConsumableFunction;\r\n+import spoon.reflect.visitor.chain.CtConsumer;\r\n+\r\n+/**\r\n+ * visits siblings of input element.\r\n+ * The sibling is the element whose sibling.getParent()==input.getParent()\r\n+ * <br>\r\n+ * The siblings are visited in order in which they would be visited by CtScanner.\r\n+ * The input element is by default not visited. But if {@link #includingSelf(boolean)} is called with value true,\r\n+ * then input element is visited too in the order in which CtScanner would visit it.\r\n+ *\r\n+ *  The visiting order is relevant, because this scanner is used for example resolve local variable declarations.\r\n+ */\r\n+public class SiblingsFunction implements CtConsumableFunction<CtElement> {\r\n+\r\n+\t/**\r\n+\t * Defines visiting mode\r\n+\t */\r\n+\tpublic enum Mode {\r\n+\t\tALL,\t//all siblings are visited\r\n+\t\tPREVIOUS, //only previous siblings of input element\r\n+\t\tNEXT\t//only next siblings of input element\r\n+\t}\r\n+\r\n+\tprivate Mode mode = Mode.ALL;\r\n+\tprivate boolean includingSelf = false;\r\n+\r\n+\tpublic SiblingsFunction() {\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @param includingSelf if false then input element is not visited\r\n+\t */\r\n+\tpublic SiblingsFunction includingSelf(boolean includingSelf) {\r\n+\t\tthis.includingSelf = includingSelf;\r\n+\t\treturn this;\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @param mode defines which siblings will be visited. See {@link Mode} for possible values\r\n+\t */\r\n+\tpublic SiblingsFunction mode(Mode mode) {\r\n+\t\tthis.mode = mode;\r\n+\t\treturn this;\r\n+\t}\r\n+\r\n+\t@Override\r\n+\tpublic void apply(final CtElement input, final CtConsumer<Object> outputConsumer) {\r\n+\t\tfinal CtElement parent = input.getParent();\r\n+\t\tparent.accept(new CtScanner() {\r\n+\t\t\tboolean hasVisitedInput = false;\r\n+\t\t\tboolean visitPrev = mode == Mode.ALL || mode == Mode.PREVIOUS;\r\n+\t\t\tboolean visitNext = mode == Mode.ALL || mode == Mode.NEXT;\r\n+\t\t\t@Override\r\n+\t\t\tpublic void scan(CtElement element) {\r\n+\t\t\t\tif (element != null && element.getParent() == parent) {\r\n+\t\t\t\t\t//visit only elements whose parent is same\r\n+\t\t\t\t\tboolean canVisit = hasVisitedInput ? visitNext : visitPrev;\r\n+\t\t\t\t\tif (input == element) {\r\n+\t\t\t\t\t\thasVisitedInput = true;\r\n+\t\t\t\t\t\tcanVisit = includingSelf;\r\n+\t\t\t\t\t}\r\n+\t\t\t\t\tif (canVisit) {\r\n+\t\t\t\t\t\toutputConsumer.accept(element);\r\n+\t\t\t\t\t}\r\n+\t\t\t\t}\r\n+\t\t\t}\r\n+\t\t});\r\n+\t}\r\n+}\r\ndiff --git a/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java\nindex 6711d33..3bd5259 100644\n--- a/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java\n+++ b/src/main/java/spoon/support/reflect/reference/CtLocalVariableReferenceImpl.java\n@@ -17,15 +17,13 @@\n package spoon.support.reflect.reference;\n \n import spoon.reflect.code.CtLocalVariable;\n-import spoon.reflect.declaration.CtElement;\n-import spoon.reflect.declaration.CtPackage;\n+import spoon.reflect.declaration.CtVariable;\n import spoon.reflect.declaration.ParentNotInitializedException;\n import spoon.reflect.factory.Factory;\n import spoon.reflect.reference.CtLocalVariableReference;\n import spoon.reflect.visitor.CtVisitor;\n-import spoon.reflect.visitor.filter.AbstractFilter;\n-\n-import java.util.List;\n+import spoon.reflect.visitor.Filter;\n+import spoon.reflect.visitor.filter.PotentialVariableDeclarationFunction;\n \n /**\n  * An implementation for {@link CtLocalVariableReference}.\n@@ -50,6 +48,7 @@ public class CtLocalVariableReferenceImpl<T>\n \t\tvisitor.visitCtLocalVariableReference(this);\n \t}\n \n+\t@SuppressWarnings(\"unchecked\")\n \t@Override\n \tpublic CtLocalVariable<T> getDeclaration() {\n \t\t// without a factory, we are not able to filter for local variables\n@@ -57,30 +56,35 @@ public class CtLocalVariableReferenceImpl<T>\n \t\tif (factory == null) {\n \t\t\treturn null;\n \t\t}\n-\t\tfinal SimpleNameFilter filter = new SimpleNameFilter();\n \n-\t\t// successively iterate through all parents of this reference and\n-\t\t// return first result (which must be the closest declaration\n-\t\t// respecting visible scope)\n+\t\tfinal String simpleName = getSimpleName();\n+\n+\t\t//handle the CtLocalVariableReference which were created by CtLocalVariable#getReference() and which are not yet part of model, so we cannot found them using standard rules\n+\t\tif (parent instanceof CtLocalVariable) {\n+\t\t\tCtLocalVariable<T> var = (CtLocalVariable<T>) parent;\n+\t\t\tif (simpleName.equals(var.getSimpleName())) {\n+\t\t\t\treturn var;\n+\t\t\t}\n+\t\t}\n \t\ttry {\n-\t\t\tCtElement parent = getParent();\n-\t\t\t// stop at `package` level to avoid lookups to foreign Java files\n-\t\t\twhile (parent != null && !(parent instanceof CtPackage)) {\n-\t\t\t\tfinal List<CtLocalVariable<T>> localVariables =\n-\t\t\t\t\t\tparent.getElements(filter);\n-\t\t\t\t// since `parent` may be a class declaring multiple local\n-\t\t\t\t// variables with same name in different methods, we have to\n-\t\t\t\t// check if any of the findings is visible in current scope by\n-\t\t\t\t// validating that the parent of a finding is parent of this\n-\t\t\t\t// reference as well\n-\t\t\t\tfor (final CtLocalVariable<T> lv : localVariables) {\n-\t\t\t\t\tif (getParent().equals(lv) || hasParent(lv.getParent())) {\n-\t\t\t\t\t\treturn lv;\n-\t\t\t\t\t}\n+\t\t\t// successively iterate through all parents of this reference and\n+\t\t\t// return first result (which must be the closest declaration\n+\t\t\t// respecting visible scope)\n+\t\t\tCtVariable<?> var = map(new PotentialVariableDeclarationFunction()).select(new Filter<CtVariable<?>>() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic boolean matches(CtVariable<?> var) {\n+\t\t\t\t\treturn simpleName.equals(var.getSimpleName());\n \t\t\t\t}\n-\t\t\t\tparent = parent.getParent();\n+\t\t\t}).first();\n+\t\t\tif (var instanceof CtLocalVariable) {\n+\t\t\t\treturn (CtLocalVariable<T>) var;\n \t\t\t}\n-\t\t} catch (final ParentNotInitializedException e) {\n+\t\t\tif (var != null) {\n+\t\t\t\t//we have found another variable declaration with same simple name, which hides declaration of this local variable reference\n+\t\t\t\t//handle it as not found\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t} catch (ParentNotInitializedException e) {\n \t\t\t// handle this case as 'not found'\n \t\t}\n \t\treturn null;\n@@ -90,22 +94,4 @@ public class CtLocalVariableReferenceImpl<T>\n \tpublic CtLocalVariableReference<T> clone() {\n \t\treturn (CtLocalVariableReference<T>) super.clone();\n \t}\n-\n-\t/**\n-\t * A {@link spoon.reflect.visitor.Filter} that filters all\n-\t * {@link CtLocalVariable}s with simple name equals to\n-\t * {@link #getSimpleName()}.\n-\t */\n-\tprivate final class SimpleNameFilter\n-\t\t\textends AbstractFilter<CtLocalVariable<T>> {\n-\n-\t\tSimpleNameFilter() {\n-\t\t\tsuper();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic boolean matches(final CtLocalVariable<T> element) {\n-\t\t\treturn element.getSimpleName().equals(getSimpleName());\n-\t\t}\n-\t}\n }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 128588560, 
        "hostName": "local", 
        "totalMemory": 274726912, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:18:45 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/199993301/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            85
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 85
        }, 
        "testing": {
          "stepDurations": [
            285
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 285
        }, 
        "cloning": {
          "stepDurations": [
            19
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 19
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 8:05:48 AM", 
      "totalDuration": 769
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1017, 
        "numberRunning": 1022, 
        "numberFailing": 1, 
        "numberErroring": 4, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }, 
          {
            "failureName": "spoon.SpoonException", 
            "isError": true, 
            "occurrences": 4
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/201940544", 
      "failureDetails": [
        {
          "failureName": "spoon.SpoonException", 
          "detail": "Cannot compute access path to type: spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface$NestedOfProtectedInterface in context of type: spoon.test.imports.testclasses.ClientClass$InnerClass5", 
          "isError": true, 
          "testMethod": "testSpoonWithImports", 
          "testClass": "spoon.test.imports.ImportTest"
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "detail": "spoon.SpoonException: Cannot compute access path to type: spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface$NestedOfProtectedInterface in context of type: spoon.test.imports.testclasses.ClientClass$InnerClass5", 
          "isError": true, 
          "testMethod": "testTest", 
          "testClass": "spoon.test.main.MainTest"
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "detail": "spoon.SpoonException: Cannot compute access path to type: spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface$NestedOfProtectedInterface in context of type: spoon.test.imports.testclasses.ClientClass$InnerClass5", 
          "isError": true, 
          "testMethod": "testImportOfAnInnerClassInASuperClassPackageAutoImport", 
          "testClass": "spoon.test.imports.ImportTest"
        }, 
        {
          "failureName": "spoon.SpoonException", 
          "detail": "spoon.SpoonException: Cannot compute access path to type: spoon.test.imports.testclasses.internal.SuperClass$ProtectedInterface$NestedOfProtectedInterface in context of type: spoon.test.imports.testclasses.ClientClass$InnerClass5", 
          "isError": true, 
          "testMethod": "testImportOfAnInnerClassInASuperClassPackageFullQualified", 
          "testClass": "spoon.test.imports.ImportTest"
        }, 
        {
          "failureName": "java.lang.AssertionError", 
          "detail": "ClientClass should have access to spoon.test.imports.testclasses.internal.PublicInterface2$NestedInterface but it has not", 
          "isError": false, 
          "testMethod": "testCanAccess", 
          "testClass": "spoon.test.imports.ImportTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 21, 
          "numberRunning": 25, 
          "testClass": "spoon.test.imports.ImportTest", 
          "numberFailing": 1, 
          "numberErroring": 3, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 5, 
          "numberRunning": 6, 
          "testClass": "spoon.test.main.MainTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/203101555", 
        "date": "Feb 19, 2017 8:42:14 AM", 
        "id": 203101555
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/201940544", 
        "date": "Feb 15, 2017 6:14:42 PM", 
        "id": 201940544
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/92cedf9af2909264092eff8d75069d74e9368ea6", 
        "sha": "92cedf9af2909264092eff8d75069d74e9368ea6", 
        "branchName": "master", 
        "date": "Feb 19, 2017 8:33:22 AM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/e5665b160f66a421bcf48c7625401a3d292bcb21", 
        "sha": "e5665b160f66a421bcf48c7625401a3d292bcb21", 
        "branchName": "master", 
        "date": "Feb 15, 2017 6:01:30 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-201940544-203101555", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 21, 
        "numberDeleted": 28
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_40", 
    "diff": "diff --git a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\nindex 95dfeb2..4d39fac 100644\n--- a/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\n+++ b/src/main/java/spoon/support/reflect/reference/CtTypeReferenceImpl.java\n@@ -264,6 +264,22 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \t\t}\n \t}\n \n+\t/**\n+\t * Detects if this type is an code responsible for implementing of that type.<br>\n+\t * In means it detects whether this type can access protected members of that type\n+\t * @return true if this type or any declaring type recursively is subtype of type or directly is the type.\n+\t */\n+\tprivate boolean isImplementationOf(CtTypeReference<?> type) {\n+\t\tCtTypeReference<?> impl = this;\n+\t\twhile (impl != null) {\n+\t\t\tif (impl.isSubtypeOf(type)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\timpl = impl.getDeclaringType();\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n \t@Override\n \tpublic <C extends CtActualTypeContainer> C setActualTypeArguments(List<? extends CtTypeReference<?>> actualTypeArguments) {\n \t\tif (actualTypeArguments == null || actualTypeArguments.isEmpty()) {\n@@ -621,21 +637,36 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (modifiers.contains(ModifierKind.PROTECTED)) {\n-\t\t\t\tif (isSubtypeOf(type)) {\n-\t\t\t\t\t//is visible in subtypes\n+\t\t\t\t//the accessed type is protected in scope of declaring type.\n+\t\t\t\tCtTypeReference<?> declaringType = type.getDeclaringType();\n+\t\t\t\tif (declaringType == null) {\n+\t\t\t\t\t//top level type cannot be protected. So this is a model inconsistency.\n+\t\t\t\t\tthrow new SpoonException(\"The protected class \" + type.getQualifiedName() + \" has no declaring class.\");\n+\t\t\t\t}\n+\t\t\t\tif (isImplementationOf(declaringType)) {\n+\t\t\t\t\t//type is visible in code which implements declaringType\n \t\t\t\t\treturn true;\n \t\t\t\t} //else it is visible in same package, like package protected\n+\t\t\t\treturn isInSamePackage(type);\n \t\t\t}\n \t\t\tif (modifiers.contains(ModifierKind.PRIVATE)) {\n \t\t\t\t//it is visible in scope of the same class only\n \t\t\t\treturn type.getTopLevelType().getQualifiedName().equals(this.getTopLevelType().getQualifiedName());\n \t\t\t}\n-\t\t\t//package protected\n-\t\t\tif (type.getTopLevelType().getPackage().getSimpleName().equals(this.getTopLevelType().getPackage().getSimpleName())) {\n-\t\t\t\t//visible only in scope of the same package\n+\t\t\t/*\n+\t\t\t * no modifier, we have to check if it is nested type and if yes, if parent is interface or class.\n+\t\t\t * In case of no parent then implicit access is package protected\n+\t\t\t * In case of parent is interface, then implicit access is PUBLIC\n+\t\t\t * In case of parent is class, then implicit access is package protected\n+\t\t\t */\n+\t\t\tCtTypeReference<?> declaringTypeRef = type.getDeclaringType();\n+\t\t\tif (declaringTypeRef != null && declaringTypeRef.isInterface()) {\n+\t\t\t\t//the declaring type is interface, then implicit access is PUBLIC\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\treturn false;\n+\t\t\t//package protected\n+\t\t\t//visible only in scope of the same package\n+\t\t\treturn isInSamePackage(type);\n \t\t} catch (SpoonClassNotFoundException e) {\n \t\t\thandleParentNotFound(e);\n \t\t\t//if the modifiers cannot be resolved then we expect that it is visible\n@@ -643,6 +674,10 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \t\t}\n \t}\n \n+\tprivate boolean isInSamePackage(CtTypeReference<?> type) {\n+\t\treturn type.getTopLevelType().getPackage().getSimpleName().equals(this.getTopLevelType().getPackage().getSimpleName());\n+\t}\n+\n \t@Override\n \tpublic CtTypeReference<?> getTopLevelType() {\n \t\tCtTypeReference<?> type = this;\n@@ -659,7 +694,7 @@ public class CtTypeReferenceImpl<T> extends CtReferenceImpl implements CtTypeRef\n \tpublic CtTypeReference<?> getAccessType() {\n \t\tCtTypeReference<?> declType = this.getDeclaringType();\n \t\tif (declType == null) {\n-\t\t\tthrow new SpoonException(\"The nestedType is expected, but it is: \" + getQualifiedName());\n+\t\t\tthrow new SpoonException(\"The declaring type is expected, but \" + getQualifiedName() + \" is top level type\");\n \t\t}\n \t\tCtType<?> contextType = getParent(CtType.class);\n \t\tif (contextType == null) {\n", 
    "projectMetrics": {
      "numberSourceFiles": 463, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 469, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 101301248, 
        "hostName": "local", 
        "totalMemory": 296222720, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 8:05:21 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/201940544/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            69
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 70
        }, 
        "testing": {
          "stepDurations": [
            259
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 259
        }, 
        "cloning": {
          "stepDurations": [
            20
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 20
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:53:35 AM", 
      "totalDuration": 700
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1021, 
        "numberRunning": 1024, 
        "numberFailing": 3, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "org.junit.ComparisonFailure", 
            "isError": false, 
            "occurrences": 3
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/204567691", 
      "failingClasses": [
        {
          "numberPassing": 6, 
          "numberRunning": 7, 
          "testClass": "spoon.test.constructorcallnewclass.NewClassTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 11, 
          "numberRunning": 12, 
          "testClass": "spoon.test.type.TypeTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "spoon.test.arrays.ArraysTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "org.junit.ComparisonFailure", 
          "testMethod": "test", 
          "testClass": "spoon.test.type.TypeTest", 
          "detail": "expected:<[android.content.]DialogInterface$OnCl...> but was:<[]DialogInterface$OnCl...>", 
          "isError": false
        }, 
        {
          "failureName": "org.junit.ComparisonFailure", 
          "testMethod": "testInitializeWithNewArray", 
          "testClass": "spoon.test.arrays.ArraysTest", 
          "detail": "expected:<new [com.example.]Type[list.size()]> but was:<new []Type[list.size()]>", 
          "isError": false
        }, 
        {
          "failureName": "org.junit.ComparisonFailure", 
          "testMethod": "testCtNewClassInNoClasspath", 
          "testClass": "spoon.test.constructorcallnewclass.NewClassTest", 
          "detail": "expected:<[org.apache.lucene.store.]Lock$With> but was:<[]Lock$With>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/207361743", 
        "date": "Mar 3, 2017 2:53:53 PM", 
        "id": 207361743
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/204567691", 
        "date": "Feb 23, 2017 1:46:32 PM", 
        "id": 204567691
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/6433c2c6641e4e3eb172d04cb39ac5373b38ed74", 
        "sha": "6433c2c6641e4e3eb172d04cb39ac5373b38ed74", 
        "branchName": "master", 
        "date": "Mar 3, 2017 2:44:31 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/e7acf58718e88be92e7a50531510a152df03504d", 
        "sha": "e7acf58718e88be92e7a50531510a152df03504d", 
        "branchName": "master", 
        "date": "Feb 23, 2017 1:26:35 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-204567691-207361743", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 463, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 469, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 5, 
        "numberDeleted": 7
      }
    }, 
    "bugId": "Bears_41", 
    "diff": "diff --git a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\nindex 41a22b3..58f0d86 100644\n--- a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\n+++ b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\n@@ -84,6 +84,7 @@ import spoon.reflect.code.CtLambda;\n import spoon.reflect.declaration.CtPackage;\n import spoon.reflect.declaration.CtParameter;\n import spoon.reflect.declaration.ModifierKind;\n+import spoon.reflect.factory.PackageFactory;\n import spoon.reflect.reference.CtArrayTypeReference;\n import spoon.reflect.reference.CtCatchVariableReference;\n import spoon.reflect.reference.CtExecutableReference;\n@@ -532,10 +533,11 @@ public class ReferenceBuilder {\n \t\tif (res == null) {\n \t\t\treturn this.jdtTreeBuilder.getFactory().Type().createReference(CharOperation.toString(ref.getParameterizedTypeName()));\n \t\t}\n-\t\tCtPackageReference packageReference = index >= 0\n-\t\t\t\t? this.jdtTreeBuilder.getFactory().Package().getOrCreate(concatSubArray(namesParameterized, index)).getReference()\n-\t\t\t\t: this.jdtTreeBuilder.getFactory().Package().topLevel();\n-\t\tinner.setPackage(packageReference);\n+\t\tif (inner.getPackage() == null) {\n+\t\t\tPackageFactory packageFactory = this.jdtTreeBuilder.getFactory().Package();\n+\t\t\tCtPackageReference packageReference = index >= 0 ? packageFactory.getOrCreate(concatSubArray(namesParameterized, index)).getReference() : packageFactory.topLevel();\n+\t\t\tinner.setPackage(packageReference);\n+\t\t}\n \t\treturn res;\n \t}\n \n@@ -572,6 +574,8 @@ public class ReferenceBuilder {\n \t\t} else if (Character.isUpperCase(name.charAt(0))) {\n \t\t\tmain = this.jdtTreeBuilder.getFactory().Core().createTypeReference();\n \t\t\tmain.setSimpleName(name);\n+\t\t\tfinal CtReference declaring = this.getDeclaringReferenceFromImports(name.toCharArray());\n+\t\t\tsetPackageOrDeclaringType(main, declaring);\n \t\t} else if (name.startsWith(\"?\")) {\n \t\t\treturn (CtTypeReference) this.jdtTreeBuilder.getFactory().Core().createWildcardReference();\n \t\t}\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 164877992, 
        "hostName": "local", 
        "totalMemory": 247463936, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:52:52 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/204567691/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            80
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 81
        }, 
        "testing": {
          "stepDurations": [
            282
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 282
        }, 
        "cloning": {
          "stepDurations": [
            20
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 20
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:40:15 AM", 
      "totalDuration": 751
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1026, 
        "numberRunning": 1027, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "spoon.reflect.declaration.ParentNotInitializedException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/210079209", 
      "failureDetails": [
        {
          "failureName": "spoon.reflect.declaration.ParentNotInitializedException", 
          "detail": "parent not initialized for class spoon.support.reflect.code.CtInvocationImpl (unknown file)", 
          "isError": true, 
          "testMethod": "testPrintCtFieldAccessWorkEvenWhenParentNotInitialized", 
          "testClass": "spoon.test.prettyprinter.QualifiedThisRefTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 3, 
          "testClass": "spoon.test.prettyprinter.QualifiedThisRefTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/210080599", 
        "date": "Mar 11, 2017 5:48:52 PM", 
        "id": 210080599
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/210079209", 
        "date": "Mar 11, 2017 5:40:40 PM", 
        "id": 210079209
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/6d7af94b1e5cd9295c379ecfa886cacd97af7a9a", 
        "sha": "6d7af94b1e5cd9295c379ecfa886cacd97af7a9a", 
        "branchName": "master", 
        "date": "Mar 11, 2017 5:40:44 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/24ccd7213761c97d2de8586a48cc49c500ffd740", 
        "sha": "24ccd7213761c97d2de8586a48cc49c500ffd740", 
        "branchName": "master", 
        "date": "Mar 11, 2017 5:32:15 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-210079209-210080599", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 1
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_42", 
    "diff": "diff --git a/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java b/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java\nindex 12d93e4..842b070 100644\n--- a/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java\n+++ b/src/main/java/spoon/reflect/visitor/filter/PotentialVariableDeclarationFunction.java\n@@ -70,7 +70,7 @@ public class PotentialVariableDeclarationFunction implements CtConsumableFunctio\n \r\n \t\tCtElement scopeElement = input;\r\n \t\t//Search input and then all parents until first CtPackage for element which may represents the declaration of this local variable\r\n-\t\twhile (scopeElement != null && !(scopeElement instanceof CtPackage)) {\r\n+\t\twhile (scopeElement != null && !(scopeElement instanceof CtPackage) && scopeElement.isParentInitialized()) {\r\n \t\t\tCtElement parent = scopeElement.getParent();\r\n \t\t\tif (parent instanceof CtType<?>) {\r\n \t\t\t\tif (includingFields) {\r\n", 
    "projectMetrics": {
      "numberSourceFiles": 469, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 469, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 175543448, 
        "hostName": "local", 
        "totalMemory": 251658240, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:38:20 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/210079209/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            74
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 74
        }, 
        "testing": {
          "stepDurations": [
            202
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 202
        }, 
        "cloning": {
          "stepDurations": [
            21
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 21
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:29:54 AM", 
      "totalDuration": 498
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1026, 
        "numberRunning": 1028, 
        "numberFailing": 2, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 2
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/211086222", 
      "failingClasses": [
        {
          "numberPassing": 37, 
          "numberRunning": 39, 
          "testClass": "spoon.test.filters.FilterTest", 
          "numberFailing": 2, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testOverridingMethodFromSubClassOfAbstractClass", 
          "testClass": "spoon.test.filters.FilterTest", 
          "detail": "expected:<3> but was:<2>", 
          "isError": false
        }, 
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testOverridingMethodFromSubClassOfInterface", 
          "testClass": "spoon.test.filters.FilterTest", 
          "detail": "expected:<1> but was:<0>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/211090498", 
        "date": "Mar 14, 2017 9:12:55 PM", 
        "id": 211090498
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/211086222", 
        "date": "Mar 14, 2017 9:01:01 PM", 
        "id": 211086222
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/286e6e993ab642e2e4331ba4573eadab5ca12b1c", 
        "sha": "286e6e993ab642e2e4331ba4573eadab5ca12b1c", 
        "branchName": "master", 
        "date": "Mar 14, 2017 9:04:50 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/f87ba4fe585aa93f9ec950b08179b5a1411e1e28", 
        "sha": "f87ba4fe585aa93f9ec950b08179b5a1411e1e28", 
        "branchName": "master", 
        "date": "Mar 14, 2017 8:53:04 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-211086222-211090498", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 469, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 470, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 5, 
        "numberDeleted": 1
      }
    }, 
    "bugId": "Bears_43", 
    "diff": "diff --git a/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java\nindex 68438c4..bad7238 100644\n--- a/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java\n+++ b/src/main/java/spoon/support/reflect/reference/CtExecutableReferenceImpl.java\n@@ -236,11 +236,7 @@ public class CtExecutableReferenceImpl<T> extends CtReferenceImpl implements CtE\n \t\tif (!isSame) {\n \t\t\treturn false;\n \t\t}\n-\t\tif (getDeclaringType().isAnonymous()) {\n-\t\t\tif (!getDeclaringType().getDeclaringType().isSubtypeOf(executable.getDeclaringType())) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t} else if (!getDeclaringType().isSubtypeOf(executable.getDeclaringType())) {\n+\t\tif (!getDeclaringType().isSubtypeOf(executable.getDeclaringType())) {\n \t\t\treturn false;\n \t\t}\n \t\treturn true;\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 144297976, 
        "hostName": "local", 
        "totalMemory": 285212672, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:36:50 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/211086222/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            67
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 67
        }, 
        "testing": {
          "stepDurations": [
            181
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 181
        }, 
        "cloning": {
          "stepDurations": [
            21
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 21
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:28:11 AM", 
      "totalDuration": 511
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1028, 
        "numberRunning": 1029, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/211090498", 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "isError": false, 
          "testClass": "spoon.test.ctBlock.TestCtBlock", 
          "testMethod": "testRemoveStatement"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "spoon.test.ctBlock.TestCtBlock", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/211342085", 
        "date": "Mar 15, 2017 2:22:34 PM", 
        "id": 211342085
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/211090498", 
        "date": "Mar 14, 2017 9:12:55 PM", 
        "id": 211090498
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/561853c421c1e8fc6b3cdd3b3837bf8c2940020a", 
        "sha": "561853c421c1e8fc6b3cdd3b3837bf8c2940020a", 
        "branchName": "master", 
        "date": "Mar 15, 2017 2:13:01 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/286e6e993ab642e2e4331ba4573eadab5ca12b1c", 
        "sha": "286e6e993ab642e2e4331ba4573eadab5ca12b1c", 
        "branchName": "master", 
        "date": "Mar 14, 2017 9:04:50 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-211090498-211342085", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 17, 
        "numberDeleted": 1
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_44", 
    "diff": "diff --git a/src/main/java/spoon/support/reflect/code/CtBlockImpl.java b/src/main/java/spoon/support/reflect/code/CtBlockImpl.java\nindex 1e289a5..64700e7 100644\n--- a/src/main/java/spoon/support/reflect/code/CtBlockImpl.java\n+++ b/src/main/java/spoon/support/reflect/code/CtBlockImpl.java\n@@ -190,7 +190,23 @@ public class CtBlockImpl<R> extends CtStatementImpl implements CtBlock<R> {\n \t@Override\n \tpublic void removeStatement(CtStatement statement) {\n \t\tif (this.statements != CtElementImpl.<CtStatement>emptyList()) {\n-\t\t\tthis.statements.remove(statement);\n+\n+\t\t\tboolean hasBeenRemoved = false;\n+\t\t\t// we cannot use a remove(statement) as it uses the equals\n+\t\t\t// and a block can have twice exactly the same statement.\n+\t\t\tfor (int i = 0; i < this.statements.size(); i++) {\n+\t\t\t\tif (this.statements.get(i) == statement) {\n+\t\t\t\t\tthis.statements.remove(i);\n+\t\t\t\t\thasBeenRemoved = true;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\t// in case we use it with a statement manually built\n+\t\t\tif (!hasBeenRemoved) {\n+\t\t\t\tthis.statements.remove(statement);\n+\t\t\t}\n+\n \t\t\tif (isImplicit() && statements.size() == 0) {\n \t\t\t\tsetImplicit(false);\n \t\t\t}\n", 
    "projectMetrics": {
      "numberSourceFiles": 469, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 472, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 154958136, 
        "hostName": "local", 
        "totalMemory": 248512512, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:27:51 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/211090498/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            73
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 73
        }, 
        "testing": {
          "stepDurations": [
            193
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 193
        }, 
        "cloning": {
          "stepDurations": [
            19
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 19
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:19:52 AM", 
      "totalDuration": 474
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1029, 
        "numberRunning": 1031, 
        "numberFailing": 2, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "java.lang.AssertionError", 
            "isError": false, 
            "occurrences": 2
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/211342085", 
      "failingClasses": [
        {
          "numberPassing": 1, 
          "numberRunning": 2, 
          "testClass": "spoon.test.reference.CloneReferenceTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "spoon.test.field.FieldTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.AssertionError", 
          "testMethod": "testGetDefaultExpression", 
          "testClass": "spoon.test.field.FieldTest", 
          "detail": "expected:<public static final java.lang.String PREFIX = \"BasePrefix\";> but was:<public static final java.lang.String PREFIX = (spoon.test.field.testclasses.BaseClass.PREFIX) + \".b\";>", 
          "isError": false
        }, 
        {
          "failureName": "java.lang.AssertionError", 
          "testClass": "spoon.test.reference.CloneReferenceTest", 
          "testMethod": "testGetDeclarationOfFieldAfterClone", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/211425556", 
        "date": "Mar 15, 2017 5:52:56 PM", 
        "id": 211425556
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/211342085", 
        "date": "Mar 15, 2017 2:22:34 PM", 
        "id": 211342085
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/f818e07e0713e20a4cb40dae32a8c7579d8bf140", 
        "sha": "f818e07e0713e20a4cb40dae32a8c7579d8bf140", 
        "branchName": "master", 
        "date": "Mar 15, 2017 5:44:35 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/561853c421c1e8fc6b3cdd3b3837bf8c2940020a", 
        "sha": "561853c421c1e8fc6b3cdd3b3837bf8c2940020a", 
        "branchName": "master", 
        "date": "Mar 15, 2017 2:13:01 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-211342085-211425556", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 469, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 474, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 4, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 32, 
        "numberDeleted": 6
      }
    }, 
    "bugId": "Bears_45", 
    "diff": "diff --git a/src/main/java/spoon/refactoring/Refactoring.java b/src/main/java/spoon/refactoring/Refactoring.java\nindex 398b076..fce0c5f 100644\n--- a/src/main/java/spoon/refactoring/Refactoring.java\n+++ b/src/main/java/spoon/refactoring/Refactoring.java\n@@ -36,10 +36,14 @@ public final class Refactoring {\n \t * \t\tNew name of the element.\n \t */\n \tpublic static void changeTypeName(final CtType<?> type, String name) {\n+\n+\t\tfinal String typeQFN = type.getQualifiedName();\n+\n \t\tfinal List<CtTypeReference<?>> references = Query.getElements(type.getFactory(), new TypeFilter<CtTypeReference<?>>(CtTypeReference.class) {\n \t\t\t@Override\n \t\t\tpublic boolean matches(CtTypeReference<?> reference) {\n-\t\t\t\treturn type.getQualifiedName().equals(reference.getQualifiedName());\n+\t\t\t\tString refFQN = reference.getQualifiedName();\n+\t\t\t\treturn typeQFN.equals(refFQN);\n \t\t\t}\n \t\t});\n \ndiff --git a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java\nindex 96ba423..7039feb 100644\n--- a/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java\n+++ b/src/main/java/spoon/support/compiler/SnippetCompilationHelper.java\n@@ -91,9 +91,8 @@ public class SnippetCompilationHelper {\n \r\n \t\tif (ret instanceof CtClass) {\r\n \t\t\tCtClass klass = (CtClass) ret;\r\n-\t\t\tklass.setSimpleName(klass.getSimpleName().replaceAll(\"^[0-9]*\", \"\"));\r\n-\t\t\tklass.setParent(ret.getFactory().Package().getRootPackage());\r\n \t\t\tret.getFactory().Package().getRootPackage().addType(klass);\r\n+\t\t\tklass.setSimpleName(klass.getSimpleName().replaceAll(\"^[0-9]*\", \"\"));\r\n \t\t}\r\n \t\treturn ret;\r\n \t}\r\ndiff --git a/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java b/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java\nindex db4eb5f..aefe25d 100644\n--- a/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java\n+++ b/src/main/java/spoon/support/reflect/declaration/CtNamedElementImpl.java\n@@ -43,6 +43,7 @@ public abstract class CtNamedElementImpl extends CtElementImpl implements CtName\n \t\tif (factory instanceof FactoryImpl) {\n \t\t\tsimpleName = ((FactoryImpl) factory).dedup(simpleName);\n \t\t}\n+\n \t\tthis.simpleName = simpleName;\n \t\treturn (T) this;\n \t}\ndiff --git a/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java b/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java\nindex e112408..fc7c633 100644\n--- a/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java\n+++ b/src/main/java/spoon/support/reflect/reference/CtFieldReferenceImpl.java\n@@ -17,13 +17,11 @@\n package spoon.support.reflect.reference;\n \n import spoon.Launcher;\n-import spoon.reflect.declaration.CtElement;\n import spoon.reflect.declaration.CtEnum;\n import spoon.reflect.declaration.CtField;\n import spoon.reflect.declaration.CtType;\n import spoon.reflect.declaration.CtVariable;\n import spoon.reflect.declaration.ModifierKind;\n-import spoon.reflect.declaration.ParentNotInitializedException;\n import spoon.reflect.reference.CtFieldReference;\n import spoon.reflect.reference.CtTypeReference;\n import spoon.reflect.visitor.CtVisitor;\n@@ -130,35 +128,9 @@ public class CtFieldReferenceImpl<T> extends CtVariableReferenceImpl<T> implemen\n \t@Override\n \t@SuppressWarnings(\"unchecked\")\n \tpublic CtField<T> getDeclaration() {\n-\t\tfinal CtField<T> ctField = lookupDynamically();\n-\t\tif (ctField != null) {\n-\t\t\treturn ctField;\n-\t\t}\n \t\treturn fromDeclaringType();\n \t}\n \n-\tprivate CtField<T> lookupDynamically() {\n-\t\tCtElement element = this;\n-\t\tCtField optional = null;\n-\t\tString name = getSimpleName();\n-\t\ttry {\n-\t\t\tdo {\n-\t\t\t\tCtType type = element.getParent(CtType.class);\n-\t\t\t\tif (type == null) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\tfinal CtField potential = type.getField(name);\n-\t\t\t\tif (potential != null) {\n-\t\t\t\t\toptional = potential;\n-\t\t\t\t}\n-\t\t\t\telement = type;\n-\t\t\t} while (optional == null);\n-\t\t} catch (ParentNotInitializedException e) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn optional;\n-\t}\n-\n \tprivate CtField<T> fromDeclaringType() {\n \t\tif (declaringType == null) {\n \t\t\treturn null;\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 118243048, 
        "hostName": "local", 
        "totalMemory": 305135616, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:24:53 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/211342085/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            72
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 72
        }, 
        "testing": {
          "stepDurations": [
            154
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 154
        }, 
        "cloning": {
          "stepDurations": [
            22
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 22
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:16:38 AM", 
      "totalDuration": 486
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1039, 
        "numberRunning": 1040, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.NullPointerException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/213996751", 
      "failureDetails": [
        {
          "failureName": "java.lang.NullPointerException", 
          "testMethod": "testMetadata", 
          "isError": true, 
          "testClass": "spoon.test.ctElement.MetadataTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "spoon.test.ctElement.MetadataTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/215500998", 
        "date": "Mar 27, 2017 2:04:47 PM", 
        "id": 215500998
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/213996751", 
        "date": "Mar 22, 2017 9:44:04 PM", 
        "id": 213996751
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/5403f1552074216126dd0350d0426fc7ccf2dd2c", 
        "sha": "5403f1552074216126dd0350d0426fc7ccf2dd2c", 
        "branchName": "master", 
        "date": "Mar 27, 2017 1:56:43 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/f190d8ebcdcfdba60a5490a5a934599fd93b159d", 
        "sha": "f190d8ebcdcfdba60a5490a5a934599fd93b159d", 
        "branchName": "master", 
        "date": "Mar 22, 2017 9:35:37 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-213996751-215500998", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 3
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_46", 
    "diff": "diff --git a/src/main/java/spoon/support/reflect/declaration/CtElementImpl.java b/src/main/java/spoon/support/reflect/declaration/CtElementImpl.java\nindex 465902d..c775076 100644\n--- a/src/main/java/spoon/support/reflect/declaration/CtElementImpl.java\n+++ b/src/main/java/spoon/support/reflect/declaration/CtElementImpl.java\n@@ -386,6 +386,9 @@ public abstract class CtElementImpl implements CtElement, Serializable {\n \n \t@Override\n \tpublic Set<String> getMetadataKeys() {\n+\t\tif (metadata == null) {\n+\t\t\treturn Collections.EMPTY_SET;\n+\t\t}\n \t\treturn metadata.keySet();\n \t}\n \n", 
    "projectMetrics": {
      "numberSourceFiles": 474, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 478, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 129243320, 
        "hostName": "local", 
        "totalMemory": 286261248, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 7:19:09 AM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/213996751/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            66
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 67
        }, 
        "testing": {
          "stepDurations": [
            171
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 171
        }, 
        "cloning": {
          "stepDurations": [
            22
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 22
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 7:11:04 AM", 
      "totalDuration": 478
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1047, 
        "numberRunning": 1048, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "org.junit.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/218213030", 
      "failingClasses": [
        {
          "numberPassing": 27, 
          "numberRunning": 28, 
          "testClass": "spoon.test.imports.ImportTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "org.junit.ComparisonFailure", 
          "testMethod": "testAnotherMissingImport", 
          "testClass": "spoon.test.imports.ImportTest", 
          "detail": "expected:<...gImport#doSomething([externallib].SomeType)> but was:<...gImport#doSomething([fr.inria].SomeType)>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/221992429", 
        "date": "Apr 14, 2017 9:23:15 AM", 
        "id": 221992429
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/218213030", 
        "date": "Apr 3, 2017 10:15:39 PM", 
        "id": 218213030
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/d25247f87b6bdb3aa917a90e70f1d1117424f153", 
        "sha": "d25247f87b6bdb3aa917a90e70f1d1117424f153", 
        "branchName": "master", 
        "date": "Apr 14, 2017 9:14:26 AM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/11d500fb62e40afef7e00af14a5cfadf4eb73011", 
        "sha": "11d500fb62e40afef7e00af14a5cfadf4eb73011", 
        "branchName": "master", 
        "date": "Apr 3, 2017 10:03:43 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-218213030-221992429", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 474, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 480, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 3
      }
    }, 
    "bugId": "Bears_47", 
    "diff": "diff --git a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\nindex 58f0d86..a04d953 100644\n--- a/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\n+++ b/src/main/java/spoon/support/compiler/jdt/ReferenceBuilder.java\n@@ -641,6 +641,9 @@ public class ReferenceBuilder {\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n+\t\t\tif (binding.actualType() instanceof MissingTypeBinding) {\n+\t\t\t\tref = getTypeReference(binding.actualType());\n+\t\t\t}\n \n \t\t\tif (((ParameterizedTypeBinding) binding).arguments != null) {\n \t\t\t\tfor (TypeBinding b : ((ParameterizedTypeBinding) binding).arguments) {\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 143795520, 
        "hostName": "local", 
        "totalMemory": 284164096, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:59:49 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/218213030/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            1, 
            102
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 104
        }, 
        "testing": {
          "stepDurations": [
            271
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 271
        }, 
        "cloning": {
          "stepDurations": [
            23
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 23
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:48:23 PM", 
      "totalDuration": 678
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1057, 
        "numberRunning": 1058, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "spoon.SpoonException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 2
      }, 
      "failingModule": "/root/workspace/INRIA/spoon/225344336", 
      "failureDetails": [
        {
          "failureName": "spoon.SpoonException", 
          "detail": "Cannot resolve 1) type parameter <T>  of declarer public class Banana<T> {\n    abstract class Vitamins extends java.util.AbstractList<T> {    }\n}", 
          "isError": true, 
          "testMethod": "testClassContextOnInnerClass", 
          "testClass": "spoon.test.generics.GenericsTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 31, 
          "numberRunning": 32, 
          "testClass": "spoon.test.generics.GenericsTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/226528821", 
        "date": "Apr 27, 2017 9:17:25 PM", 
        "id": 226528821
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/INRIA/spoon/builds/225344336", 
        "date": "Apr 24, 2017 9:37:50 PM", 
        "id": 225344336
      }
    }, 
    "repository": {
      "name": "INRIA-spoon", 
      "url": "https://github.com/INRIA/spoon", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 14176513
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/INRIA/spoon/commit/4c0ac3299569c30661ef249b9a30813fc1081b62", 
        "sha": "4c0ac3299569c30661ef249b9a30813fc1081b62", 
        "branchName": "master", 
        "date": "Apr 27, 2017 9:08:19 PM", 
        "repoName": "INRIA/spoon"
      }, 
      "buggyBuild": {
        "url": "http://github.com/INRIA/spoon/commit/27fc8208c4da4145c687c7f4db057de7dbed50f6", 
        "sha": "27fc8208c4da4145c687c7f4db057de7dbed50f6", 
        "branchName": "master", 
        "date": "Apr 24, 2017 9:28:30 PM", 
        "repoName": "INRIA/spoon"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/INRIA-spoon-225344336-226528821", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 12
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_48", 
    "diff": "diff --git a/src/main/java/spoon/support/visitor/ClassTypingContext.java b/src/main/java/spoon/support/visitor/ClassTypingContext.java\nindex ba9f1cc..8147a59 100644\n--- a/src/main/java/spoon/support/visitor/ClassTypingContext.java\n+++ b/src/main/java/spoon/support/visitor/ClassTypingContext.java\n@@ -373,7 +373,7 @@ public class ClassTypingContext implements GenericTypeAdapter {\n \t\t\t\t\tthrow new SpoonException(\"Cannot adapt type parameters of non type scope\");\r\n \t\t\t\t}\r\n \t\t\t\tCtType<?> typeDeclarer = (CtType<?>) declarer;\r\n-\t\t\t\tList<CtTypeReference<?>> actualTypeArguments = typeToArguments.get(typeDeclarer.getQualifiedName());\r\n+\t\t\t\tList<CtTypeReference<?>> actualTypeArguments = getActualTypeArguments(typeDeclarer.getQualifiedName());\r\n \t\t\t\tif (actualTypeArguments == null) {\r\n \t\t\t\t\t/*\r\n \t\t\t\t\t * the actualTypeArguments of this declarer cannot be resolved.\r\n@@ -399,6 +399,17 @@ public class ClassTypingContext implements GenericTypeAdapter {\n \t\treturn result;\r\n \t}\r\n \r\n+\tprivate List<CtTypeReference<?>> getActualTypeArguments(String qualifiedName) {\r\n+\t\tList<CtTypeReference<?>> actualTypeArguments = typeToArguments.get(qualifiedName);\r\n+\t\tif (actualTypeArguments != null) {\r\n+\t\t\treturn actualTypeArguments;\r\n+\t\t}\r\n+\t\tif (enclosingClassTypingContext != null) {\r\n+\t\t\treturn enclosingClassTypingContext.getActualTypeArguments(qualifiedName);\r\n+\t\t}\r\n+\t\treturn null;\r\n+\t}\r\n+\r\n \tprivate static CtTypeReference<?> getValue(List<CtTypeReference<?>> arguments, CtTypeParameter typeParam, CtFormalTypeDeclarer declarer) {\r\n \t\tif (declarer.getFormalCtTypeParameters().size() != arguments.size()) {\r\n \t\t\tthrow new SpoonException(\"Unexpected count of actual type arguments\");\r\n", 
    "projectMetrics": {
      "numberSourceFiles": 478, 
      "numberLibrariesFailingModule": 10, 
      "numberTestFiles": 484, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 151565960, 
        "hostName": "local", 
        "totalMemory": 377487360, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:54:40 PM", 
      "projectRootPomPath": "./workspace/INRIA/spoon/225344336/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            0, 
            0, 
            0, 
            100
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 101
        }, 
        "testing": {
          "stepDurations": [
            299
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 299
        }, 
        "cloning": {
          "stepDurations": [
            21
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 21
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:40:54 PM", 
      "totalDuration": 820
    }
  }
]