[
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1569, 
        "numberRunning": 1570, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/176912167", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "Could not find creator property with name 'intField' (in class com.fasterxml.jackson.databind.creators.Creator1476Test$SimplePojo)\n at [Source: { \"intField\": 1, \"stringField\": \"foo\" }; line: 1, column: 1]", 
          "isError": true, 
          "testMethod": "testConstructorChoice", 
          "testClass": "com.fasterxml.jackson.databind.creators.Creator1476Test"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.creators.Creator1476Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190405643", 
        "date": "Jan 9, 2017 10:46:51 PM", 
        "id": 190405643
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/176912167", 
        "date": "Nov 18, 2016 4:09:26 AM", 
        "id": 176912167
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "sha": "d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "branchName": "2.7", 
        "date": "Jan 9, 2017 10:42:27 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/002a9a3e9b98ebebf53e43aed0536d3c50851c84", 
        "sha": "002a9a3e9b98ebebf53e43aed0536d3c50851c84", 
        "branchName": "2.7", 
        "date": "Nov 18, 2016 4:05:35 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-176912167-190405643", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 30, 
        "numberDeleted": 24
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_1", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\nindex 8e38f5d..a530e4b 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/CreatorCollector.java\n@@ -162,36 +162,39 @@ public class CreatorCollector\n             SettableBeanProperty[] injectables)\n     {\n         if (creator.getParameterType(0).isCollectionLikeType()) {\n-            verifyNonDup(creator, C_ARRAY_DELEGATE, explicit);\n-            _arrayDelegateArgs = injectables;\n+            if (verifyNonDup(creator, C_ARRAY_DELEGATE, explicit)) {\n+                _arrayDelegateArgs = injectables;\n+            }\n         } else {\n-            verifyNonDup(creator, C_DELEGATE, explicit);\n-            _delegateArgs = injectables;\n+            if (verifyNonDup(creator, C_DELEGATE, explicit)) {\n+                _delegateArgs = injectables;\n+            }\n         }\n     }\n     \n     public void addPropertyCreator(AnnotatedWithParams creator, boolean explicit,\n             SettableBeanProperty[] properties)\n     {\n-        verifyNonDup(creator, C_PROPS, explicit);\n-        // Better ensure we have no duplicate names either...\n-        if (properties.length > 1) {\n-            HashMap<String,Integer> names = new HashMap<String,Integer>();\n-            for (int i = 0, len = properties.length; i < len; ++i) {\n-                String name = properties[i].getName();\n-                /* [Issue-13]: Need to consider Injectables, which may not have\n-                 *   a name at all, and need to be skipped\n-                 */\n-                if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n-                    continue;\n-                }\n-                Integer old = names.put(name, Integer.valueOf(i));\n-                if (old != null) {\n-                    throw new IllegalArgumentException(\"Duplicate creator property \\\"\"+name+\"\\\" (index \"+old+\" vs \"+i+\")\");\n+        if (verifyNonDup(creator, C_PROPS, explicit)) {\n+            // Better ensure we have no duplicate names either...\n+            if (properties.length > 1) {\n+                HashMap<String,Integer> names = new HashMap<String,Integer>();\n+                for (int i = 0, len = properties.length; i < len; ++i) {\n+                    String name = properties[i].getName();\n+                    /* [Issue-13]: Need to consider Injectables, which may not have\n+                     *   a name at all, and need to be skipped\n+                     */\n+                    if (name.length() == 0 && properties[i].getInjectableValueId() != null) {\n+                        continue;\n+                    }\n+                    Integer old = names.put(name, Integer.valueOf(i));\n+                    if (old != null) {\n+                        throw new IllegalArgumentException(\"Duplicate creator property \\\"\"+name+\"\\\" (index \"+old+\" vs \"+i+\")\");\n+                    }\n                 }\n             }\n+            _propertyBasedArgs = properties;\n         }\n-        _propertyBasedArgs = properties;\n     }\n \n     public void addIncompeteParameter(AnnotatedParameter parameter) {\n@@ -293,7 +296,10 @@ public class CreatorCollector\n         return member;\n     }\n \n-    protected void verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n+    /**\n+     * @return True if specified Creator is to be used\n+     */\n+    protected boolean verifyNonDup(AnnotatedWithParams newOne, int typeIndex, boolean explicit)\n     {\n         final int mask = (1 << typeIndex);\n         _hasNonDefaultCreator = true;\n@@ -301,11 +307,10 @@ public class CreatorCollector\n         // already had an explicitly marked one?\n         if (oldOne != null) {\n             boolean verify;\n-\n             if ((_explicitCreators & mask) != 0) { // already had explicitly annotated, leave as-is\n                 // but skip, if new one not annotated\n                 if (!explicit) {\n-                    return;\n+                    return false;\n                 }\n                 // both explicit: verify\n                 verify = true;\n@@ -327,7 +332,7 @@ public class CreatorCollector\n                 // otherwise, which one to choose?\n                 if (newType.isAssignableFrom(oldType)) {\n                     // new type more generic, use old\n-                    return;\n+                    return false;\n                 }\n                 // new type more specific, use it\n             }\n@@ -336,6 +341,7 @@ public class CreatorCollector\n             _explicitCreators |= mask;\n         }\n         _creators[typeIndex] = _fixAccess(newOne);\n+        return true;\n     }\n \n     /*\n", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 362, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 172426376, 
        "hostName": "local", 
        "totalMemory": 396886016, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:44:09 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/176912167/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            51
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 51
        }, 
        "testing": {
          "stepDurations": [
            31
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 31
        }, 
        "cloning": {
          "stepDurations": [
            57
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 57
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:41:02 PM", 
      "totalDuration": 181
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1570, 
        "numberRunning": 1571, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/190405643", 
      "failingClasses": [
        {
          "numberPassing": 30, 
          "numberRunning": 31, 
          "testClass": "com.fasterxml.jackson.databind.deser.TestMapDeserialization", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testcharSequenceKeyMap", 
          "testClass": "com.fasterxml.jackson.databind.deser.TestMapDeserialization", 
          "detail": "Can not find a (Map) Key deserializer for type [simple type, class java.lang.CharSequence]\n at [Source: {\"a\":\"b\"}; line: 1, column: 1]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195044059", 
        "date": "Jan 25, 2017 4:02:17 AM", 
        "id": 195044059
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190405643", 
        "date": "Jan 9, 2017 10:46:51 PM", 
        "id": 190405643
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/23a733207bc88a06ee486a5896b7b0c4ebbbfef4", 
        "sha": "23a733207bc88a06ee486a5896b7b0c4ebbbfef4", 
        "branchName": "2.7", 
        "date": "Jan 25, 2017 3:58:19 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "sha": "d44600d3750e5dba9fac68aee7248ed2a80a2225", 
        "branchName": "2.7", 
        "date": "Jan 9, 2017 10:42:27 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-190405643-195044059", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 362, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 1
      }
    }, 
    "bugId": "Bears_2", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\nindex d95749a..8bddce4 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java\n@@ -72,7 +72,7 @@ public class StdKeyDeserializer extends KeyDeserializer\n         int kind;\n \n         // first common types:\n-        if (raw == String.class || raw == Object.class) {\n+        if (raw == String.class || raw == Object.class || raw == CharSequence.class) {\n             return StringKD.forType(raw);\n         } else if (raw == UUID.class) {\n             kind = TYPE_UUID;\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 201092024, 
        "hostName": "local", 
        "totalMemory": 363331584, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:36:31 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/190405643/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            49
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 49
        }, 
        "testing": {
          "stepDurations": [
            36
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 36
        }, 
        "cloning": {
          "stepDurations": [
            54
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 54
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:32:50 PM", 
      "totalDuration": 214
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1680, 
        "numberRunning": 1681, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.util.NoSuchElementException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/190406891", 
      "failureDetails": [
        {
          "failureName": "java.util.NoSuchElementException", 
          "detail": "No entry 'businessAddress' found, can't remove", 
          "isError": true, 
          "testMethod": "testCaseInsensitiveUnwrap", 
          "testClass": "com.fasterxml.jackson.databind.struct.TestUnwrapped"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 8, 
          "numberRunning": 9, 
          "testClass": "com.fasterxml.jackson.databind.struct.TestUnwrapped", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190505536", 
        "date": "Jan 10, 2017 6:42:40 AM", 
        "id": 190505536
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/190406891", 
        "date": "Jan 9, 2017 10:50:43 PM", 
        "id": 190406891
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d7155de6c37db3301b92b755bd0a02388f7dd07f", 
        "sha": "d7155de6c37db3301b92b755bd0a02388f7dd07f", 
        "branchName": "2.8", 
        "date": "Jan 10, 2017 6:38:36 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/7fe2d4f1aaab61e41f31f792f8a988157a34b34c", 
        "sha": "7fe2d4f1aaab61e41f31f792f8a988157a34b34c", 
        "branchName": "2.8", 
        "date": "Jan 9, 2017 10:45:35 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-190406891-190505536", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 6, 
        "numberDeleted": 3
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_3", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\nindex fd30aaf..8031ee0 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/BeanPropertyMap.java\n@@ -92,7 +92,7 @@ public class BeanPropertyMap\n     protected void init(Collection<SettableBeanProperty> props)\n     {\n         _size = props.size();\n-        \n+\n         // First: calculate size of primary hash area\n         final int hashSize = findSize(_size);\n         _hashMask = hashSize-1;\n@@ -423,7 +423,8 @@ System.err.println(\"And new propr #\"+slot+\" '\"+key+\"'\");\n      * Specialized method for removing specified existing entry.\n      * NOTE: entry MUST exist, otherwise an exception is thrown.\n      */\n-    public void remove(SettableBeanProperty propToRm) {\n+    public void remove(SettableBeanProperty propToRm)\n+    {\n         ArrayList<SettableBeanProperty> props = new ArrayList<SettableBeanProperty>(_size);\n         String key = getPropertyName(propToRm);\n         boolean found = false;\n@@ -434,7 +435,9 @@ System.err.println(\"And new propr #\"+slot+\" '\"+key+\"'\");\n                 continue;\n             }\n             if (!found) {\n-                found = key.equals(prop.getName());\n+                // 09-Jan-2017, tatu: Important: must check name slot and NOT property name,\n+                //   as only former is lower-case in case-insensitive case\n+                found = key.equals(_hashArea[i-1]);\n                 if (found) {\n                     // need to leave a hole here\n                     _propsInOrder[_findFromOrdered(prop)] = null;\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 382, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 129327328, 
        "hostName": "local", 
        "totalMemory": 364380160, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:40:49 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/190406891/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            43
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 43
        }, 
        "testing": {
          "stepDurations": [
            29
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 29
        }, 
        "cloning": {
          "stepDurations": [
            48
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 48
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:37:52 PM", 
      "totalDuration": 172
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1571, 
        "numberRunning": 1572, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.IllegalStateException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195066764", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.creators.InnerClassCreatorTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "java.lang.IllegalStateException", 
          "testMethod": "testIssue1501", 
          "testClass": "com.fasterxml.jackson.databind.creators.InnerClassCreatorTest", 
          "detail": "Internal error: no creator index for property 'a' (of type com.fasterxml.jackson.databind.deser.impl.InnerClassProperty)", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195069327", 
        "date": "Jan 25, 2017 6:45:52 AM", 
        "id": 195069327
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195066764", 
        "date": "Jan 25, 2017 6:27:41 AM", 
        "id": 195066764
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/63afa5297a0b8bcbf31b9c91e5d15537e0fdbdd5", 
        "sha": "63afa5297a0b8bcbf31b9c91e5d15537e0fdbdd5", 
        "branchName": "2.7", 
        "date": "Jan 25, 2017 6:41:59 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d3874ebf3c0585270f1fe33eb7030667bacb63b7", 
        "sha": "d3874ebf3c0585270f1fe33eb7030667bacb63b7", 
        "branchName": "2.7", 
        "date": "Jan 25, 2017 6:23:43 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195066764-195069327", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 363, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 9
      }
    }, 
    "bugId": "Bears_4", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\nindex 311802e..4a9ca99 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/impl/InnerClassProperty.java\n@@ -83,6 +83,15 @@ public final class InnerClassProperty\n     public InnerClassProperty withValueDeserializer(JsonDeserializer<?> deser) {\n         return new InnerClassProperty(this, deser);\n     }\n+\n+    @Override\n+    public void assignIndex(int index) { _delegate.assignIndex(index); }\n+\n+    @Override\n+    public int getPropertyIndex() { return _delegate.getPropertyIndex(); }\n+\n+    @Override\n+    public int getCreatorIndex() { return _delegate.getCreatorIndex(); }\n     \n     // // // BeanProperty impl\n     \n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 146485848, 
        "hostName": "local", 
        "totalMemory": 358612992, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:31:33 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195066764/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            49
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 49
        }, 
        "testing": {
          "stepDurations": [
            39
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 39
        }, 
        "cloning": {
          "stepDurations": [
            49
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 49
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:28:02 PM", 
      "totalDuration": 205
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1571, 
        "numberRunning": 1572, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195430379", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "No _idValue when handleIdValue called, on instance of com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest$A\n at [Source: {\"id\":\"123\",\"name\":\"A\"}; line: 1, column: 23]", 
          "isError": true, 
          "testMethod": "testObjectIdWithCreator", 
          "testClass": "com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.creators.CreatorWithObjectIdTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/198387397", 
        "date": "Feb 4, 2017 7:57:01 PM", 
        "id": 198387397
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195430379", 
        "date": "Jan 26, 2017 6:16:10 AM", 
        "id": 195430379
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/04cb1a27e0fe60fe9bab64dfe7f36b3f7649ba0c", 
        "sha": "04cb1a27e0fe60fe9bab64dfe7f36b3f7649ba0c", 
        "branchName": "2.7", 
        "date": "Feb 4, 2017 7:52:58 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/16d77253d2ba0ed293a12013e459d56420a7d056", 
        "sha": "16d77253d2ba0ed293a12013e459d56420a7d056", 
        "branchName": "2.7", 
        "date": "Jan 26, 2017 6:12:01 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195430379-198387397", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 4, 
        "numberDeleted": 4
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_5", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\nindex 0e2b874..d0ebaba 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java\n@@ -373,6 +373,10 @@ public class BeanDeserializer\n         for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) {\n             String propName = p.getCurrentName();\n             p.nextToken(); // to point to value\n+            // Object Id property?\n+            if (buffer.readIdProperty(propName)) {\n+                continue;\n+            }\n             // creator property?\n             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n             if (creatorProp != null) {\n@@ -405,10 +409,6 @@ public class BeanDeserializer\n                 }\n                 continue;\n             }\n-            // Object Id property?\n-            if (buffer.readIdProperty(propName)) {\n-                continue;\n-            }\n             // regular property? needs buffering\n             SettableBeanProperty prop = _beanProperties.find(propName);\n             if (prop != null) {\n", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 364, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 230270312, 
        "hostName": "local", 
        "totalMemory": 353894400, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:37:09 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195430379/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            49
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 49
        }, 
        "testing": {
          "stepDurations": [
            41
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 41
        }, 
        "cloning": {
          "stepDurations": [
            51
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 51
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:33:23 AM", 
      "totalDuration": 219
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1686, 
        "numberRunning": 1688, 
        "numberFailing": 0, 
        "numberErroring": 2, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", 
            "isError": true, 
            "occurrences": 2
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195646489", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 2, 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest", 
          "numberFailing": 0, 
          "numberErroring": 2, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", 
          "testMethod": "testReadOnly935", 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest", 
          "detail": "Unrecognized field \"fullName\" (class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$Pojo935), not marked as ignorable (2 known properties: \"lastName\", \"firstName\"])\n at [Source: {\"firstName\":\"Foo\",\"lastName\":\"Bar\",\"fullName\":\"Foo Bar\"}; line: 1, column: 49] (through reference chain: com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$Pojo935[\"fullName\"])", 
          "isError": true
        }, 
        {
          "failureName": "com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException", 
          "testMethod": "testReadOnlyAndWriteOnly", 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest", 
          "detail": "Unrecognized field \"x\" (class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$ReadXWriteY), not marked as ignorable (one known property: \"y\"])\n at [Source: {\"x\":5, \"y\":6}; line: 1, column: 7] (through reference chain: com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$ReadXWriteY[\"x\"])", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195752461", 
        "date": "Jan 27, 2017 4:16:49 AM", 
        "id": 195752461
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195646489", 
        "date": "Jan 26, 2017 8:42:57 PM", 
        "id": 195646489
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "sha": "4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "branchName": "2.8", 
        "date": "Jan 27, 2017 4:12:29 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/2bb770bcd4cbc0c0c3ede86cedd4a602e328e2f6", 
        "sha": "2bb770bcd4cbc0c0c3ede86cedd4a602e328e2f6", 
        "branchName": "2.8", 
        "date": "Jan 26, 2017 8:38:42 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195646489-195752461", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 384, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 2, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 7, 
        "numberDeleted": 5
      }
    }, 
    "bugId": "Bears_6", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\nindex f542d84..fd6a613 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java\n@@ -4,6 +4,7 @@ import java.lang.reflect.Modifier;\n import java.util.*;\n \n import com.fasterxml.jackson.annotation.JsonAnySetter;\n+import com.fasterxml.jackson.annotation.JsonProperty.Access;\n import com.fasterxml.jackson.databind.*;\n import com.fasterxml.jackson.databind.cfg.HandlerInstantiator;\n import com.fasterxml.jackson.databind.cfg.MapperConfig;\n@@ -727,10 +728,14 @@ public class POJOPropertiesCollector\n \n         while (it.hasNext()) {\n             POJOPropertyBuilder prop = it.next();\n-            prop.removeNonVisible(inferMutators);\n+            // 26-Jan-2017, tatu: [databind#935]: need to denote removal of\n+            Access acc = prop.removeNonVisible(inferMutators);\n+            if (!_forSerialization && (acc == Access.READ_ONLY)) {\n+                _collectIgnorals(prop.getName());\n+            }\n         }\n     }\n-        \n+\n     /**\n      * Helper method called to add explicitly ignored properties to a list\n      * of known ignored properties; this helps in proper reporting of\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\nindex 954f5dd..b9a403c 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java\n@@ -641,7 +641,7 @@ public class POJOPropertyBuilder\n      * @param inferMutators Whether mutators can be \"pulled in\" by visible\n      *    accessors or not. \n      */\n-    public void removeNonVisible(boolean inferMutators)\n+    public JsonProperty.Access removeNonVisible(boolean inferMutators)\n     {\n         /* 07-Jun-2015, tatu: With 2.6, we will allow optional definition\n          *  of explicit access type for property; if not \"AUTO\", it will\n@@ -680,6 +680,7 @@ public class POJOPropertyBuilder\n                 _setters = _removeNonVisible(_setters);\n             }\n         }\n+        return acc;\n     }\n \n     /**\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 162681048, 
        "hostName": "local", 
        "totalMemory": 358088704, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:21:13 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195646489/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            54
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 54
        }, 
        "testing": {
          "stepDurations": [
            41
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 41
        }, 
        "cloning": {
          "stepDurations": [
            57
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 57
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:17:46 PM", 
      "totalDuration": 201
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1690, 
        "numberRunning": 1692, 
        "numberFailing": 1, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 1
          }, 
          {
            "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/195752461", 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "detail": "Expected an exception with one of substrings ([value not one of declared Enum]): got one with message \"Can not deserialize value of type com.fasterxml.jackson.databind.deser.EnumDeserializationTest$TestEnum from number 1: not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\n at [Source: \"1\"; line: 1, column: 1]\"", 
          "isError": false, 
          "testMethod": "testNumbersToEnums", 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDeserializationTest"
        }, 
        {
          "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
          "detail": "Can not deserialize value of type com.fasterxml.jackson.databind.deser.EnumDefaultReadTest$SimpleEnumWithDefault from number 0: not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\n at [Source: \"0\"; line: 1, column: 1]", 
          "isError": true, 
          "testMethod": "testWithFailOnNumbersAndReadUnknownAsDefault", 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDefaultReadTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 27, 
          "numberRunning": 28, 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDeserializationTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }, 
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "com.fasterxml.jackson.databind.deser.EnumDefaultReadTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195777970", 
        "date": "Jan 27, 2017 7:43:20 AM", 
        "id": 195777970
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/195752461", 
        "date": "Jan 27, 2017 4:16:49 AM", 
        "id": 195752461
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/ff441e82825ea48d28baee6ae7f0f705ff421def", 
        "sha": "ff441e82825ea48d28baee6ae7f0f705ff421def", 
        "branchName": "2.8", 
        "date": "Jan 27, 2017 7:39:00 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "sha": "4d34006e4d8a566c6c64a3a0e04c17e50d63bb82", 
        "branchName": "2.8", 
        "date": "Jan 27, 2017 4:12:29 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-195752461-195777970", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 7, 
        "numberDeleted": 2
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_7", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\nindex 679c417..3c65723 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n@@ -167,17 +167,12 @@ public class EnumDeserializer\n             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n                 return null;\n             }\n-        } else {\n-            // [databind#149]: Allow use of 'String' indexes as well\n+        } else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n+            // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)\n             char c = name.charAt(0);\n             if (c >= '0' && c <= '9') {\n                 try {\n                     int index = Integer.parseInt(name);\n-                    if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n-                        return ctxt.handleWeirdNumberValue(_enumClass(), index,\n-                                \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\"\n-                                );\n-                    }\n                     if (index >= 0 && index < _enumsByIndex.length) {\n                         return _enumsByIndex[index];\n                     }\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 385, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 146750432, 
        "hostName": "local", 
        "totalMemory": 337117184, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:20:25 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/195752461/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            42
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 42
        }, 
        "testing": {
          "stepDurations": [
            30
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 30
        }, 
        "cloning": {
          "stepDurations": [
            59
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 59
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:16:48 PM", 
      "totalDuration": 210
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1693, 
        "numberRunning": 1694, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/203042777", 
      "failingClasses": [
        {
          "numberPassing": 13, 
          "numberRunning": 14, 
          "testClass": "com.fasterxml.jackson.databind.ser.TestMapSerialization", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testConcurrentMaps", 
          "testClass": "com.fasterxml.jackson.databind.ser.TestMapSerialization", 
          "detail": "[no message for java.lang.NullPointerException]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/203306015", 
        "date": "Feb 20, 2017 3:55:22 AM", 
        "id": 203306015
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/203042777", 
        "date": "Feb 19, 2017 12:18:29 AM", 
        "id": 203042777
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/64967c410514ec8a94bb11bb26d6a37fafafc14b", 
        "sha": "64967c410514ec8a94bb11bb26d6a37fafafc14b", 
        "branchName": "2.8", 
        "date": "Feb 20, 2017 3:47:15 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/dc02ceac1c3d0939ddf8692f62be52da0e1a242b", 
        "sha": "dc02ceac1c3d0939ddf8692f62be52da0e1a242b", 
        "branchName": "2.8", 
        "date": "Feb 19, 2017 12:14:01 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-203042777-203306015", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 385, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 3, 
        "numberDeleted": 17
      }
    }, 
    "bugId": "Bears_8", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\nindex dbba25d..a3af8cc 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java\n@@ -952,7 +952,9 @@ public class MapSerializer\n         }\n         // [databind#1411]: TreeMap does not like null key... (although note that\n         //   check above should prevent this code from being called in that case)\n-        if (input.containsKey(null)) {\n+        // [databind#153]: but, apparently, some custom Maps do manage hit this\n+        //   problem.\n+        if (_hasNullKey(input)) {\n             TreeMap<Object,Object> result = new TreeMap<Object,Object>();\n             for (Map.Entry<?,?> entry : input.entrySet()) {\n                 Object key = entry.getKey();\n@@ -967,6 +969,22 @@ public class MapSerializer\n         return new TreeMap<Object,Object>(input);\n     }\n \n+    /**\n+     * @since 2.8.7\n+     */\n+    protected boolean _hasNullKey(Map<?,?> input) {\n+        // 19-Feb-2017, tatu: As per [databind#1513] there are many cases where `null`\n+        //   keys are not allowed, and even attempt to check for presence can cause\n+        //   problems. Without resorting to external sorting (and internal API change),\n+        //   or custom sortable Map implementation (more code) we can try black- or\n+        //   white-listing (that is; either skip known problem cases; or only apply for\n+        //   known good cases).\n+        //   While my first instinct was to do black-listing (remove Hashtable and ConcurrentHashMap),\n+        //   all in all it is probably better to just white list `HashMap` (and its sub-classes).\n+        \n+        return (input instanceof HashMap) && input.containsKey(null);\n+    }\n+    \n     protected void _writeNullKeyedEntry(JsonGenerator gen, SerializerProvider provider,\n             Object suppressableValue, Object value) throws IOException\n     {\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 249634072, 
        "hostName": "local", 
        "totalMemory": 340787200, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:31:00 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/203042777/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            48
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 48
        }, 
        "testing": {
          "stepDurations": [
            41
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 41
        }, 
        "cloning": {
          "stepDurations": [
            45
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 45
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:27:44 AM", 
      "totalDuration": 190
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1695, 
        "numberRunning": 1696, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/203649003", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "Unexpected token (VALUE_STRING), expected FIELD_NAME: missing property 'type' that is to contain type id  (for class com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl$AsProperty)\n at [Source: { \"value\": \"\" }; line: 1, column: 12] (through reference chain: com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl$AsPropertyWrapper[\"value\"])", 
          "isError": true, 
          "testMethod": "testWithEmptyStringAsNullObject1533", 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 12, 
          "numberRunning": 13, 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestPolymorphicWithDefaultImpl", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/204682356", 
        "date": "Feb 23, 2017 7:04:53 PM", 
        "id": 204682356
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/203649003", 
        "date": "Feb 21, 2017 2:22:54 AM", 
        "id": 203649003
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/10d5ab37f06f7925bf959312bfb6211f5bc4a1cb", 
        "sha": "10d5ab37f06f7925bf959312bfb6211f5bc4a1cb", 
        "branchName": "2.8", 
        "date": "Feb 23, 2017 7:00:47 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/ce37efcefbfab0fa91562a492f0f80af018a5313", 
        "sha": "ce37efcefbfab0fa91562a492f0f80af018a5313", 
        "branchName": "2.8", 
        "date": "Feb 21, 2017 2:06:13 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-203649003-204682356", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 7
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_9", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\nindex d1d096a..7941e05 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java\n@@ -153,6 +153,13 @@ public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer\n         // or, something for which \"as-property\" won't work, changed into \"wrapper-array\" type:\n         if (p.getCurrentToken() == JsonToken.START_ARRAY) {\n             return super.deserializeTypedFromAny(p, ctxt);\n+        } else if (p.getCurrentToken() == JsonToken.VALUE_STRING) {\n+            if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n+                String str = p.getText().trim();\n+                if (str.isEmpty()) {\n+                    return null;\n+                }\n+            }\n         }\n         ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME,\n                 \"missing property '\"+_typePropertyName+\"' that is to contain type id  (for class \"+baseTypeName()+\")\");\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 385, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 266944648, 
        "hostName": "local", 
        "totalMemory": 354942976, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:27:40 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/203649003/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            52
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 52
        }, 
        "testing": {
          "stepDurations": [
            33
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 33
        }, 
        "cloning": {
          "stepDurations": [
            47
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 47
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:24:31 AM", 
      "totalDuration": 183
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1704, 
        "numberRunning": 1705, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/214497429", 
      "failingClasses": [
        {
          "numberPassing": 7, 
          "numberRunning": 8, 
          "testClass": "com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testNullEnumFromEmptyArray", 
          "testClass": "com.fasterxml.jackson.databind.struct.EmptyArrayAsNullTest", 
          "detail": "Can not deserialize instance of com.fasterxml.jackson.databind.BaseMapTest$ABC out of START_ARRAY token\n at [Source:   [\n]; line: 1, column: 3]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/214500046", 
        "date": "Mar 24, 2017 3:32:01 AM", 
        "id": 214500046
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/214497429", 
        "date": "Mar 24, 2017 3:16:36 AM", 
        "id": 214497429
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/b96a3b55d4c28171cb92bd2cafff853ea973d36f", 
        "sha": "b96a3b55d4c28171cb92bd2cafff853ea973d36f", 
        "branchName": "2.8", 
        "date": "Mar 24, 2017 3:27:28 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/23d49e359217fad7b6f316fb31a7196ee4aed1b3", 
        "sha": "23d49e359217fad7b6f316fb31a7196ee4aed1b3", 
        "branchName": "2.8", 
        "date": "Mar 24, 2017 3:12:17 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-214497429-214500046", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 387, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 10, 
        "numberDeleted": 3
      }
    }, 
    "bugId": "Bears_10", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\nindex 3c65723..c3ad93e 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/EnumDeserializer.java\n@@ -165,7 +165,7 @@ public class EnumDeserializer\n         name = name.trim();\n         if (name.length() == 0) {\n             if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) {\n-                return null;\n+                return getEmptyValue(ctxt);\n             }\n         } else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) {\n             // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)\n@@ -195,15 +195,8 @@ public class EnumDeserializer\n     protected Object _deserializeOther(JsonParser p, DeserializationContext ctxt) throws IOException\n     {\n         // [databind#381]\n-        if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)\n-                && p.isExpectedStartArrayToken()) {\n-            p.nextToken();\n-            final Object parsed = deserialize(p, ctxt);\n-            JsonToken curr = p.nextToken();\n-            if (curr != JsonToken.END_ARRAY) {\n-                handleMissingEndArrayForSingle(p, ctxt);\n-            }\n-            return parsed;\n+        if (p.hasToken(JsonToken.START_ARRAY)) {\n+            return _deserializeFromArray(p, ctxt);\n         }\n         return ctxt.handleUnexpectedToken(_enumClass(), p);\n     }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 170433536, 
        "hostName": "local", 
        "totalMemory": 339214336, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:13:36 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/214497429/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            54
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 54
        }, 
        "testing": {
          "stepDurations": [
            39
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 39
        }, 
        "cloning": {
          "stepDurations": [
            52
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 52
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:09:40 AM", 
      "totalDuration": 229
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1705, 
        "numberRunning": 1706, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/215036598", 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "detail": "expected:<{\"map\":{\"[1]\":3}}> but was:<{\"map\":{\"[B]\":3}}>", 
          "isError": false, 
          "testMethod": "testMapWithEnumKeys", 
          "testClass": "com.fasterxml.jackson.databind.ser.TestEnumSerialization"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 22, 
          "numberRunning": 23, 
          "testClass": "com.fasterxml.jackson.databind.ser.TestEnumSerialization", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215111320", 
        "date": "Mar 26, 2017 1:37:59 AM", 
        "id": 215111320
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215036598", 
        "date": "Mar 25, 2017 7:52:45 PM", 
        "id": 215036598
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "sha": "934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "branchName": "2.8", 
        "date": "Mar 26, 2017 1:33:25 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/d892303fa5cdcfd5278f6c2a2b1b008d720f7b15", 
        "sha": "d892303fa5cdcfd5278f6c2a2b1b008d720f7b15", 
        "branchName": "2.8", 
        "date": "Mar 25, 2017 7:48:09 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-215036598-215111320", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 2, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 22, 
        "numberDeleted": 9
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_11", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\nindex b708a02..fceba52 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java\n@@ -31,12 +31,15 @@ public class StdKeySerializer extends StdSerializer<Object>\n         } else if (cls.isEnum()) {\n             // 24-Sep-2015, tatu: Minor improvement over older (2.6.2 and before) code: at least\n             //     use name/toString() variation for as per configuration\n-            Enum<?> en = (Enum<?>) value;\n-\n             if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n-                str = en.toString();\n+                str = value.toString();\n             } else {\n-                str = en.name();\n+                Enum<?> en = (Enum<?>) value;\n+                if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n+                    str = String.valueOf(en.ordinal());\n+                } else {\n+                    str = en.name();\n+                }\n             }\n         } else if (value instanceof Date) {\n             provider.defaultSerializeDateKey((Date) value, g);\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\nindex fd6c99b..2462f2e 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializers.java\n@@ -144,9 +144,19 @@ public class StdKeySerializers\n                 break;\n             case TYPE_ENUM:\n                 {\n-                    String str = provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)\n-                            ? value.toString() : ((Enum<?>) value).name();\n-                    g.writeFieldName(str);\n+                    String key;\n+\n+                    if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_TO_STRING)) {\n+                        key = value.toString();\n+                    } else {\n+                        Enum<?> e = (Enum<?>) value;\n+                        if (provider.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n+                            key = String.valueOf(e.ordinal());\n+                        } else {\n+                            key = e.name();\n+                        }\n+                    }\n+                    g.writeFieldName(key);\n                 }\n                 break;\n             case TYPE_TO_STRING:\n@@ -250,6 +260,10 @@ public class StdKeySerializers\n                 return;\n             }\n             Enum<?> en = (Enum<?>) value;\n+            if (serializers.isEnabled(SerializationFeature.WRITE_ENUMS_USING_INDEX)) {\n+                g.writeFieldName(String.valueOf(en.ordinal()));\n+                return;\n+            }\n             g.writeFieldName(_values.serializedValueFor(en));\n         }\n     }\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 388, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 183977032, 
        "hostName": "local", 
        "totalMemory": 338165760, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:09:27 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/215036598/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            46
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 46
        }, 
        "testing": {
          "stepDurations": [
            44
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 44
        }, 
        "cloning": {
          "stepDurations": [
            46
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 46
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:06:07 AM", 
      "totalDuration": 195
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1708, 
        "numberRunning": 1712, 
        "numberFailing": 4, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 2
          }, 
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 2
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/215111320", 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 6, 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest", 
          "numberFailing": 4, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "testMethod": "testWithUnwrappedAndCreatorSingleParameterInMiddle", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest", 
          "detail": "expected:<30> but was:<0>", 
          "isError": false
        }, 
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "testMethod": "testWithUnwrappedAndCreatorMultipleParametersAtBeginning", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest", 
          "detail": "expected:<John> but was:<null>", 
          "isError": false
        }, 
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "testMethod": "testWithUnwrappedAndCreatorMultipleParametersInMiddle", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest", 
          "detail": "expected:<30> but was:<0>", 
          "isError": false
        }, 
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "testMethod": "testWithUnwrappedAndCreatorSingleParameterAtBeginning", 
          "testClass": "com.fasterxml.jackson.databind.deser.builder.BuilderWithUnwrappedTest", 
          "detail": "expected:<John> but was:<null>", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215799347", 
        "date": "Mar 28, 2017 7:09:55 AM", 
        "id": 215799347
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/215111320", 
        "date": "Mar 26, 2017 1:37:59 AM", 
        "id": 215111320
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/e08dafef4faa7d71330160dafcbe77536d90e809", 
        "sha": "e08dafef4faa7d71330160dafcbe77536d90e809", 
        "branchName": "2.8", 
        "date": "Mar 28, 2017 7:05:43 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "sha": "934f485d4c62854dd2ef48ed7ebb238f3abec0b7", 
        "branchName": "2.8", 
        "date": "Mar 26, 2017 1:33:25 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-215111320-215799347", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 389, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 47, 
        "numberDeleted": 22
      }
    }, 
    "bugId": "Bears_12", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\nindex 7b92423..817e29e 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BuilderBasedDeserializer.java\n@@ -26,7 +26,7 @@ public class BuilderBasedDeserializer\n     private static final long serialVersionUID = 1L;\n \n     protected final AnnotatedMethod _buildMethod;\n-\t\n+\n     /*\n     /**********************************************************\n     /* Life-cycle, construction, initialization\n@@ -66,7 +66,7 @@ public class BuilderBasedDeserializer\n         super(src, ignoreAllUnknown);\n         _buildMethod = src._buildMethod;\n     }\n-    \n+\n     protected BuilderBasedDeserializer(BuilderBasedDeserializer src, NameTransformer unwrapper) {\n         super(src, unwrapper);\n         _buildMethod = src._buildMethod;\n@@ -86,7 +86,7 @@ public class BuilderBasedDeserializer\n         super(src, props);\n         _buildMethod = src._buildMethod;\n     }\n-    \n+\n     @Override\n     public JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper)\n     {\n@@ -117,13 +117,13 @@ public class BuilderBasedDeserializer\n         SettableBeanProperty[] props = _beanProperties.getPropertiesInInsertionOrder();\n         return new BeanAsArrayBuilderDeserializer(this, props, _buildMethod);\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* JsonDeserializer implementation\n     /**********************************************************\n      */\n-    \n+\n     protected final Object finishBuild(DeserializationContext ctxt, Object builder)\n             throws IOException\n     {\n@@ -137,7 +137,7 @@ public class BuilderBasedDeserializer\n             return wrapInstantiationProblem(e, ctxt);\n         }\n     }\n-    \n+\n     /**\n      * Main deserialization method for bean-based objects (POJOs).\n      */\n@@ -146,7 +146,7 @@ public class BuilderBasedDeserializer\n         throws IOException\n     {\n         JsonToken t = p.getCurrentToken();\n-        \n+\n         // common case first:\n         if (t == JsonToken.START_OBJECT) {\n             t = p.nextToken();\n@@ -197,7 +197,7 @@ public class BuilderBasedDeserializer\n          */\n         return finishBuild(ctxt, _deserialize(p, ctxt, builder));\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Concrete deserialization methods\n@@ -207,7 +207,7 @@ public class BuilderBasedDeserializer\n     protected final Object _deserialize(JsonParser p,\n             DeserializationContext ctxt, Object builder)\n         throws IOException, JsonProcessingException\n-    {        \n+    {\n         if (_injectables != null) {\n             injectValues(ctxt, builder);\n         }\n@@ -233,7 +233,7 @@ public class BuilderBasedDeserializer\n             // Skip field name:\n             p.nextToken();\n             SettableBeanProperty prop = _beanProperties.find(propName);\n-            \n+\n             if (prop != null) { // normal case\n                 try {\n                     builder = prop.deserializeSetAndReturn(p, ctxt, builder);\n@@ -246,7 +246,7 @@ public class BuilderBasedDeserializer\n         }\n         return builder;\n     }\n-    \n+\n     /**\n      * Streamlined version that is only used when no \"special\"\n      * features are enabled.\n@@ -323,7 +323,7 @@ public class BuilderBasedDeserializer\n      * Method called to deserialize bean using \"property-based creator\":\n      * this means that a non-default constructor or factory method is\n      * called, and then possibly other setters. The trick is that\n-     * values for creator method need to be buffered, first; and \n+     * values for creator method need to be buffered, first; and\n      * due to non-guaranteed ordering possibly some other properties\n      * as well.\n      */\n@@ -332,7 +332,7 @@ public class BuilderBasedDeserializer\n     protected final Object _deserializeUsingPropertyBased(final JsonParser p,\n             final DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n-    { \n+    {\n         final PropertyBasedCreator creator = _propertyBasedCreator;\n         PropertyValueBuffer buffer = creator.startBuilding(p, ctxt, _objectIdReader);\n \n@@ -414,13 +414,13 @@ public class BuilderBasedDeserializer\n         }\n         return bean;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Deserializing when we have to consider an active View\n     /**********************************************************\n      */\n-    \n+\n     protected final Object deserializeWithView(JsonParser p, DeserializationContext ctxt,\n             Object bean, Class<?> activeView)\n         throws IOException, JsonProcessingException\n@@ -447,7 +447,7 @@ public class BuilderBasedDeserializer\n         }\n         return bean;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Handling for cases where we have \"unwrapped\" values\n@@ -477,7 +477,7 @@ public class BuilderBasedDeserializer\n         }\n \n         final Class<?> activeView = _needViewProcesing ? ctxt.getActiveView() : null;\n-        \n+\n         for (; p.getCurrentToken() != JsonToken.END_OBJECT; p.nextToken()) {\n             String propName = p.getCurrentName();\n             p.nextToken();\n@@ -515,7 +515,7 @@ public class BuilderBasedDeserializer\n         tokens.writeEndObject();\n         _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n         return bean;\n-    }    \n+    }\n \n     @SuppressWarnings(\"resource\")\n     protected Object deserializeWithUnwrapped(JsonParser p,\n@@ -580,31 +580,7 @@ public class BuilderBasedDeserializer\n             // creator property?\n             SettableBeanProperty creatorProp = creator.findCreatorProperty(propName);\n             if (creatorProp != null) {\n-                // Last creator property to set?\n-                if (buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt))) {\n-                    t = p.nextToken(); // to move to following FIELD_NAME/END_OBJECT\n-                    Object bean;\n-                    try {\n-                        bean = creator.build(ctxt, buffer);\n-                    } catch (Exception e) {\n-                        wrapAndThrow(e, _beanType.getRawClass(), propName, ctxt);\n-                        continue; // never gets here\n-                    }\n-                    // if so, need to copy all remaining tokens into buffer\n-                    while (t == JsonToken.FIELD_NAME) {\n-                        p.nextToken(); // to skip name\n-                        tokens.copyCurrentStructure(p);\n-                        t = p.nextToken();\n-                    }\n-                    tokens.writeEndObject();\n-                    if (bean.getClass() != _beanType.getRawClass()) {\n-                        // !!! 08-Jul-2011, tatu: Could probably support; but for now\n-                        //   it's too complicated, so bail out\n-                        ctxt.reportMappingException(\"Can not create polymorphic instances with unwrapped values\");\n-                        return null;\n-                    }\n-                    return _unwrappedPropertyHandler.processUnwrapped(p, ctxt, bean, tokens);\n-                }\n+                buffer.assignParameter(creatorProp, creatorProp.deserialize(p, ctxt));\n                 continue;\n             }\n             // Object Id property?\n@@ -646,7 +622,7 @@ public class BuilderBasedDeserializer\n     /* external type id\n     /**********************************************************\n      */\n-    \n+\n     protected Object deserializeWithExternalTypeId(JsonParser p, DeserializationContext ctxt)\n         throws IOException, JsonProcessingException\n     {\n@@ -699,15 +675,14 @@ public class BuilderBasedDeserializer\n                 } catch (Exception e) {\n                     wrapAndThrow(e, bean, propName, ctxt);\n                 }\n-                continue;\n             } else {\n                 // Unknown: let's call handler method\n-                handleUnknownProperty(p, ctxt, bean, propName);         \n+                handleUnknownProperty(p, ctxt, bean, propName);\n             }\n         }\n         // and when we get this far, let's try finalizing the deal:\n         return ext.complete(p, ctxt, bean);\n-    }        \n+    }\n \n     protected Object deserializeUsingPropertyBasedWithExternalTypeId(JsonParser p,\n     \t\tDeserializationContext ctxt)\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 91458944, 
        "hostName": "local", 
        "totalMemory": 319815680, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 6:05:55 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/215111320/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            46
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 46
        }, 
        "testing": {
          "stepDurations": [
            24
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 24
        }, 
        "cloning": {
          "stepDurations": [
            48
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 48
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 6:02:54 AM", 
      "totalDuration": 176
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1712, 
        "numberRunning": 1713, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/216970075", 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "detail": "Could not find creator property with name 'name' (in class com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest$Foo1345)\n at [Source: {\"name\":\"test\"}; line: 1, column: 1]", 
          "isError": true, 
          "testMethod": "testReadOnly1345", 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 3, 
          "testClass": "com.fasterxml.jackson.databind.deser.ReadOrWriteOnlyTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/216985681", 
        "date": "Mar 31, 2017 2:02:41 AM", 
        "id": 216985681
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/216970075", 
        "date": "Mar 31, 2017 12:57:45 AM", 
        "id": 216970075
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/04c33a5e2abb2aeec6fb1a054ede951b3519d3b4", 
        "sha": "04c33a5e2abb2aeec6fb1a054ede951b3519d3b4", 
        "branchName": "2.8", 
        "date": "Mar 31, 2017 1:58:23 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/5f1039fd154df1337741fa1b3c1c5e61a63456d4", 
        "sha": "5f1039fd154df1337741fa1b3c1c5e61a63456d4", 
        "branchName": "2.8", 
        "date": "Mar 31, 2017 12:53:27 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-216970075-216985681", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 12, 
        "numberDeleted": 9
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_13", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\nindex 4c61444..c69169f 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n@@ -441,9 +441,11 @@ public class BeanDeserializerFactory\n             BeanDescription beanDesc, BeanDeserializerBuilder builder)\n         throws JsonMappingException\n     {\n-        final SettableBeanProperty[] creatorProps =\n-                builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig());\n         final boolean isConcrete = !beanDesc.getType().isAbstract();\n+        final SettableBeanProperty[] creatorProps = isConcrete\n+                ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig())\n+                : null;\n+        final boolean hasCreatorProps = (creatorProps != null);\n         \n         // 01-May-2016, tatu: Which base type to use here gets tricky, since\n         //   it may often make most sense to use general type for overrides,\n@@ -490,8 +492,8 @@ public class BeanDeserializerFactory\n                 }\n             }\n         }\n-        final boolean useGettersAsSetters = (ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n-                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS));\n+        final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS)\n+                && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS);\n \n         // Ok: let's then filter out property definitions\n         List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt,\n@@ -531,7 +533,7 @@ public class BeanDeserializerFactory\n             }\n             // 25-Sep-2014, tatu: No point in finding constructor parameters for abstract types\n             //   (since they are never used anyway)\n-            if (isConcrete && propDef.hasConstructorParameter()) {\n+            if (hasCreatorProps && propDef.hasConstructorParameter()) {\n                 /* If property is passed via constructor parameter, we must\n                  * handle things in special way. Not sure what is the most optimal way...\n                  * for now, let's just call a (new) method in builder, which does nothing.\n@@ -548,8 +550,13 @@ public class BeanDeserializerFactory\n                     }\n                 }\n                 if (cprop == null) {\n-                    ctxt.reportMappingException(\"Could not find creator property with name '%s' (in class %s)\",\n-                            name, beanDesc.getBeanClass().getName());\n+                    List<String> n = new ArrayList<>();\n+                    for (SettableBeanProperty cp : creatorProps) {\n+                        n.add(cp.getName());\n+                    }\n+                    ctxt.reportBadPropertyDefinition(beanDesc, propDef,\n+                            \"Could not find creator property with name '%s' (known Creator properties: %s)\",\n+                            name, n);\n                     continue;\n                 }\n                 if (prop != null) {\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 392, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 260055472, 
        "hostName": "local", 
        "totalMemory": 345505792, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 5:59:43 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/216970075/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            55
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 55
        }, 
        "testing": {
          "stepDurations": [
            24
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 24
        }, 
        "cloning": {
          "stepDurations": [
            47
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 47
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 5:56:37 AM", 
      "totalDuration": 180
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1573, 
        "numberRunning": 1574, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.AssertionFailedError", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/221825856", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "junit.framework.AssertionFailedError", 
          "testMethod": "testIssue1599", 
          "testClass": "com.fasterxml.jackson.databind.interop.IllegalTypesCheckTest", 
          "detail": "Expected an exception with one of substrings ([Illegal type]): got one with message \"N/A\n at [Source: {\"id\": 124,\n \"obj\":[ \"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\",\n  {\n    \"transletBytecodes\" : [ \"AAIAZQ==\" ],\n    \"transletName\" : \"a.b\",\n    \"outputProperties\" : { }\n  }\n ]\n}; line: 6, column: 26] (through reference chain: com.fasterxml.jackson.databind.interop.Bean1599[\"obj\"]->com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl[\"outputProperties\"])\"", 
          "isError": false
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/221903238", 
        "date": "Apr 14, 2017 12:14:16 AM", 
        "id": 221903238
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/221825856", 
        "date": "Apr 13, 2017 8:05:15 PM", 
        "id": 221825856
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/6ce32ffd18facac6abdbbf559c817b47fcb622c1", 
        "sha": "6ce32ffd18facac6abdbbf559c817b47fcb622c1", 
        "branchName": "2.7", 
        "date": "Apr 14, 2017 12:08:10 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/28ec8a47d381311818f805ae76bf84da30f516f9", 
        "sha": "28ec8a47d381311818f805ae76bf84da30f516f9", 
        "branchName": "2.7", 
        "date": "Apr 13, 2017 8:00:31 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-221825856-221903238", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 365, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 0, 
        "numberDeleted": 23
      }
    }, 
    "bugId": "Bears_14", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\nindex 9fcb68b..ad37dd1 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n@@ -139,6 +139,8 @@ public class BeanDeserializerFactory\n         if (!isPotentialBeanType(type.getRawClass())) {\n             return null;\n         }\n+        // For checks like [databind#1599]\n+        checkIllegalTypes(ctxt, type, beanDesc);\n         // Use generic bean introspection to build deserializer\n         return buildBeanDeserializer(ctxt, type, beanDesc);\n     }\n@@ -834,4 +836,25 @@ public class BeanDeserializerFactory\n         // We default to 'false', i.e. not ignorable\n         return (status == null) ? false : status.booleanValue(); \n     }\n+\n+    /**\n+     * @since 2.8.9\n+     */\n+    protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,\n+            BeanDescription beanDesc)\n+        throws JsonMappingException\n+    {\n+        // There are certain nasty classes that could cause problems, mostly\n+        // via default typing -- catch them here.\n+        Class<?> raw = type.getRawClass();\n+        String name = raw.getSimpleName();\n+\n+        if (\"TemplatesImpl\".equals(name)) { // [databind#1599] \n+            if (raw.getName().startsWith(\"com.sun.org.apache.xalan\")) {\n+                throw JsonMappingException.from(ctxt,\n+                        String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\",\n+                                name));\n+            }\n+        }\n+    }\n }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 121731360, 
        "hostName": "local", 
        "totalMemory": 381157376, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:35:04 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/221825856/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            52
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 52
        }, 
        "testing": {
          "stepDurations": [
            31
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 31
        }, 
        "cloning": {
          "stepDurations": [
            56
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 56
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:31:34 PM", 
      "totalDuration": 203
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1574, 
        "numberRunning": 1575, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/223024976", 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "detail": "expected:<{\"alwaysClass\":[1],\"alwaysProp\":2}> but was:<{\"alwaysClass\":[{\"id\":1,\"value\":13}],\"alwaysProp\":2}>", 
          "isError": false, 
          "testMethod": "testIssue1607", 
          "testClass": "com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 1, 
          "numberRunning": 2, 
          "testClass": "com.fasterxml.jackson.databind.objectid.AlwaysAsReferenceFirstTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/223291136", 
        "date": "Apr 18, 2017 9:51:23 PM", 
        "id": 223291136
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/223024976", 
        "date": "Apr 18, 2017 7:15:44 AM", 
        "id": 223024976
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/ec859af181fa5b2da62077d00154e3c13c9d8f28", 
        "sha": "ec859af181fa5b2da62077d00154e3c13c9d8f28", 
        "branchName": "2.7", 
        "date": "Apr 18, 2017 9:46:33 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/8e98ed66bc262681a38052682ec5b6a42120f7f7", 
        "sha": "8e98ed66bc262681a38052682ec5b6a42120f7f7", 
        "branchName": "2.7", 
        "date": "Apr 18, 2017 7:11:02 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-223024976-223291136", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 14, 
        "numberDeleted": 17
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_15", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\nindex d74a2e9..f2bc1ca 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n@@ -576,10 +576,13 @@ public class JacksonAnnotationIntrospector\n     @Override\n     public ObjectIdInfo findObjectReferenceInfo(Annotated ann, ObjectIdInfo objectIdInfo) {\n         JsonIdentityReference ref = _findAnnotation(ann, JsonIdentityReference.class);\n-        if (ref != null) {\n-            objectIdInfo = objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n+        if (ref == null) {\n+            return objectIdInfo;\n         }\n-        return objectIdInfo;\n+        if (objectIdInfo == null) {\n+            objectIdInfo = ObjectIdInfo.empty();\n+        }\n+        return objectIdInfo.withAlwaysAsId(ref.alwaysAsId());\n     }\n \n     /*\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\nindex 0457ec0..049ab35 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/ObjectIdInfo.java\n@@ -19,6 +19,11 @@ public class ObjectIdInfo\n     protected final Class<?> _scope;\n     protected final boolean _alwaysAsId;\n \n+    /**\n+     * @since 2.8.9\n+     */\n+    private final static ObjectIdInfo EMPTY = new ObjectIdInfo(PropertyName.NO_NAME, Object.class, null, false, null);\n+\n     public ObjectIdInfo(PropertyName name, Class<?> scope, Class<? extends ObjectIdGenerator<?>> gen,\n             Class<? extends ObjectIdResolver> resolver)\n     {\n@@ -56,6 +61,10 @@ public class ObjectIdInfo\n         _resolver = resolver;\n     }\n \n+    public static ObjectIdInfo empty() {\n+        return EMPTY;\n+    }\n+\n     public ObjectIdInfo withAlwaysAsId(boolean state) {\n         if (_alwaysAsId == state) {\n             return this;\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\nindex 658786d..3b838cc 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java\n@@ -429,15 +429,14 @@ public abstract class BeanSerializerBase\n             if (objectIdInfo == null) {\n                 // no ObjectId override, but maybe ObjectIdRef?\n                 if (oiw != null) {\n-                    objectIdInfo = intr.findObjectReferenceInfo(accessor,\n-                            new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null));\n-                    oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n+                    objectIdInfo = intr.findObjectReferenceInfo(accessor, null);\n+                    if (objectIdInfo != null) {\n+                        oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId());\n+                    }\n                 }\n             } else {\n-                /* Ugh: mostly copied from BeanSerializerBase: but can't easily\n-                 * change it to be able to move to SerializerProvider (where it\n-                 * really belongs)\n-                 */\n+                // Ugh: mostly copied from BeanDeserializerBase: but can't easily change it\n+                // to be able to move to SerializerProvider (where it really belongs)\n                 \n                 // 2.1: allow modifications by \"id ref\" annotations as well:\n                 objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo);\n", 
    "projectMetrics": {
      "numberSourceFiles": 389, 
      "numberLibrariesFailingModule": 14, 
      "numberTestFiles": 365, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 280575688, 
        "hostName": "local", 
        "totalMemory": 555745280, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:31:44 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/223024976/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            1, 
            1, 
            0, 
            0, 
            60
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 62
        }, 
        "testing": {
          "stepDurations": [
            66
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 66
        }, 
        "cloning": {
          "stepDurations": [
            69
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 69
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:26:28 PM", 
      "totalDuration": 311
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1974, 
        "numberRunning": 1975, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/226276279", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.JsonMappingException", 
          "testMethod": "testIssue1612", 
          "testClass": "com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test", 
          "detail": "java.lang.Integer cannot be cast to java.lang.Double (through reference chain: com.fasterxml.jackson.databind.ser.BeanSerializerModifier1612Test$Bean1612[\"b\"])", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226639126", 
        "date": "Apr 28, 2017 3:08:19 AM", 
        "id": 226639126
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226276279", 
        "date": "Apr 27, 2017 7:57:58 AM", 
        "id": 226276279
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/c9ab9b3ac1881cacbdbb1a32a1de0e58fc3f6e06", 
        "sha": "c9ab9b3ac1881cacbdbb1a32a1de0e58fc3f6e06", 
        "branchName": "master", 
        "date": "Apr 28, 2017 3:02:18 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/b8b25e51327101cdb0d5b333cd7740a9684fea2e", 
        "sha": "b8b25e51327101cdb0d5b333cd7740a9684fea2e", 
        "branchName": "master", 
        "date": "Apr 27, 2017 7:39:11 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-226276279-226639126", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 412, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 451, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 3, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 13, 
        "numberDeleted": 27
      }
    }, 
    "bugId": "Bears_16", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\nindex 89f51b5..4307709 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java\n@@ -1155,7 +1155,7 @@ public abstract class SerializerProvider\n             String msg, Object... msgArgs) throws JsonMappingException {\n         String beanDesc = \"N/A\";\n         if (bean != null) {\n-            beanDesc = _desc(bean.getType().getGenericSignature());\n+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());\n         }\n         msg = String.format(\"Invalid type definition for type %s: %s\",\n                 beanDesc, _format(msg, msgArgs));\n@@ -1178,7 +1178,7 @@ public abstract class SerializerProvider\n         }\n         String beanDesc = \"N/A\";\n         if (bean != null) {\n-            beanDesc = _desc(bean.getType().getGenericSignature());\n+            beanDesc = ClassUtil.nameOf(bean.getBeanClass());\n         }\n         message = String.format(\"Invalid definition for property %s (of type %s): %s\",\n                 propName, beanDesc, message);\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\nindex 95613e1..c89d380 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerBuilder.java\n@@ -37,7 +37,7 @@ public class BeanSerializerBuilder\n     /**\n      * Bean properties, in order of serialization\n      */\n-    protected List<BeanPropertyWriter> _properties;\n+    protected List<BeanPropertyWriter> _properties = Collections.emptyList();\n \n     /**\n      * Optional array of filtered property writers; if null, no\n@@ -66,13 +66,13 @@ public class BeanSerializerBuilder\n      * type, if any.\n      */\n     protected ObjectIdWriter _objectIdWriter;\n-    \n+\n     /*\n     /**********************************************************\n     /* Construction and setter methods\n     /**********************************************************\n      */\n-    \n+\n     public BeanSerializerBuilder(BeanDescription beanDesc) {\n         _beanDesc = beanDesc;\n     }\n@@ -105,10 +105,22 @@ public class BeanSerializerBuilder\n         _properties = properties;\n     }\n \n+    /**\n+     * @param properties Number and order of properties here MUST match that\n+     *    of \"regular\" properties set earlier using {@link #setProperties(List)}; if not,\n+     *    an {@link IllegalArgumentException} will be thrown\n+     */\n     public void setFilteredProperties(BeanPropertyWriter[] properties) {\n+        if (properties != null) {\n+            if (properties.length != _properties.size()) { // as per [databind#1612]\n+                throw new IllegalArgumentException(String.format(\n+                        \"Trying to set %d filtered properties; must match length of non-filtered `properties` (%d)\",\n+                        properties.length, _properties.size()));\n+            }\n+        }\n         _filteredProperties = properties;\n     }\n-    \n+\n     public void setAnyGetter(AnyGetterWriter anyGetter) {\n         _anyGetter = anyGetter;\n     }\n@@ -185,6 +197,14 @@ public class BeanSerializerBuilder\n                 }\n             }\n         }\n+        // 27-Apr-2017, tatu: Verify that filtered-properties settings are compatible\n+        if (_filteredProperties != null) {\n+            if (_filteredProperties.length != _properties.size()) {\n+                throw new IllegalStateException(String.format(\n+\"Mismatch between `properties` size (%d), `filteredProperties` (%s): should have as many (or `null` for latter)\",\n+_properties.size(), _filteredProperties.length));\n+            }\n+        }\n         if (_anyGetter != null) {\n             _anyGetter.fixAccess(_config);\n         }\ndiff --git a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\nindex f0fa9c5..50436bb 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java\n@@ -520,7 +520,13 @@ public class BeanSerializerFactory\n             }\n         }\n \n-        JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build();\n+        JsonSerializer<Object> ser = null;\n+        try {\n+            ser = (JsonSerializer<Object>) builder.build();\n+        } catch (RuntimeException e) {\n+            prov.reportBadTypeDefinition(beanDesc, \"Failed to construct BeanSerializer for %s: (%s) %s\",\n+                    beanDesc.getType(), e.getClass().getName(), e.getMessage());\n+        }\n         if (ser == null) {\n             // If we get this far, there were no properties found, so no regular BeanSerializer\n             // would be constructed. But, couple of exceptions.\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 257290912, 
        "hostName": "local", 
        "totalMemory": 504889344, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:24:11 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/226276279/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            54
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 54
        }, 
        "testing": {
          "stepDurations": [
            56
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 56
        }, 
        "cloning": {
          "stepDurations": [
            53
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 53
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:19:31 PM", 
      "totalDuration": 272
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1975, 
        "numberRunning": 1976, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "java.lang.NullPointerException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/226654766", 
      "failureDetails": [
        {
          "failureName": "java.lang.NullPointerException", 
          "isError": true, 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestTypeNames", 
          "testMethod": "testBaseTypeId1616"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 3, 
          "numberRunning": 4, 
          "testClass": "com.fasterxml.jackson.databind.jsontype.TestTypeNames", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226666085", 
        "date": "Apr 28, 2017 5:37:56 AM", 
        "id": 226666085
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226654766", 
        "date": "Apr 28, 2017 4:33:51 AM", 
        "id": 226654766
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "sha": "974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "branchName": "master", 
        "date": "Apr 28, 2017 5:32:14 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/8c20a7670f71958c9af6c8daffab227d2d7ba87a", 
        "sha": "8c20a7670f71958c9af6c8daffab227d2d7ba87a", 
        "branchName": "master", 
        "date": "Apr 28, 2017 4:28:09 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-226654766-226666085", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 29, 
        "numberDeleted": 30
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_17", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\nindex 651b62d..9cb8bec 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/StdSubtypeResolver.java\n@@ -1,5 +1,6 @@\n package com.fasterxml.jackson.databind.jsontype.impl;\n \n+import java.lang.reflect.Modifier;\n import java.util.*;\n \n import com.fasterxml.jackson.databind.AnnotationIntrospector;\n@@ -21,7 +22,7 @@ public class StdSubtypeResolver\n     protected LinkedHashSet<NamedType> _registeredSubtypes;\n \n     public StdSubtypeResolver() { }\n-    \n+\n     /*\n     /**********************************************************\n     /* Subtype registration\n@@ -75,15 +76,17 @@ public class StdSubtypeResolver\n         }\n         \n         // then annotated types for property itself\n-        Collection<NamedType> st = ai.findSubtypes(property);\n-        if (st != null) {\n-            for (NamedType nt : st) {\n-                AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n-                        nt.getType());\n-                _collectAndResolve(ac, nt, config, ai, collected);\n-            }            \n+        if (property != null) {\n+            Collection<NamedType> st = ai.findSubtypes(property);\n+            if (st != null) {\n+                for (NamedType nt : st) {\n+                    AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config,\n+                            nt.getType());\n+                    _collectAndResolve(ac, nt, config, ai, collected);\n+                }            \n+            }\n         }\n-        \n+\n         NamedType rootType = new NamedType(rawBase, null);\n         AnnotatedClass ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, rawBase);\n             \n@@ -128,7 +131,7 @@ public class StdSubtypeResolver\n             AnnotatedMember property, JavaType baseType)\n     {\n         final AnnotationIntrospector ai = config.getAnnotationIntrospector();\n-        Class<?> rawBase = (baseType == null) ? property.getRawType() : baseType.getRawClass();\n+        Class<?> rawBase = baseType.getRawClass();\n \n         // Need to keep track of classes that have been handled already \n         Set<Class<?>> typesHandled = new HashSet<Class<?>>();\n@@ -141,14 +144,15 @@ public class StdSubtypeResolver\n         _collectAndResolveByTypeId(ac, rootType, config, typesHandled, byName);\n         \n         // then with definitions from property\n-        Collection<NamedType> st = ai.findSubtypes(property);\n-        if (st != null) {\n-            for (NamedType nt : st) {\n-                ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n-                _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n-            }            \n+        if (property != null) {\n+            Collection<NamedType> st = ai.findSubtypes(property);\n+            if (st != null) {\n+                for (NamedType nt : st) {\n+                    ac = AnnotatedClassResolver.resolveWithoutSuperTypes(config, nt.getType());\n+                    _collectAndResolveByTypeId(ac, nt, config, typesHandled, byName);\n+                }            \n+            }\n         }\n-        \n         // and finally explicit type registrations (highest precedence)\n         if (_registeredSubtypes != null) {\n             for (NamedType subtype : _registeredSubtypes) {\n@@ -160,21 +164,21 @@ public class StdSubtypeResolver\n                 }\n             }\n         }\n-        return _combineNamedAndUnnamed(typesHandled, byName);\n+        return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n     }\n \n     @Override\n     public Collection<NamedType> collectAndResolveSubtypesByTypeId(MapperConfig<?> config,\n-            AnnotatedClass type)\n+            AnnotatedClass baseType)\n     {\n+        final Class<?> rawBase = baseType.getRawType();\n         Set<Class<?>> typesHandled = new HashSet<Class<?>>();\n         Map<String,NamedType> byName = new LinkedHashMap<String,NamedType>();\n \n-        NamedType rootType = new NamedType(type.getRawType(), null);\n-        _collectAndResolveByTypeId(type, rootType, config, typesHandled, byName);\n+        NamedType rootType = new NamedType(rawBase, null);\n+        _collectAndResolveByTypeId(baseType, rootType, config, typesHandled, byName);\n         \n         if (_registeredSubtypes != null) {\n-            Class<?> rawBase = type.getRawType();\n             for (NamedType subtype : _registeredSubtypes) {\n                 // is it a subtype of root type?\n                 if (rawBase.isAssignableFrom(subtype.getType())) { // yes\n@@ -184,7 +188,7 @@ public class StdSubtypeResolver\n                 }\n             }\n         }\n-        return _combineNamedAndUnnamed(typesHandled, byName);\n+        return _combineNamedAndUnnamed(rawBase, typesHandled, byName);\n     }\n \n     /*\n@@ -267,8 +271,8 @@ public class StdSubtypeResolver\n      * Helper method used for merging explicitly named types and handled classes\n      * without explicit names.\n      */\n-    protected Collection<NamedType> _combineNamedAndUnnamed(Set<Class<?>> typesHandled,\n-            Map<String,NamedType> byName)\n+    protected Collection<NamedType> _combineNamedAndUnnamed(Class<?> rawBase,\n+            Set<Class<?>> typesHandled, Map<String,NamedType> byName)\n     {\n         ArrayList<NamedType> result = new ArrayList<NamedType>(byName.values());\n \n@@ -279,6 +283,11 @@ public class StdSubtypeResolver\n             typesHandled.remove(t.getType());\n         }\n         for (Class<?> cls : typesHandled) {\n+            // 27-Apr-2017, tatu: [databind#1616] Do not add base type itself unless\n+            //     it is concrete (or has explicit type name)\n+            if ((cls == rawBase) && Modifier.isAbstract(cls.getModifiers())) {\n+                continue;\n+            }\n             result.add(new NamedType(cls));\n         }\n         return result;\n", 
    "projectMetrics": {
      "numberSourceFiles": 412, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 452, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 311049928, 
        "hostName": "local", 
        "totalMemory": 396886016, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:20:20 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/226654766/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            65
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 65
        }, 
        "testing": {
          "stepDurations": [
            79
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 79
        }, 
        "cloning": {
          "stepDurations": [
            69
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 69
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:15:23 PM", 
      "totalDuration": 290
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1976, 
        "numberRunning": 1977, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.exc.InvalidDefinitionException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/226666085", 
      "failingClasses": [
        {
          "numberPassing": 0, 
          "numberRunning": 1, 
          "testClass": "com.fasterxml.jackson.databind.introspect.TypeCoercion1592Test", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.exc.InvalidDefinitionException", 
          "testMethod": "testTypeCoercion1592", 
          "testClass": "com.fasterxml.jackson.databind.introspect.TypeCoercion1592Test", 
          "detail": "Invalid definition for property \"i\" (of type com.fasterxml.jackson.databind.introspect.TypeCoercion1592Test$Bean1592): Can not refine serialization type [simple type, class int] into java.lang.Integer; types not related", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226673064", 
        "date": "Apr 28, 2017 6:16:09 AM", 
        "id": 226673064
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/226666085", 
        "date": "Apr 28, 2017 5:37:56 AM", 
        "id": 226666085
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/029413a6e381bb04b7b0a420730d3119e9cc0961", 
        "sha": "029413a6e381bb04b7b0a420730d3119e9cc0961", 
        "branchName": "master", 
        "date": "Apr 28, 2017 6:10:46 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "sha": "974ccddfd718a06f889da2dcd58ebb6bc22c8dca", 
        "branchName": "master", 
        "date": "Apr 28, 2017 5:32:14 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-226666085-226673064", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 412, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 453, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 27, 
        "numberDeleted": 17
      }
    }, 
    "bugId": "Bears_18", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\nindex d4a624a..19f52c6 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java\n@@ -761,6 +761,9 @@ public class JacksonAnnotationIntrospector\n                         type = tf.constructGeneralizedType(type, serClass);\n                     } else if (currRaw.isAssignableFrom(serClass)) { // specialization, ok as well\n                         type = tf.constructSpecializedType(type, serClass);\n+                    } else if (_primitiveAndWrapper(currRaw, serClass)) {\n+                        // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n+                        type = type.withStaticTyping();\n                     } else {\n                         throw new JsonMappingException(null,\n                                 String.format(\"Can not refine serialization type %s into %s; types not related\",\n@@ -793,6 +796,9 @@ public class JacksonAnnotationIntrospector\n                             keyType = tf.constructGeneralizedType(keyType, keyClass);\n                         } else if (currRaw.isAssignableFrom(keyClass)) { // specialization, ok as well\n                             keyType = tf.constructSpecializedType(keyType, keyClass);\n+                        } else if (_primitiveAndWrapper(currRaw, keyClass)) {\n+                            // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n+                            keyType = keyType.withStaticTyping();\n                         } else {\n                             throw new JsonMappingException(null,\n                                     String.format(\"Can not refine serialization key type %s into %s; types not related\",\n@@ -826,6 +832,9 @@ public class JacksonAnnotationIntrospector\n                            contentType = tf.constructGeneralizedType(contentType, contentClass);\n                        } else if (currRaw.isAssignableFrom(contentClass)) { // specialization, ok as well\n                            contentType = tf.constructSpecializedType(contentType, contentClass);\n+                       } else if (_primitiveAndWrapper(currRaw, contentClass)) {\n+                           // 27-Apr-2017, tatu: [databind#1592] ignore primitive<->wrapper refinements\n+                           contentType = contentType.withStaticTyping();\n                        } else {\n                            throw new JsonMappingException(null,\n                                    String.format(\"Can not refine serialization content type %s into %s; types not related\",\n@@ -1113,7 +1122,8 @@ public class JacksonAnnotationIntrospector\n         \n         // Ok: start by refining the main type itself; common to all types\n         final Class<?> valueClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.as());\n-        if ((valueClass != null) && !type.hasRawClass(valueClass)) {\n+        if ((valueClass != null) && !type.hasRawClass(valueClass)\n+                && !_primitiveAndWrapper(type, valueClass)) {\n             try {\n                 type = tf.constructSpecializedType(type, valueClass);\n             } catch (IllegalArgumentException iae) {\n@@ -1129,7 +1139,8 @@ public class JacksonAnnotationIntrospector\n         if (type.isMapLikeType()) {\n             JavaType keyType = type.getKeyType();\n             final Class<?> keyClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.keyAs());\n-            if (keyClass != null) {\n+            if ((keyClass != null)\n+                    && !_primitiveAndWrapper(keyType, keyClass)) {\n                 try {\n                     keyType = tf.constructSpecializedType(keyType, keyClass);\n                     type = ((MapLikeType) type).withKeyType(keyType);\n@@ -1145,7 +1156,8 @@ public class JacksonAnnotationIntrospector\n         if (contentType != null) { // collection[like], map[like], array, reference\n             // And then value types for all containers:\n             final Class<?> contentClass = (jsonDeser == null) ? null : _classIfExplicit(jsonDeser.contentAs());\n-            if (contentClass != null) {\n+            if ((contentClass != null)\n+                    && !_primitiveAndWrapper(contentType, contentClass)) {\n                 try {\n                     contentType = tf.constructSpecializedType(contentType, contentClass);\n                     type = type.withContentType(contentType);\n@@ -1451,9 +1463,25 @@ public class JacksonAnnotationIntrospector\n         return StdTypeResolverBuilder.noTypeInfoBuilder();\n     }\n \n-    /*\n-    /**********************************************************\n-    /* Helper classes\n-    /**********************************************************\n-     */\n+    private boolean _primitiveAndWrapper(Class<?> baseType, Class<?> refinement)\n+    {\n+        if (baseType.isPrimitive()) {\n+            return baseType == ClassUtil.primitiveType(refinement);\n+        }\n+        if (refinement.isPrimitive()) {\n+            return refinement == ClassUtil.primitiveType(baseType);\n+        }\n+        return false;\n+    }\n+\n+    private boolean _primitiveAndWrapper(JavaType baseType, Class<?> refinement)\n+    {\n+        if (baseType.isPrimitive()) {\n+            return baseType.hasRawClass(ClassUtil.primitiveType(refinement));\n+        }\n+        if (refinement.isPrimitive()) {\n+            return refinement == ClassUtil.primitiveType(baseType.getRawClass());\n+        }\n+        return false;\n+    }\n }\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 204123192, 
        "hostName": "local", 
        "totalMemory": 350748672, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 9, 2018 11:19:46 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/226666085/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            62
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 62
        }, 
        "testing": {
          "stepDurations": [
            68
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 68
        }, 
        "cloning": {
          "stepDurations": [
            53
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 53
        }
      }, 
      "reproductionDateBeginning": "Oct 9, 2018 11:14:37 PM", 
      "totalDuration": 303
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1720, 
        "numberRunning": 1721, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/228025083", 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "detail": "expected:<jack> but was:<null>", 
          "isError": false, 
          "testMethod": "testIgnoreGetterNotSetter1595", 
          "testClass": "com.fasterxml.jackson.databind.filter.IgnorePropertyOnDeserTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 2, 
          "numberRunning": 3, 
          "testClass": "com.fasterxml.jackson.databind.filter.IgnorePropertyOnDeserTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/228873360", 
        "date": "May 4, 2017 9:53:36 PM", 
        "id": 228873360
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/228025083", 
        "date": "May 2, 2017 6:47:20 PM", 
        "id": 228025083
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4a2b1ae08ded66b77e05bf8fa0ac8a2e8c60709d", 
        "sha": "4a2b1ae08ded66b77e05bf8fa0ac8a2e8c60709d", 
        "branchName": "2.8", 
        "date": "May 4, 2017 9:48:52 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/f13cfb1f671af15814e2aa34e9f12cf00ab93b58", 
        "sha": "f13cfb1f671af15814e2aa34e9f12cf00ab93b58", 
        "branchName": "2.8", 
        "date": "May 2, 2017 6:42:22 PM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-228025083-228873360", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 1, 
        "numberDeleted": 1
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_19", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\nindex 4b0434e..1423f28 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java\n@@ -492,7 +492,7 @@ public class BeanDeserializerFactory\n             boolean ignoreAny = ignorals.getIgnoreUnknown();\n             builder.setIgnoreUnknownProperties(ignoreAny);\n             // Or explicit/implicit definitions?\n-            ignored = ignorals.getIgnored();\n+            ignored = ignorals.findIgnoredForDeserialization();\n             for (String propName : ignored) {\n                 builder.addIgnorable(propName);\n             }\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 396, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 238036008, 
        "hostName": "local", 
        "totalMemory": 346554368, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 3:24:48 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/228025083/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            44
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 44
        }, 
        "testing": {
          "stepDurations": [
            26
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 26
        }, 
        "cloning": {
          "stepDurations": [
            46
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 46
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 3:21:59 PM", 
      "totalDuration": 164
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1721, 
        "numberRunning": 1722, 
        "numberFailing": 0, 
        "numberErroring": 1, 
        "failures": [
          {
            "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
            "isError": true, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/233857275", 
      "failingClasses": [
        {
          "numberPassing": 8, 
          "numberRunning": 9, 
          "testClass": "com.fasterxml.jackson.databind.filter.ProblemHandlerTest", 
          "numberFailing": 0, 
          "numberErroring": 1, 
          "numberSkipping": 0
        }
      ], 
      "failureDetails": [
        {
          "failureName": "com.fasterxml.jackson.databind.exc.InvalidFormatException", 
          "testMethod": "testWeirdStringHandling", 
          "testClass": "com.fasterxml.jackson.databind.filter.ProblemHandlerTest", 
          "detail": "Can not deserialize value of type java.util.UUID from String \"not a uuid!\": not a valid textual representation\n at [Source: \"not a uuid!\"; line: 1, column: 1]", 
          "isError": true
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/234147085", 
        "date": "May 19, 2017 10:12:31 PM", 
        "id": 234147085
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/233857275", 
        "date": "May 19, 2017 3:39:30 AM", 
        "id": 233857275
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/9a083ad56b20711eab368a7818fb079a870feb93", 
        "sha": "9a083ad56b20711eab368a7818fb079a870feb93", 
        "branchName": "2.8", 
        "date": "May 19, 2017 10:07:44 PM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/edaa4ad8204dfda985d3c74ffe542c9eb67a201d", 
        "sha": "edaa4ad8204dfda985d3c74ffe542c9eb67a201d", 
        "branchName": "2.8", 
        "date": "May 19, 2017 3:34:35 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-233857275-234147085", 
    "version": "latest", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 396, 
      "numberModules": 1
    }, 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 6, 
        "numberDeleted": 6
      }
    }, 
    "bugId": "Bears_20", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\nindex 102e0e3..0d01e78 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java\n@@ -13,6 +13,7 @@ import java.util.TimeZone;\n import java.util.regex.Pattern;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n import com.fasterxml.jackson.databind.DeserializationContext;\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.JsonMappingException;\n@@ -112,10 +113,10 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>\n             }\n             Exception cause = null;\n             try {\n-                T result = _deserialize(text, ctxt);\n-                if (result != null) {\n-                    return result;\n-                }\n+                // 19-May-2017, tatu: Used to require non-null result (assuming `null`\n+                //    indicated error; but that seems wrong. Should be able to return\n+                //    `null` as value.\n+                return _deserialize(text, ctxt);\n             } catch (IllegalArgumentException iae) {\n                 cause = iae;\n             } catch (MalformedURLException me) {\n@@ -277,7 +278,8 @@ public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T>\n             case STD_STRING_BUILDER:\n                 return new StringBuilder(value);\n             }\n-            throw new IllegalArgumentException();\n+            VersionUtil.throwInternal();\n+            return null;\n         }\n \n         @Override\n", 
    "type": "passing_passing", 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 270497080, 
        "hostName": "local", 
        "totalMemory": 377487360, 
        "numberCPU": 4
      }, 
      "reproductionDateEnd": "Oct 10, 2018 3:20:44 PM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/233857275/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            45
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 45
        }, 
        "testing": {
          "stepDurations": [
            37
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 37
        }, 
        "cloning": {
          "stepDurations": [
            49
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 49
        }
      }, 
      "reproductionDateBeginning": "Oct 10, 2018 3:17:16 PM", 
      "totalDuration": 201
    }
  }, 
  {
    "tests": {
      "overallMetrics": {
        "numberPassing": 1722, 
        "numberRunning": 1723, 
        "numberFailing": 1, 
        "numberErroring": 0, 
        "failures": [
          {
            "failureName": "junit.framework.ComparisonFailure", 
            "isError": false, 
            "occurrences": 1
          }
        ], 
        "numberSkipping": 0
      }, 
      "failingModule": "/root/workspace/FasterXML/jackson-databind/241044631", 
      "failureDetails": [
        {
          "failureName": "junit.framework.ComparisonFailure", 
          "detail": "expected:<{\"date\":\"1970-01-01[X01:00:]00\"}> but was:<{\"date\":\"1970-01-01[T01:00:00.000+01]00\"}>", 
          "isError": false, 
          "testMethod": "testFormatWithoutPattern", 
          "testClass": "com.fasterxml.jackson.databind.ser.DateSerializationTest"
        }
      ], 
      "failingClasses": [
        {
          "numberPassing": 13, 
          "numberRunning": 14, 
          "testClass": "com.fasterxml.jackson.databind.ser.DateSerializationTest", 
          "numberFailing": 1, 
          "numberErroring": 0, 
          "numberSkipping": 0
        }
      ]
    }, 
    "builds": {
      "fixerBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/241063530", 
        "date": "Jun 9, 2017 7:25:15 AM", 
        "id": 241063530
      }, 
      "buggyBuild": {
        "url": "http://travis-ci.org/FasterXML/jackson-databind/builds/241044631", 
        "date": "Jun 9, 2017 5:11:11 AM", 
        "id": 241044631
      }
    }, 
    "repository": {
      "name": "FasterXML-jackson-databind", 
      "url": "https://github.com/FasterXML/jackson-databind", 
      "isFork": false, 
      "pullRequestId": 0, 
      "isPullRequest": false, 
      "original": {
        "url": "", 
        "name": "", 
        "githubId": 0
      }, 
      "githubId": 3038937
    }, 
    "commits": {
      "fixerBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/93f7e14d096181a251aae3355464d24bcd7677a5", 
        "sha": "93f7e14d096181a251aae3355464d24bcd7677a5", 
        "branchName": "2.8", 
        "date": "Jun 9, 2017 7:20:50 AM", 
        "repoName": "FasterXML/jackson-databind"
      }, 
      "buggyBuild": {
        "url": "http://github.com/FasterXML/jackson-databind/commit/4b00ccc8ae9763c76e363621dc9ee4b8692d30dc", 
        "sha": "4b00ccc8ae9763c76e363621dc9ee4b8692d30dc", 
        "branchName": "2.8", 
        "date": "Jun 9, 2017 5:06:58 AM", 
        "repoName": "FasterXML/jackson-databind"
      }
    }, 
    "branchUrl": "https://github.com/bears-bugs/bears-benchmark/tree/FasterXML-jackson-databind-241044631-241063530", 
    "version": "latest", 
    "patchDiff": {
      "files": {
        "numberAdded": 0, 
        "numberChanged": 1, 
        "numberDeleted": 0
      }, 
      "lines": {
        "numberAdded": 64, 
        "numberDeleted": 29
      }
    }, 
    "type": "passing_passing", 
    "bugId": "Bears_21", 
    "diff": "diff --git a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\nindex ea67b88..4b9312b 100644\n--- a/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n+++ b/src/main/java/com/fasterxml/jackson/databind/ser/std/DateTimeSerializerBase.java\n@@ -49,33 +49,76 @@ public abstract class DateTimeSerializerBase<T>\n     public JsonSerializer<?> createContextual(SerializerProvider serializers,\n             BeanProperty property) throws JsonMappingException\n     {\n-        if (property != null) {\n-            JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n-            if (format != null) {\n-            \t// Simple case first: serialize as numeric timestamp?\n-                JsonFormat.Shape shape = format.getShape();\n-                if (shape.isNumeric()) {\n-                    return withFormat(Boolean.TRUE, null);\n-                }\n-                if ((shape == JsonFormat.Shape.STRING) || format.hasPattern()\n-                                || format.hasLocale() || format.hasTimeZone()) {\n-                    TimeZone tz = format.getTimeZone();\n-                    final String pattern = format.hasPattern()\n-                                    ? format.getPattern()\n-                                    : StdDateFormat.DATE_FORMAT_STR_ISO8601;\n-                    final Locale loc = format.hasLocale()\n-                                    ? format.getLocale()\n-                                    : serializers.getLocale();\n-                    SimpleDateFormat df = new SimpleDateFormat(pattern, loc);\n-                    if (tz == null) {\n-                        tz = serializers.getTimeZone();\n-                    }\n-                    df.setTimeZone(tz);\n-                    return withFormat(Boolean.FALSE, df);\n-                }\n+        if (property == null) {\n+            return this;\n+        }\n+        JsonFormat.Value format = findFormatOverrides(serializers, property, handledType());\n+        if (format == null) {\n+            return this;\n+        }\n+        // Simple case first: serialize as numeric timestamp?\n+        JsonFormat.Shape shape = format.getShape();\n+        if (shape.isNumeric()) {\n+            return withFormat(Boolean.TRUE, null);\n+        }\n+\n+        // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky..\n+        // First: custom pattern will override things\n+        if (format.hasPattern()) {\n+            final Locale loc = format.hasLocale()\n+                            ? format.getLocale()\n+                            : serializers.getLocale();\n+            SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc);\n+            TimeZone tz = format.hasTimeZone() ? format.getTimeZone()\n+                    : serializers.getTimeZone();\n+            df.setTimeZone(tz);\n+            return withFormat(Boolean.FALSE, df);\n+        }\n+\n+        // Otherwise, need one of these changes:\n+        final boolean hasLocale = format.hasLocale();\n+        final boolean hasTZ = format.hasTimeZone();\n+        final boolean asString = (shape == JsonFormat.Shape.STRING);\n+\n+        if (!hasLocale && !hasTZ && !asString) {\n+            return this;\n+        }\n+\n+        DateFormat df0 = serializers.getConfig().getDateFormat();\n+        // Jackson's own `StdDateFormat` is quite easy to deal with...\n+        if (df0 instanceof StdDateFormat) {\n+            StdDateFormat std = (StdDateFormat) df0;\n+            if (format.hasLocale()) {\n+                std = std.withLocale(format.getLocale());\n+            }\n+            if (format.hasTimeZone()) {\n+                std = std.withTimeZone(format.getTimeZone());\n             }\n+            return withFormat(Boolean.FALSE, std);\n+        }\n+\n+        // 08-Jun-2017, tatu: Unfortunately there's no generally usable\n+        //    mechanism for changing `DateFormat` instances (or even clone()ing)\n+        //    So: require it be `SimpleDateFormat`; can't config other types\n+        if (!(df0 instanceof SimpleDateFormat)) {\n+//            serializers.reportBadDefinition(handledType(), String.format(\n+            serializers.reportMappingProblem(\n+\"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\",\n+df0.getClass().getName());\n+        }\n+        SimpleDateFormat df = (SimpleDateFormat) df0;\n+        if (hasLocale) {\n+            // Ugh. No way to change `Locale`, create copy; must re-crete completely:\n+            df = new SimpleDateFormat(df.toPattern(), format.getLocale());\n+        } else {\n+            df = (SimpleDateFormat) df.clone();\n+        }\n+        TimeZone newTz = format.getTimeZone();\n+        boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone());\n+        if (changeTZ) {\n+            df.setTimeZone(newTz);\n         }\n-        return this;\n+        return withFormat(Boolean.FALSE, df);\n     }\n \n     /*\n", 
    "projectMetrics": {
      "numberSourceFiles": 397, 
      "numberLibrariesFailingModule": 17, 
      "numberTestFiles": 396, 
      "numberModules": 1
    }, 
    "reproductionBuggyBuild": {
      "machineInfo": {
        "freeMemory": 433435336, 
        "hostName": "spirals-bears", 
        "totalMemory": 634912768, 
        "numberCPU": 16
      }, 
      "reproductionDateEnd": "Dec 10, 2018 2:26:42 AM", 
      "projectRootPomPath": "./workspace/FasterXML/jackson-databind/241044631/pom.xml", 
      "processDurations": {
        "building": {
          "stepDurations": [
            0, 
            0, 
            0, 
            0, 
            52
          ], 
          "stepNames": [
            "CheckoutPatchedBuildCandidate", 
            "ComputeSourceDir", 
            "ComputeTestDir", 
            "CheckoutBuggyBuildCandidateSourceCode", 
            "BuildProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 5, 
          "totalDuration": 52
        }, 
        "testing": {
          "stepDurations": [
            40
          ], 
          "stepNames": [
            "TestProjectBuggyBuildCandidateSourceCode"
          ], 
          "nbSteps": 1, 
          "totalDuration": 40
        }, 
        "cloning": {
          "stepDurations": [
            29
          ], 
          "stepNames": [
            "CloneRepository"
          ], 
          "nbSteps": 1, 
          "totalDuration": 29
        }
      }, 
      "reproductionDateBeginning": "Dec 10, 2018 2:23:14 AM", 
      "totalDuration": 202
    }
  }
]